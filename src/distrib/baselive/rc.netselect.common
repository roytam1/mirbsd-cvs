# $MirOS: src/distrib/baselive/rc.netselect.common,v 1.19 2010/01/06 19:11:56 tg Exp $
#-
# Copyright (c) 2006, 2007, 2008, 2010
#	Thorsten Glaser <tg@mirbsd.de>
#
# Provided that these terms and disclaimer and all copyright notices
# are retained or reproduced in an accompanying document, permission
# is granted to deal in this work without restriction, including un-
# limited rights to use, publicly perform, distribute, sell, modify,
# merge, give away, or sublicence.
#
# This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
# the utmost extent permitted by applicable law, neither express nor
# implied; without malicious intent or gross negligence. In no event
# may a licensor, author or contributor be held liable for indirect,
# direct, other damage, loss, or other issues arising in any way out
# of dealing in the work, even if advised of the possibility of such
# damage or existence of a defect, except proven that it results out
# of said person's immediate fault when using the work as intended.

function get_kbdtype {
	[[ -x /sbin/kbd ]] || return
	print
	while :; do
		set -o noglob
		print -n "kbd(8) mapping? ('?' for list) "
		read resp
		: ${resp:=none}
		set +o noglob
		[[ $resp = none ]] && return
		[[ $resp = @(\?|+([0-9])) && -z ${layouts[0]} ]] && \
		    set -A layouts -- $(kbd -lq | \
		    egrep '^..\.?(nodead|dvorak)?$' | sort)
		[[ $resp = +([0-9]) ]] && resp=${layouts[$resp]}
		[[ $resp = [a-z]* ]] && if kbd $resp; then
			ed -s /etc/wsconsctl.conf <<-EOF
				%g/keyboard.encoding/d
				\$a
				keyboard.encoding=$resp
				.
				wq
			EOF
			mv /home/live/.Xmodmap /home/live/.Xmodmap.dist
			[[ $resp = *.nodead ]] && \
			    ed -s /etc/X11/XF86Config <<-EOF
				%g/Xkb.*nodead/s/^#//
				wq
			EOF
			l=${resp%%.*}
			[[ $resp = *.dvorak ]] && l=dvorak
			ed -s /etc/X11/XF86Config <<-EOF
				%g/XkbLayout/s/us/$l/
				wq
			EOF
			return
		fi
		[[ $resp = \? ]] || continue
		print Available keyboard mappings:
		typeset -iR3 i=-1
		while (( ++i < ${#layouts[*]} )); do
			print "$i) ${layouts[i]}"
		done | rs
	done
}

function show_info {
	print
	print 'To get support, use lynx(1) with the following resources:'
	print 'online man pages: http://www.mirbsd.org/cman/'
	print 'interactive help: irc.freenode.net #MirBSD'
	get_kbdtype
	[[ -e /NONFREE.TXT || -e /nonfree.txt ]] || return
	print
	print 'ATTENTION: this Live CD contains possibly non-free or'
	print 'otherwise restricted components! These are:'
	(head -1 /NONFREE.TXT 2>&-; head -1 /nonfree.txt 2>&-) | \
	    fold -sw70 | sed 's!^!| !'
	print 'Please read /NONFREE.TXT for further information.'
	print
	print 'Press the RETURN key to continue...'
	read dummy
}

function get_passwd {
	print
	print "To login to the MirOS Live CD, a user 'live' has been added."
	print 'Please enter a password to login with now (default: "live").'
	print Note: it is highly suggested to change the password, because
	print 'sshd(8) is started by default.'
	passwd live
}

function set_hostname {
	typeset -Uui36 rndval=$(date +%s)
	typeset -i1 x=RANDOM
	rndpfx=${rndval#36#}
	RANDOM=$(dd if=/dev/prandom bs=4 count=1 2>&- | hexdump -e '1/4 "%u"')
	print -nr "${x#1#}" >/dev/arandom
	RANDOM=$(dd if=/dev/arandom bs=4 count=1 2>&- | hexdump -e '1/4 "%u"')
	while (( ${#rndpfx} < 36 )); do
		typeset -Uui36 'rndval=( (RANDOM << 15 | RANDOM) % 60466176)'
		rndpfx=${rndval#36#}$rndpfx
	done
	rndpfx=${rndpfx: -36}
	# yes, the "livecd." comes first, trust me on this
	print livecd.$rndpfx.invalid.mirbsd.org >/etc/myname
	print ::1 livecd livecd.$rndpfx.invalid.mirbsd.org >>/etc/hosts
	print 127.0.0.1 livecd livecd.$rndpfx.invalid.mirbsd.org >>/etc/hosts
}

function get_net_ifnames {
	typeset foo
	typeset -i i

	set -A foo -- $(ifconfig -l)
	i=${#foo[*]}
	while (( i-- > 0 )); do
		[[ ${foo[i]} = @(lo|bridge|enc|gif|gre|tun|vlan|irip|pflog|pfsync|plip|sl)+([0-9]) ]] && \
		    unset foo[i]
	done
	print ${foo[*]}
}

function ask_netconfig {
	set -A all_ifnames -- $(get_net_ifnames)
	default_ifname=${all_ifnames[0]}
	if [[ -z $default_ifname ]]; then
		print
		print No network interface found, skipping.
		do_netconf none
		return
	fi
	print
	print "Available network interfaces: ${all_ifnames[*]}"
	if=
	while [[ -z $if ]]; do
		print -n Interface to run a DHCP client on \
		    "(or none/done) [$default_ifname]? "
		read ifname
		[[ $ifname = @(d|n)one ]] && break
		[[ -z $ifname ]] && ifname=$default_ifname
		let i=0
		while (( i < ${#all_ifnames[*]} )); do
			[[ ${all_ifnames[i]} = $ifname ]] && \
			    if=${all_ifnames[i]}
			let ++i
		done
	done
	do_netconf ${if:-none}
}

function do_netconf {
	if [[ $1 = none ]]; then
		:
		#XXX this is actually a bad idea, maybe the network
		#XXX is manually configured later; for now, just do
		#XXX not add the run of rdate (ntpd is run with -S)
		#print ntpd_flags=NO >>/etc/rc.conf.local
	else
		print dhcp >/etc/hostname.$1
		print rdate_flags=\"-nv ntp.mirbsd.org\" >>/etc/rc.conf.local
		print rtsold_flags=-am >>/etc/rc.conf.local
		# pull IPv6 now (early), so that ntp.mirbsd.org can be reached
		ifconfig $1 up
		print Running IPv6 autoconfiguration on $1... takes a few secs
		rtsol $1
	fi
}

function do_before {
	rm -f /etc/hosts
}

function do_after {
	rm -f /etc/hostname.done
}

function do_shell {
	if ! grep -w ^console /etc/ttys | grep -qw secure; then
		oldIFS=$IFS; IFS=:
		set -A p -- $(grep ^root: /etc/master.passwd | head -1)
		IFS=$oldIFS
		print "DEBUG: ${p[1]}"
		print Gimme a root password, please.
		if [[ ${p[1]} != $(/usr/bin/encrypt -pS "${p[1]}") ]]; then
			print root login failed.
			continue
		fi
		set -A p
	fi

	HOME=/ /bin/mksh -l
	print
}
