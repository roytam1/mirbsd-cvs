#!/usr/bin/env mksh
# $MirOS: src/sys/arch/i386/stand/bootxx/mkbxinst.sh,v 1.12 2009/02/01 15:50:09 tg Exp $
# $miros: src/sys/arch/i386/stand/bootxx/mkbxinst.sh,v 1.12 2009/02/01 15:50:09 tg Exp $
#-
# Copyright (c) 2007, 2008, 2009
#	Thorsten Glaser <tg@mirbsd.org>
#
# Provided that these terms and disclaimer and all copyright notices
# are retained or reproduced in an accompanying document, permission
# is granted to deal in this work without restriction, including un‐
# limited rights to use, publicly perform, distribute, sell, modify,
# merge, give away, or sublicence.
#
# This work is provided “AS IS” and WITHOUT WARRANTY of any kind, to
# the utmost extent permitted by applicable law, neither express nor
# implied; without malicious intent or gross negligence. In no event
# may a licensor, author or contributor be held liable for indirect,
# direct, other damage, loss, or other issues arising in any way out
# of dealing in the work, even if advised of the possibility of such
# damage or existence of a defect, except proven that it results out
# of said person’s immediate fault when using the work as intended.
#-
# Self-installing 32-bit x86 boot blocks for MirOS BSD/i386
# Reads a list of extents (firstblock lastblock) from standard input
# and writes bootxx to standard output, which can subsequentially be
# stored as partition boot record (or floppy boot sector) on disc.

set -A thecode 0x66 0x31 0xC9 0x8E 0xD1 0xBC 0xFC 0xFF 0x66 0x51 0x66 0x9D 0x8E 0xC1 0xBF 0x00 0x7C 0x57 0xB1 0x10 0xF3 0xA4 0x5E 0x8E 0xD9 0xBB 0x00 0x40 0x53 0x53 0x8E 0xC3 0xBF 0x00 0xFE 0xB5 0x02 0xF3 0xA4 0x1F 0x68 0x7A 0xFE 0xCB 0x30 0x41 0x41 0x36 0x20 0x4C 0x6F 0x61 0x64 0x69 0x6E 0x67 0x20 0x00 0x62 0x61 0x64 0x20 0x6D 0x61 0x67 0x69 0x63 0x20 0x65 0x72 0x72 0x6F 0x72 0x0D 0x0A 0x00 0xA8 0x02 0x00 0x12 0x00 0x00 0x80 0x53 0xFF 0xB4 0x0E 0xBB 0x07 0x00 0xCD 0x10 0xAC 0x08 0xC0 0x75 0xF4 0xC3 0xE8 0xF7 0xFF 0xB8 0x33 0xFF 0x87 0x06 0x53 0xFE 0x3D 0x33 0xFF 0x75 0x19 0x31 0xC0 0xCD 0x16 0xEA 0xF0 0xFF 0x00 0xF0 0xFB 0x88 0x16 0x52 0xFE 0xBE 0x2C 0xFE 0x80 0xFA 0x80 0x72 0xDB 0xE8 0xD2 0xFF 0x31 0xDB 0xBE 0x56 0xFF 0x0F 0xB6 0x2E 0x4C 0xFE 0xAC 0x0F 0xB6 0xC8 0xC0 0xE9 0x05 0x83 0xE0 0x1F 0x40 0x41 0x50 0xBF 0x10 0xFE 0xB8 0x10 0x00 0xAB 0xB0 0x01 0xAB 0x89 0xD8 0xAB 0x8C 0xC8 0xAB 0xF3 0xA4 0x31 0xC0 0xAB 0xAB 0xAB 0xAB 0x5F 0x55 0x56 0xBE 0x10 0xFE 0xFF 0x16 0x53 0xFE 0xBD 0x04 0x00 0x8A 0x16 0x52 0xFE 0x60 0xF9 0xCD 0x13 0x9C 0xB8 0x2E 0x0E 0xBB 0x07 0x00 0xCD 0x10 0x9D 0xFB 0x61 0x73 0x1C 0x4D 0x60 0x9C 0x31 0xC0 0xCD 0x13 0x9D 0xBE 0x43 0xFE 0x0F 0x84 0x77 0xFF 0xB8 0x30 0x0E 0x01 0xE8 0xBB 0x07 0x00 0xCD 0x10 0x61 0xEB 0xD2 0x80 0xC7 0x02 0x89 0x5C 0x04 0x66 0x83 0x44 0x08 0x01 0x66 0x83 0x54 0x0C 0x00 0x4F 0x75 0xB1 0x5E 0x5D 0x4D 0x75 0x84 0x66 0x31 0xC0 0x50 0xA1 0x51 0xFE 0x66 0x87 0x06 0x04 0x00 0x66 0x3D 0x00 0x4F 0x6D 0x69 0xBE 0x3A 0xFE 0x0F 0x85 0x39 0xFF 0xBE 0x49 0xFE 0xE8 0x2D 0xFF 0xBE 0x00 0xFE 0xC3 0x8B 0x44 0x08 0x8B 0x54 0x0A 0xF7 0x36 0x4F 0xFE 0x42 0x31 0xC9 0x87 0xD1 0xF7 0x36 0x4D 0xFE 0xC0 0xE4 0x06 0x86 0xC4 0x09 0xC1 0x88 0xD6 0xB8 0x01 0x02 0xC3 0xB4 0x42 0xC3
typeset -i ofs_bkcnt=76
typeset -i ofs_geomh=77
typeset -i ofs_geoms=79
typeset -i ofs_partp=81
typeset -i ofs_secsz=250
typeset -i begptr=342
typeset -Uui8 thecode

typeset -Uui16 curptr=begptr
typeset -i wnum=0 wofs=0 wrec=0

function do_record {
	typeset -i blk=$1 cnt=$2
	typeset -i n=cnt+100
	typeset -Uui16 x=blk y

	(( blk && cnt )) || return

	print -u2 "$wrec @0x${curptr#16#}: ${n#1} @$blk (0x${x#16#})"

	while (( cnt )); do
		let wrec++
		(( n = blk < 0x00000100 ? 0 :
		    blk < 0x00010000 ? 1 :
		    blk < 0x01000000 ? 2 : 3 ))
		(( x = cnt < 33 ? cnt : 32 ))
		(( y = blk ))
		print -u2 " - 0x${curptr#16#}: $((x)) (0x${x#16#}) @ $blk" \
		    "(0x${y#16#})"
		(( thecode[curptr++] = (n++ << 5) | (x - 1) ))
		(( blk += x ))
		(( cnt -= x ))
		while (( n-- )); do
			(( thecode[curptr++] = y & 0xFF ))
			(( y >>= 8 ))
		done
	done
}

function record_block {
	typeset -i sv blk=$1

	if (( !blk || (wofs && blk != (wofs + wnum)) )); then
		# flush the blocks from the cache
		(( wnum )) && do_record $wofs $wnum
		wofs=0
		wnum=0
	fi
	if (( blk )); then
		# record some new block into the cache
		(( wofs )) || let wofs=blk
		(( wnum += 1 << sscale ))
	fi
}

typeset -i partp=0 numheads=0 numsecs=0 sscale=0 bsh=9

while getopts ":0:1B:h:p:S:s:" ch; do
	case $ch {
	(0)	;;
	(1)	;;
	(B)	if (( (bsh = OPTARG) < 8 || OPTARG > 15 )); then
			print -u2 error: invalid block size "2^'$OPTARG'"
			exit 1
		fi
		;;
	(h)	if (( (numheads = OPTARG) < 1 || OPTARG > 256 )); then
			print -u2 warning: invalid head count "'$OPTARG'"
			numheads=0
		fi ;;
	(p)	if (( (partp = OPTARG) < 1 || OPTARG > 255 )); then
			print -u2 warning: invalid partition type "'$OPTARG'"
			partp=0
		fi ;;
	(S)	if (( (sscale = OPTARG) < 0 || OPTARG > 24 )); then
			print -u2 error: invalid input scale "'$OPTARG'"
			exit 1
		fi ;;
	(s)	if (( (numsecs = OPTARG) < 1 || OPTARG > 63 )); then
			print -u2 warning: invalid sector count "'$OPTARG'"
			numsecs=0
		fi ;;
	(*)	print -u2 'Syntax:
	bxinst [-1] [-B blocksize] [-h heads] [-p partitiontype] [-S scale]
	    [-s sectors] <sectorlist | dd of=image conv=notrunc
Default values: blocksize=9 heads=16 sectors=63 partitiontype=0x27 scale=0'
		exit 1 ;;
	}
done
shift $((OPTIND - 1))

if (( !numheads )); then
	print -u2 warning: using default value of 16 heads
	numheads=16
fi

if (( !numsecs )); then
	print -u2 warning: using default value of 63 sectors
	numsecs=63
fi

# read in the extents
while read firstblock lastblock junk; do
	while (( firstblock <= lastblock )); do
		record_block $((firstblock++ << sscale))
	done
done
record_block 0	# just flush
print -u2 "using $wrec blocks, $((curptr-begptr)) bytes ($((510-curptr)) free)"

# fill the block table
if (( curptr-- > 510 )); then
	print -u2 error: too many blocks
	exit 1
fi
while (( ++curptr < 510 )); do
	(( thecode[curptr] = (curptr & 0xFCF) == 0x1C2 ? 0 : RANDOM & 0xFF ))
	# ensure the “active” flag is never set to 0x00 or 0x80
	if (( ((curptr + 2) & 0xFCF) == 0x01C0 )); then
		(( thecode[curptr] & 0x7F )) || let --curptr
	fi
done
thecode[510]=0x55
thecode[511]=0xAA

# fill in other data
(( thecode[ofs_bkcnt] = wrec ))
(( thecode[ofs_geomh] = numheads & 0xFF ))
(( thecode[ofs_geomh + 1] = numheads >> 8 ))
(( thecode[ofs_geoms] = numsecs ))
(( thecode[ofs_partp] = partp ))
print -u2 "using sectors of 2^$bsh = $((1 << bsh)) bytes"
(( bsh == 9 )) || (( thecode[ofs_secsz] = (1 << (bsh - 8)) ))

# create the output string
ostr=
curptr=0
while (( curptr < 512 )); do
	ostr=$ostr\\0${thecode[curptr++]#8#}
done

# over and out
print -n "$ostr"
exit 0
