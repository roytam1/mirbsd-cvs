.\" $MirOS$
.\"-
.\" Copyright (c) 2004
.\"	Thorsten "mirabile" Glaser <tg@66h.42h.de>
.\"
.\" Licensee is hereby permitted to deal in this work without restric-
.\" tion, including unlimited rights to use, publicly perform, modify,
.\" merge, distribute, sell, give away or sublicence, provided all co-
.\" pyright notices above, these terms and the disclaimer are retained
.\" in all redistributions or reproduced in accompanying documentation
.\" or other materials provided with binary redistributions.
.\"
.\" Licensor hereby provides this work "AS IS" and WITHOUT WARRANTY of
.\" any kind, expressed or implied, to the maximum extent permitted by
.\" applicable law, but with the warranty of being written without ma-
.\" licious intent or gross negligence; in no event shall licensor, an
.\" author or contributor be held liable for any damage, direct, indi-
.\" rect or other, however caused, arising in any way out of the usage
.\" of this work, even if advised of the possibility of such damage.
.\"-
.\" Hopefully, this small tutorial takes away the fear from both UNIX(R)
.\" programmers coming from GAS AT&T move, and PC programmers from NASM.
.\"
.TH gas-intel-howto 7 "January 26th, 2004" "" "MirOS Tutorial"
.SH NAME
gas-intel-howto \- How to write Intel syntax \
assembly code with the GNU assembler
.SH TUTORIAL
Did you always wonder how this new Intel mode of \fBas(1)\fR could
be used?
Did you wonder why the GNU Texinfo documentation is wrong?
.br
This is the answer.
.PP
First off, how would you start an assembly language programme?
This is a real-life example:
.PP
.DT
.nf
/* copyright ...
 */

#include <machine/asm.h>

	\&.intel_syntax noprefix
	\&.text
.fi
.PP
Now, you can use all the well-known ops and pseudo-ops
from the gas and intel world.
You just need to keep track, which one to use.
.br
Did you know you can concatenate assembly lines with
a semicolon ('\;')?
Now, how do you issue comments?
.br
It's easy.
Using \fBgcc \-c \-o fnord.o fnord.S\fR automatically
uses the C Preprocessor, \fBcpp(1)\fR, on the file first.
That's why the C-style comment in the above example could
be used.
.SH PSEUDO-OPS
All these pseudo-ops, and more, are supported on ELF:
.br
.TP 3
\&.text
Denotes a code segment.
.TP 3
\&.data
Denotes the data segment.
.TP 3
\&.bss
Denotes reserved space.
.TP 3
\&.code32
Generate code for a 32-bit segment (default).
.TP 3
\&.code16
Generate code for a 16-bit segment.
.TP 3
\&.globl \fBsymbol\fR
This defines a global symbol.
For ELF you apparently also need:
.PP
\&.type \fBsymbol\fR, @function
.RS 3
This denotes the ELF symbol type.
You'd better use the \fBENTRY(symbol)\fR macro though.
.RE
.TP 3
\&.byte \&.word \&.long
Define bytes (etc.), akin the \fBdb\fR command in TASM.
.TP 3
\&.ascii "foo"
Define a string, also the same as the \fBdb\fR command.
.TP 3
\&.asciz "foo"
Define a zero-terminated string.
There needs not be extra \fB\&.byte 0x0A\fR commands for
control characters; rather use C escapes like this:
.DT
.nf
\&.data
foo:	\&.asciz  "Hello, World!\en"
\&.text
bar:	mov     eax,offset foo
	push    eax
	call    printf
	pop     eax
	ret
.fi
.SH OPERATIONS
This example also shows the basic command usage.
Some commands are different from both Intel common
and the gas intel_mode texinfo documentation.
.TP 3
lret
Used exactly as the \fBretf\fR command.
.TP 3
mov byte ptr [bx],0x80
The \fBbyte ptr\fR is a must.
.TP 3
jmp 0xF000,0xFFF0
This is the way long jumps (\fBjmp far\fR) are defined.
The manual states one has to use \fBjmpl\fR or \fBljmp\fR.
.TP 3
\&. = 0x40 + _start
The \fBorg\fR directive refined.
Better than in NASM.
It also is a good way to check code size boundaries.
.TP 3
rep movsd
Just write them one after the other.
.TP 3
fs mov eax,[0]
This is a segment prefix usage.
Note, here is no dword ptr needed.
.SH CONCLUSION
It's not difficult to write intel code in GNU as,
once you have learned about the differences.
In fact, it is even more consistent than for example
NASM, which insists on calling pushf pushfw, and
issues a pushfd when writing pushf in 32-bit mode.
.SH ACKNOWLEDGEMENTS
Copyright (c) 2004 Thorsten Glaser. All rights reserved.
.br
Credits go to Intel, AMD, Microsoft, Borland, the NASM
and YASM projects and the Free Software Foundation.
.SH BUGS
Probably some typos and omissions.
Also, my nroff isn't the best.
.br
Suggestions to <miros-discuss@66h.42h.de> please.
