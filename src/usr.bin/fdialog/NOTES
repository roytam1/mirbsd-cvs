- prog is set to read from stdin for commands, but then it can't
  talk to the user.
	x (done - standard) Read commands from the command line instead
	- (disabled for now) Read commands from file descriptor 5 instead (and rely on shell for redirection)

- we may have to do both, at times, its not quite clear yet.  The original dialog
  interface appears to take its commands from argv, and sometimes its primary text
  as well.  This seems like a silly way, but perhaps a benefit will become evident.

- why does the sample/gauge1 fail to parse properly?
	x (solved) the shell was removing the quotes and passing the resultant set of
	  words as one argv.  So argv[2] would be 'this is my string' w/o
	  the quotes.  A workaround is to say "\"this is my string\"" though
	  the Right Thing would be to have the lexer return entire strings at a time
	  (spaces and all) when taking input from argv.

- perhaps it would suffice to reopen (or clearerr()) stdin, and continue using that.
	- though, when we're called, stdin is not associated with the terminal.  If
	  we could reattach it to the controlling terminal, I think that would have the
	  desired effect.  That may be more trouble than its worth, and the above scheme
	  may be simplest.
	x (done) by reading from file descriptor 5, we can take the command file and still
	  talk to the user via the standard interface of curses (curse at the user?)

- make fdl_yyinput check what the input mode is before actually doing any work, in
	order to support the dual mode of getting our commands
	- this is more complicated than it initially appeared, since I'll need to
	  write my own version of input() in addition to fdl_yyinput
	x (done) solved by replacing this with yy_scan_string / yywrap for argv input

Widgets to do:
	- inputmenu
	- calendar
	- menubox (though it is a sort of radio dialog)
	- password
	- textbox
	- timebox
	- tailbox
	- tailboxbg

x (done) fdl_break_multi can be converted to CDKsplitString
- CDKallocString can probably also be used in some places
	- CDKcountStrings & CDKfreeStrings can also be used

- (CDK) need to convert some strcpy to strlcpy, to ensure null termination, else 
	some strlen()'s will fail (and do, as in concatenate)
