.\" $MirOS: src/lib/libc/time/mirtime.3,v 1.1 2011/11/20 04:57:12 tg Exp $
.\"-
.\" Copyright (c) 2004, 2005, 2007, 2011, 2018
.\"	mirabilos <m@mirbsd.org>
.\"
.\" Provided that these terms and disclaimer and all copyright notices
.\" are retained or reproduced in an accompanying document, permission
.\" is granted to deal in this work without restriction, including un-
.\" limited rights to use, publicly perform, distribute, sell, modify,
.\" merge, give away, or sublicence.
.\"
.\" This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
.\" the utmost extent permitted by applicable law, neither express nor
.\" implied; without malicious intent or gross negligence. In no event
.\" may a licensor, author or contributor be held liable for indirect,
.\" direct, other damage, loss, or other issues arising in any way out
.\" of dealing in the work, even if advised of the possibility of such
.\" damage or existence of a defect, except proven that it results out
.\" of said person's immediate fault when using the work as intended.
.\"-
.Dd $Mdocdate: November 20 2011 $
.ie \n(.g \{\
.	ds aq \(aq
.\}
.el \{\
.	ds aq '
.\}
.Dt MIRDATE 3
.Os
.Sh NAME
.Nm mirtime_getleaps ,
.Nm mirtime_isleap ,
.Nm timet2posix ,
.Nm posix2timet ,
.Nm timet2mjd ,
.Nm mjd2timet ,
.Nm timet2tm ,
.Nm tm2timet ,
.Nm mjd_explode ,
.Nm mjd_implode
.Nd MirBSD time API
.Sh SYNOPSIS
.Ft "const time_t *"
.Fn mirtime_getleaps "void"
.Ft "int"
.Fn mirtime_isleap "time_t t"
.Ft "time_t"
.Fn timet2posix "time_t t"
.Ft "time_t"
.Fn posix2timet "time_t t"
.Ft "mirtime_mjd *"
.Fn timet2mjd "mirtime_mjd *mjd" "time_t t"
.Ft "time_t"
.Fn mjd2timet "mirtime_mjd *mjd"
.Ft "struct tm *"
.Fn timet2tm "struct tm *dst" "time_t src"
.Ft "time_t"
.Fn tm2timet "struct tm *src"
.Ft "struct tm *"
.Fn mjd_explode "struct tm *tm" "mirtime_mjd *mjd"
.Ft "mirtime_mjd *"
.Fn mjd_implode "mirtime_mjd *mjd" "struct tm *tm"
.Sh DESCRIPTION
The
.Fn mirtime_getleaps
function returns a pointer, which is guaranteed to be not
.Dv NULL ,
to a read-only array of
.Vt time_t
values that are leap seconds, terminated by a value of 0.
This function uses a table which should be initialised with
.Fn tzset
beforehand if mechanisms such as
.Xr chroot 2
are employed.
.Pp
The
.Fn mirtime_isleap
function returns 1 if
.Fa t
is known to be a (positive) leap second, 0 otherwise.
.Pp
The remaining functions mentioned convert time values between
a broken-down calendar date
.Vt struct tm ,
a Modified Julian Date
.Vt mirtime_mjd ,
seconds since the First of January, 1970, midnight UTC
.Vt time_t ,
and POSIX time (seconds since the epoch, 86400 seconds per day),
also stored in
.Vt time_t .
.Pp
.Fn mjd_implode
and
.Fn tm2timet
parse the fields
.Ic tm_sec , tm_min , tm_hour , tm_mday ,
.Ic tm_mon , tm_year , tm_gmtoff
of
.Vt struct tm ;
.Fn mjd_explode
and
.Fn timet2tm
fill in the fields
.Ic tm_sec , tm_min , tm_hour , tm_mday ,
.Ic tm_mon , tm_year , tm_wday , tm_yday
with sensible values and
.Ic tm_isdst , tm_gmtoff , tm_zone
with null values.
.Pp
To use these functions, macros and types, include at least one of
.Pa \*(Ltsys/time.h\*(Gt
and/or
.Pa \*(Lttime.h\*(Gt
and check whether the macro
.Dv SYSKERN_MIRTIME_H
is defined
.Pq currently to the value 1 .
.Sh TYPES
.Vt time_t
is a signed integral type of 32 or 64 bit, machine-dependent.
.Pp
.Vt struct tm
consists of the following slots:
.Bd -literal -offset indent
int tm_sec;		/* seconds [0\-60] */
int tm_min;		/* minutes [0\-59] */
int tm_hour;		/* hours [0\-23] */
int tm_mday;		/* day of month [1\-31] */
int tm_mon;		/* month of year \- 1 [0\-11] */
time_t tm_year;		/* years since 1900 */
int tm_wday;		/* day of week (0 = sunday) */
int tm_yday;		/* day of year [0\-365] */
int tm_isdst;		/* summer time? [0 no, \*(Gt0 yes, \*(Lt0 unknown] */
long tm_gmtoff;		/* offset from UTC in seconds */
char *tm_zone;		/* abbreviation of timezone name */
.Ed
.Pp
.Vt mirtime_mjd
consists of the following slots:
.Bd -literal -offset indent
time_t mjd;		/* Julian Date minus 2\*(aq400\*(aq000.5, floor'd */
int32_t sec;		/* UTC (not TT) seconds into that [0\-86400] */
.Ed
.Sh SEE ALSO
.Xr chroot 2 ,
.Xr mktime 3 ,
.Xr tzset 3
.Sh STANDARDS
This set of functions expects your operating system to not conform to
.St -p1003.1
for correct
.Vt time_t
handling.
.Sh HISTORY
This API replaced a DJB-inspired TAI API with
.Mx 11 .
.Sh AUTHORS
.An Thorsten Do mirabilos Dc Glaser Aq tg@mirbsd.org
.Sh BUGS
The leap second table is read from the timezone information file.
This has implications on the location of the file and its up-to-dateness.
.Pp
There is no method to select POSIX-conformant behaviour.
It's probably better this way, though.
.Pp
Few sanitising of values is done, but the functions are considered safe.
