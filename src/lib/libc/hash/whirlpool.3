.\" $MirOS: src/lib/libc/hash/whirlpool.3,v 1.3 2009/11/22 16:05:51 tg Exp $
.\"-
.\" Copyright (c) 2007, 2009
.\"	Thorsten Glaser <tg@mirbsd.org>
.\"
.\" Provided that these terms and disclaimer and all copyright notices
.\" are retained or reproduced in an accompanying document, permission
.\" is granted to deal in this work without restriction, including un-
.\" limited rights to use, publicly perform, distribute, sell, modify,
.\" merge, give away, or sublicence.
.\"
.\" This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
.\" the utmost extent permitted by applicable law, neither express nor
.\" implied; without malicious intent or gross negligence. In no event
.\" may a licensor, author or contributor be held liable for indirect,
.\" direct, other damage, loss, or other issues arising in any way out
.\" of dealing in the work, even if advised of the possibility of such
.\" damage or existence of a defect, except proven that it results out
.\" of said person's immediate fault when using the work as intended.
.\"-
.\" Try to make GNU groff and AT&T nroff more compatible
.\" * ` generates ‘ in gnroff, so use \`
.\" * ' generates ’ in gnroff, \' generates ´, so use \*(aq
.\" * - generates ‐ in gnroff, \- generates −, so .tr it to -
.\"   thus use - for hyphens and \- for minus signs and option dashes
.\" * ~ is size-reduced and placed atop in groff, so use \*(TI
.\" * ^ is size-reduced and placed atop in groff, so use \*(ha
.\" * \(en does not work in nroff, so use \*(en
.\" The section after the "doc" macropackage has been loaded contains
.\" additional code to convene between the UCB mdoc macropackage (and
.\" its variant as BSD mdoc in groff) and the GNU mdoc macropackage.
.\"
.ie \n(.g \{\
.	if \*[.T]ascii .tr \-\N'45'
.	if \*[.T]latin1 .tr \-\N'45'
.	if \*[.T]utf8 .tr \-\N'45'
.	ds <= \[<=]
.	ds >= \[>=]
.	ds Rq \[rq]
.	ds Lq \[lq]
.	ds sL \(aq
.	ds sR \(aq
.	if \*[.T]utf8 .ds sL `
.	if \*[.T]ps .ds sL `
.	if \*[.T]utf8 .ds sR '
.	if \*[.T]ps .ds sR '
.	ds aq \(aq
.	ds TI \(ti
.	ds ha \(ha
.	ds en \(en
.\}
.el \{\
.	ds aq '
.	ds TI ~
.	ds ha ^
.	ds en \(em
.\}
.\"
.\" Implement .Dd with the Mdocdate RCS keyword
.\"
.rn Dd xD
.de Dd
.ie \\$1$Mdocdate: \{\
.	xD \\$2 \\$3, \\$4
.\}
.el .xD \\$1 \\$2 \\$3 \\$4 \\$5 \\$6 \\$7 \\$8
..
.\"
.\" .Dd must come before definition of .Mx, because when called
.\" with -mandoc, it might implement .Mx itself, but we want to
.\" use our own definition. And .Dd must come *first*, always.
.\"
.Dd $Mdocdate: November 22 2009 $
.\"
.\" Check which macro package we use
.\"
.ie \n(.g \{\
.	ie d volume-ds-1 .ds tT gnu
.	el .ds tT bsd
.\}
.el .ds tT ucb
.\"
.\" Implement .Mx (MirBSD)
.\"
.ie "\*(tT"gnu" \{\
.	eo
.	de Mx
.	nr curr-font \n[.f]
.	nr curr-size \n[.ps]
.	ds str-Mx \f[\n[curr-font]]\s[\n[curr-size]u]
.	ds str-Mx1 \*[Tn-font-size]\%MirOS\*[str-Mx]
.	if !\n[arg-limit] \
.	if \n[.$] \{\
.	ds macro-name Mx
.	parse-args \$@
.	\}
.	if (\n[arg-limit] > \n[arg-ptr]) \{\
.	nr arg-ptr +1
.	ie (\n[type\n[arg-ptr]] == 2) \
.	as str-Mx1 \~\*[arg\n[arg-ptr]]
.	el \
.	nr arg-ptr -1
.	\}
.	ds arg\n[arg-ptr] "\*[str-Mx1]
.	nr type\n[arg-ptr] 2
.	ds space\n[arg-ptr] "\*[space]
.	nr num-args (\n[arg-limit] - \n[arg-ptr])
.	nr arg-limit \n[arg-ptr]
.	if \n[num-args] \
.	parse-space-vector
.	print-recursive
..
.	ec
.	ds sP \s0
.	ds tN \*[Tn-font-size]
.\}
.el \{\
.	de Mx
.	nr cF \\n(.f
.	nr cZ \\n(.s
.	ds aa \&\f\\n(cF\s\\n(cZ
.	if \\n(aC==0 \{\
.		ie \\n(.$==0 \&MirOS\\*(aa
.		el .aV \\$1 \\$2 \\$3 \\$4 \\$5 \\$6 \\$7 \\$8 \\$9
.	\}
.	if \\n(aC>\\n(aP \{\
.		nr aP \\n(aP+1
.		ie \\n(C\\n(aP==2 \{\
.			as b1 \&MirOS\ #\&\\*(A\\n(aP\\*(aa
.			ie \\n(aC>\\n(aP \{\
.				nr aP \\n(aP+1
.				nR
.			\}
.			el .aZ
.		\}
.		el \{\
.			as b1 \&MirOS\\*(aa
.			nR
.		\}
.	\}
..
.\}
.\"-
.Dt WHIRLPOOL 3
.Os
.Sh NAME
.Nm WHIRLPOOLInit ,
.Nm WHIRLPOOLUpdate ,
.Nm WHIRLPOOLPad ,
.Nm WHIRLPOOLFinal ,
.Nm WHIRLPOOLEnd ,
.Nm WHIRLPOOLFile ,
.Nm WHIRLPOOLFileChunk ,
.Nm WHIRLPOOLData
.Nd calculate the "WHIRLPOOL" message digest
.Sh SYNOPSIS
.Fd #include <sys/types.h>
.Fd #include <whirlpool.h>
.Ft void
.Fn WHIRLPOOLInit "WHIRLPOOL_CTX *ctx"
.Ft void
.Fn WHIRLPOOLUpdate "WHIRLPOOL_CTX *ctx" "const uint8_t *data" "size_t noctets"
.Ft void
.Fn WHIRLPOOLPad "WHIRLPOOL_CTX *ctx"
.Ft void
.Fn WHIRLPOOLFinal "uint8_t digest[WHIRLPOOL_DIGEST_LENGTH]" "WHIRLPOOL_CTX *ctx"
.Ft "char *"
.Fn WHIRLPOOLEnd "WHIRLPOOL_CTX *ctx" "char *digest"
.Ft "char *"
.Fn WHIRLPOOLFile "const char *filename" "char *digest"
.Ft "char *"
.Fn WHIRLPOOLFileChunk "const char *filename" "char *digest" "off_t offset" "off_t length"
.Ft "char *"
.Fn WHIRLPOOLData "const uint8_t *data" "size_t len" "char *digest"
.Sh DESCRIPTION
The WHIRLPOOL functions implement the 512-bit WHIRLPOOL message digest hash algorithm.
.Pp
The WHIRLPOOL functions are of a different family than the
.Xr md4 3 ,
.Xr md5 3 ,
.Xr rmd160 3 ,
.Xr sha1 3 ,
and
.Xr sha2 3
functions,
as well of a different family from the
.Xr tiger 3
functions and, despite not having been cryptanalysed that much,
are considered pretty secure.
All share a similar interface, though.
.Pp
The
.Fn WHIRLPOOLInit
function initialises a WHIRLPOOL_CTX context for use with
.Fn WHIRLPOOLUpdate
and
.Fn WHIRLPOOLFinal .
The
.Fn WHIRLPOOLUpdate
function adds (condenses)
.Ar data
of length
.Ar noctets
to the context.
.Fn WHIRLPOOLFinal
is called after processing and stores a message digest in the
.Ar digest
parameter.
.Pp
For a description of the other functions, please refer e\.g\. the
.Xr rmd160 3
manual page.
.Sh EXAMPLES
The follow code fragment will calculate the digest for
the string
.Dq abc ,
which is
.Dq 4e2448a4c6f486bb16b6562c73b4020bf3043e3a731bce721ae1b303d97e6d4c\e 7181eebdb6c57e277d0e34957114cbd6c797fc9d95d8b582d225292076d4eef5 .
.Bd -literal -offset indent
WHIRLPOOL_CTX context;
uint8_t result[WHIRLPOOL_DIGEST_LENGTH];
const char buf[] = "abc";
size_t n = strlen(buf);

WHIRLPOOLInit(&context);
WHIRLPOOLUpdate(&context, buf, n);
WHIRLPOOLFinal(result, &context);

/* print the digest as one long sedecimal value */
printf("0x");
for (n = 0; n \*(Lt WHIRLPOOL_DIGEST_LENGTH; n++)
	printf("%02x", result[n]);
putchar(\*(aq\en\*(aq);
.Ed
.Pp
Alternately, the helper functions could be used in the following way:
.Bd -literal -offset indent
WHIRLPOOL_CTX context;
uint8_t output[WHIRLPOOL_DIGEST_STRING_LENGTH];
const char buf[] = "abc";

printf("0x%s\en", WHIRLPOOLData(buf, strlen(buf), output));
.Ed
.Sh SEE ALSO
.Xr cksum 1 ,
.Xr adler32 3 ,
.Xr md4 3 ,
.Xr md5 3 ,
.Xr rmd160 3 ,
.Xr sfv 3 ,
.Xr sha1 3 ,
.Xr sha2 3 ,
.Xr suma 3 ,
.Xr tiger 3 ,
.Pp
.Pa http://planeta.terra.com.br/informatica/paulobarreto/WhirlpoolPage.html
.Sh HISTORY
The WHIRLPOOL functions appeared in
.Mx 10 .
.Sh AUTHORS
The reference implementation of WHIRLPOOL was written by
.An Paulo S. L. M. Barreto Aq pbarreto@scopus.com.br
and
.An Vincent Rijmen Aq vincent.rijmen@cryptomathic.com
and was dedicated into public domain.
It has been tweaked for inclusion into
.Mx
by
.An Thorsten Glaser Aq tg@mirbsd.de
modelled after the TIGER implementation already in libc.
.Pp
The
.Fn WHIRLPOOLEnd ,
.Fn WHIRLPOOLFile ,
.Fn WHIRLPOOLFileChunk ,
and
.Fn WHIRLPOOLData
helper functions are derived from code written by Poul-Henning Kamp.
