.\" $MirOS: src/lib/libc/hash/tiger.3,v 1.1 2006/09/17 19:28:58 tg Exp $
.\"-
.\" Copyright (c) 2006
.\"	Thorsten Glaser <tg@mirbsd.de>
.\"
.\" Licensee is hereby permitted to deal in this work without restric-
.\" tion, including unlimited rights to use, publicly perform, modify,
.\" merge, distribute, sell, give away or sublicence, provided all co-
.\" pyright notices above, these terms and the disclaimer are retained
.\" in all redistributions or reproduced in accompanying documentation
.\" or other materials provided with binary redistributions.
.\"
.\" Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
.\" express, or implied, to the maximum extent permitted by applicable
.\" law, without malicious intent or gross negligence; in no event may
.\" licensor, an author or contributor be held liable for any indirect
.\" or other damage, or direct damage except proven a consequence of a
.\" direct error of said person and intended use of this work, loss or
.\" other issues arising in any way out of its use, even if advised of
.\" the possibility of such damage or existence of a defect.
.\"-
.Dd September 24, 2006
.Dt TIGER 3
.Os
.Sh NAME
.Nm TIGERInit ,
.Nm TIGERUpdate ,
.Nm TIGERPad ,
.Nm TIGERFinal ,
.Nm TIGERTransform ,
.Nm TIGEREnd ,
.Nm TIGERFile ,
.Nm TIGERFileChunk ,
.Nm TIGERData
.Nd calculate the "TIGER" message digest
.Sh SYNOPSIS
.Fd #include <sys/types.h>
.Fd #include <tiger.h>
.Ft void
.Fn TIGERInit "TIGER_CTX *ctx"
.Ft void
.Fn TIGERUpdate "TIGER_CTX *ctx" "const uint8_t *data" "size_t noctets"
.Ft void
.Fn TIGERPad "TIGER_CTX *ctx"
.Ft void
.Fn TIGERFinal "uint8_t digest[TIGER_DIGEST_LENGTH]" "TIGER_CTX *ctx"
.Ft void
.Fn TIGERTransform "uint64_t state[3]" "const uint8_t block[TIGER_BLOCK_LENGTH]"
.Ft "char *"
.Fn TIGEREnd "TIGER_CTX *ctx" "char *digest"
.Ft "char *"
.Fn TIGERFile "const char *filename" "char *digest"
.Ft "char *"
.Fn TIGERFileChunk "const char *filename" "char *digest" "off_t offset" "off_t length"
.Ft "char *"
.Fn TIGERData "const uint8_t *data" "size_t len" "char *digest"
.Sh DESCRIPTION
The TIGER functions implement the 192-bit TIGER message digest hash algorithm.
.Pp
The TIGER functions are of a different family than the
.Xr md4 3 ,
.Xr md5 3 ,
.Xr rmd160 3 ,
.Xr sha1 3 ,
and
.Xr sha2 3
functions and, despite not having been cryptanalysed that much,
are considered pretty secure.
All share a similar interface, though.
.Pp
The
.Fn TIGERInit
function initialises a TIGER_CTX context for use with
.Fn TIGERUpdate
and
.Fn TIGERFinal .
The
.Fn TIGERUpdate
function adds (condenses)
.Ar data
of length
.Ar noctets
to the context.
.Fn TIGERFinal
is called after processing and stores a message digest in the
.Ar digest
parameter.
.Pp
For a description of the other functions, please refer e\.g\. the
.Xr rmd160 3
manual page.
.Sh EXAMPLES
The follow code fragment will calculate the digest for
the string
.Dq abc ,
which is
.Dq 2aab1484e8c158f2bfb8c5ff41b57a525129131c957b5f93 .
.Bd -literal -offset indent
TIGER_CTX context;
uint8_t result[TIGER_DIGEST_LENGTH];
const char buf[] = "abc";
size_t n = strlen(buf);

TIGERInit(&context);
TIGERUpdate(&context, buf, n);
TIGERFinal(result, &context);

/* print the digest as one long sedecimal value */
printf("0x");
for (n = 0; n < TIGER_DIGEST_LENGTH; n++)
	printf("%02x", result[n]);
putchar('\en');
.Ed
.Pp
Alternately, the helper functions could be used in the following way:
.Bd -literal -offset indent
TIGER_CTX context;
uint8_t output[TIGER_DIGEST_STRING_LENGTH];
const char buf[] = "abc";

printf("0x%s\en", TIGERData(buf, strlen(buf), output));
.Ed
.Sh SEE ALSO
.Xr cksum 1 ,
.Xr md4 3 ,
.Xr md5 3 ,
.Xr rmd160 3 ,
.Xr sha1 3 ,
.Xr sha2 3
.Pp
.Pa http://www.cs.technion.ac.il/~biham/Reports/Tiger/
.Sh HISTORY
The TIGER functions appeared in
.Mx 10 .
.Sh AUTHORS
This implementation of TIGER was written by
.An Thorsten Glaser Aq tg@mirbsd.de
modelled after the RIPEMD\-160 implementation already in libc
and the TIGER reference implementation.
.Pp
The
.Fn TIGEREnd ,
.Fn TIGERFile ,
.Fn TIGERFileChunk ,
and
.Fn TIGERData
helper functions are derived from code written by Poul-Henning Kamp.
