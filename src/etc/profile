# $MirOS: src/etc/profile,v 1.13 2006/01/03 02:15:24 tg Exp $

umask 022
[ -z "$KSH_VERSION" ] && alias print='echo -e'
[ -s "$HOME/.profile.preinit" ] && . $HOME/.profile.preinit

[ -z "$TERM" -o x"$TERM" = x"unknown" ] && if [ -x /usr/bin/tset ]; then
	x=$(ulimit -c 0; /usr/bin/tset -sQ \?vt220)
	TERM=vt100
	eval $x
else
	TERM=vt220
fi
case "${TERM}:$COLORTERM" in
*:NO|ansi-nt*|vt*)
	unset COLORTERM
	;;
interix:*|screen:*|wsvt*|xterm*)
	COLORTERM=1; export COLORTERM
	;;
esac

[ -z "$HOME" ] && HOME=/root
PS1='$PWD $ '
PSX='# '
USER_ID=
[ -x /usr/bin/id ] && USER_ID=$(ulimit -c 0; /usr/bin/id -u 2>/dev/null)
[ -z "$USER_ID" ] && USER_ID=0
if [ -z "$USER" ]; then
	PATH=/sbin:/bin:/usr/sbin:/usr/bin:/root/.etc/bin:/usr/local/bin:/usr/mpkg/bin
	PS1='SINGLE:$PWD # '
	unset COLORTERM
elif [ $USER_ID -eq 0 ]; then
	PATH=/root/.etc/bin:/usr/sbin:/sbin:/usr/bin:/bin:/usr/X11R6/bin:/usr/local/bin:/usr/mpkg/bin
else
	PATH=~/.etc/bin:/usr/local/bin:/usr/mpkg/bin:/usr/bin:/bin:/usr/X11R6/bin:/usr/sbin:/sbin:/usr/mpkg/sbin:/usr/games
	PSX='$ '
fi
export PATH
BROWSER=/usr/bin/lynx
CVSUMASK=002
EDITOR=/bin/ed
unset HISTFILE
HOSTNAME=$(ulimit -c 0; hostname -s 2>/dev/null)
HOSTNAME=${HOSTNAME:-noFQDN}
IRCNAME="MirOS packages a kernel, userland and the attitude"
IRCSERVER=irc4.66h.42h.de	# irc.66h.42h.de supports IPv4 and IPv6 though
OSNAME=$(ulimit -c 0; uname -s 2>/dev/null)
OSNAME=${OSNAME:-unknown}
PAGER=/usr/bin/less
PS1=$PSX
if [ -n "$KSH_VERSION" ]; then
	__shortpath() {
		pwd	# Dummy, see below, but enough to work
	}
	[[ -n $USER ]] && \
	    PS1="\${USER}@$HOSTNAME:\$(__shortpath 2>/dev/null||echo \$PWD) $PSX"
	_shellok=1
elif [ -n "$BASH_VERSION" ]; then
	set -o emacs
	shopt -s extglob
	[[ $TERM = screen ]] && \
		X_COLOUR=$X_COLOUR'[5;34;40m\]screen:\[[0m'
	if [[ $OSTYPE = linux-gnu || $OSTYPE = Linux ]]; then
		# compat_linux(8)
		PS1='\['$X_COLOUR'[1;31m\]Linux!\[[0m\]\u@\h:\w \$ '
		alias ls='/bin/ls --color'
	else
		# native via ports
		PS1='\['$X_COLOUR'[34m\]bash!\[[0m\]\u@\h:\w \$ '
	fi
	[[ -n $NOCOLOURPROMPT || -z $COLORTERM ]] && PS1='bash:\u@\h:\w \$ '
	_shellok=1
fi
export BROWSER CVSUMASK EDITOR HOME HOSTNAME IRCNAME IRCSERVER OSNAME
export PAGER PS1 TERM USER_ID
unset NOCOLOURPROMPT PSX x
alias cls='print -n \\033c'
alias la='ls -Fa'
test $USER_ID -eq 0 && alias l=la || alias l='ls -F'
alias ll='l -l'
alias lo='ll -o'
test x"$_shellok" = x"1" || return
unset _shellok
[[ -x /emul/linux/bin/bash ]] && alias lx='/emul/linux/bin/bash --login'
[[ -n $KSH_VERSION ]] && function __shortpath {
	typeset dots= path=${1:-${PWD:-$(pwd)}}
	let cmax="${COLUMNS:-80} / 3"
	(( cmax < 7 )) && let cmax=7
	while (( (${#dots} + ${#path}) > cmax )); do
		if [[ $path = *@(/)* ]]; then
			dots=.../
			path="${path#*/}"
		else
			dots=...
			path="${path#?????}"
		fi
	done
	print -nr -- "$dots$path"
}
function bye
{
	[[ $1 = k ]] && ssh-agent -k
	typeset M='\033c'
	[ $? -ne 0 ] && M='\033c Warning: ssh-agent returned error!\n'
	print -n -- "$M"
	exit
	logout
}
function ggs		# Google Search
{
	${BROWSER:-lynx} "http://www.google.com/search?hl=la&num=100&safe=off&q=$*"
}
function ggr		# Google GRoups
{
	${BROWSER:-lynx} "http://groups.google.com/groups?hl=la&num=100&safe=off&as_umsgid=$*"
}
function ge		# German English
{
	${BROWSER:-lynx} "http://dict.leo.org/?search=$*"
}
function ulynx		# uxterm lynx (UTF-8)
{
	lynx -display_charset utf8 "$@"
}
function klynx		# kterm lynx (EUC-JP)
{
	( sleep 1; cls; print -n 'Press Ctrl-L!' ) 2>/dev/null &
	lynx -display_charset euc-jp "$@"
}
function Lstripcom	# strip comments from file
{
	typeset _line
	set -o noglob
	cat "$@" | while read _line; do
		_line=${_line%%#*}
		[[ -n $_line ]] && print -r -- $_line
	done
	set +o noglob
}
function Lretrocfg	# retrieve kernel config file
{
	$SUDO cat ${1:-/bsd} | strings -n4 | sed -n 's/^=CF=//p'
}

if [ -O /tmp/.ssh-agent/$USER_ID ]; then
	# If the agent is not running, remove stale files
	[[ ! -e /tmp/.ssh-agent/$USER_ID/socket ]] \
	    && rm -f /tmp/.ssh-agent/$USER_ID/{agent,keyread} \
	    ~/.etc/ssh/.{ctl,pid}.*
	# Start ssh-agent if it is not already started
	if [[ ! -e /tmp/.ssh-agent/$USER_ID/agent ]]; then
		ssh-agent -s -a /tmp/.ssh-agent/$USER_ID/socket \
		    >/tmp/.ssh-agent/$USER_ID/agent
	fi
	# Do the following only if ssh-agent is running
	if [[ -e /tmp/.ssh-agent/$USER_ID/socket ]]; then
		# Read configuration file if it exists
		[[ -e /tmp/.ssh-agent/$USER_ID/agent ]] \
		    && . /tmp/.ssh-agent/$USER_ID/agent >&2
		# Read in the keys, if not already done
		if [[ ! -e /tmp/.ssh-agent/$USER_ID/keyread ]]; then
			ssh-add
			touch /tmp/.ssh-agent/$USER_ID/keyread
		fi
	fi
fi
