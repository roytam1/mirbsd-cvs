#!/bin/ksh
# $MirOS: src/share/misc/licence.template,v 1.2 2005/03/03 19:43:30 tg Rel $
#-
# Copyright (c) 2003, 2004, 2005
#	Thorsten "mirabile" Glaser <tg@66h.42h.de>
#
# Licensee is hereby permitted to deal in this work without restric-
# tion, including unlimited rights to use, publicly perform, modify,
# merge, distribute, sell, give away or sublicence, provided all co-
# pyright notices above, these terms and the disclaimer are retained
# in all redistributions or reproduced in accompanying documentation
# or other materials provided with binary redistributions.
#
# Licensor hereby provides this work "AS IS" and WITHOUT WARRANTY of
# any kind, expressed or implied, to the maximum extent permitted by
# applicable law, but with the warranty of being written without ma-
# licious intent or gross negligence; in no event shall licensor, an
# author or contributor be held liable for any damage, direct, indi-
# rect or other, however caused, arising in any way out of the usage
# of this work, even if advised of the possibility of such damage.
#-
# Kernel version generation script
# Called with: MirBSD major minor level openbsdlevel
#
# List of files to check for version number bumps:
#	sys/sys/param.h, share/mk/sys.mk
#	share/tmac/mdoc/doc-{common,syms}
#	share/tmac/tmac.an.old

# MirBSD version cycle calculation
typeset -i    "_osrmj=${1:-9}"	# Major MirBSD revision number fallback
typeset -ui16 "_osrmn=${2:-0}"	# only update the above once per release!
typeset -i    "_osrmx=1+${3:-0}"
if (( _osrmn < 0 || _osrmn > 255 || _osrmj < 7 )); then
	print "Error: versioning information damaged!" >&2
	exit 1
fi
if ((_osrmn < 16)); then
	_osrtc="?"	# <unknown/damaged>
  elif ((_osrmn < 128)); then
	_osrtc="n"	# nearly
  elif ((_osrmn == 128)); then
	_osrtc="r"	# released
  elif ((_osrmn < 160)); then
	_osrtc="s"	# stable
  else
	_osrtc="u"	# unlocked
fi
if ((_osrmx < 2)); then
	_osrex=""	# regular release/snapshot/local build (-semel)
  else			# released for the second, third... time
	[[ $_osrtc = s ]] || _osrtc="r"
	case $_osrmx in
		100)	_osrex=-stable		;;
		2)	_osrex=bis		;;
		3)	_osrex=ter		;;
		4)	_osrex=quater		;;
		5)	_osrex=quinquies	;;
		*)	_osrex=num.${_osrmx}ies	;;
	esac
fi
onmj="${_osrmn#16#}$_osrex"
osl="${_osrmj}${_osrtc}${onmj}"

# Everything else
[[ -s version ]] || print 0 >version
touch version
let "wv=$(<version)"

osc="${4:-0.0}"
ost="$(uname)"
tm="$(date)"
wd="$(pwd)"
wh="$(hostname)"
wk="$(basename "$wd")"
wt="$(TZ=right/UTC date '+%Y%m%d')"
wu="${USER:-root}"
myname="$(cd $(dirname "$0"); print -r "$(pwd)/$(basename "$0")")"

cat >vers.c <<EOF
/* Automatically generated by $myname - Do not edit. */

#ifdef	INCLUDE_CONFIG_FILE
#include "config_file.h"
#endif

const char ostype[]="$ost";
const char osrelease[]="$_osrmj";
const char ospatchlevel[]="#${osl}-$wt";
const char osversion[]="${wk}#$wv";
const char sccs[]=
    "	@(#)$ost $_osrmj rev.${onmj} from OpenBSD ${osc} ($wk) #${wv}: ${tm}\n"
    "	generated by @(#)\$MirOS$\n";
const char version[]=
    "${ost}#$osl ${osc}-$wt ($wk) #${wv}: ${tm}\n\t${wu}@${wh}:${wd}\n";
EOF

print $((wv + 1)) >version
