.\" $MirOS: src/sys/arch/i386/stand/boot/boot.8,v 1.16 2009/01/20 21:11:27 tg Exp $
.\"-
.\" Copyright (c) 2009
.\"	Thorsten Glaser <tg@mirbsd.org>
.\"
.\" Provided that these terms and disclaimer and all copyright notices
.\" are retained or reproduced in an accompanying document, permission
.\" is granted to deal in this work without restriction, including un-
.\" limited rights to use, publicly perform, distribute, sell, modify,
.\" merge, give away, or sublicence.
.\"
.\" This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
.\" the utmost extent permitted by applicable law, neither express nor
.\" implied; without malicious intent or gross negligence. In no event
.\" may a licensor, author or contributor be held liable for indirect,
.\" direct, other damage, loss, or other issues arising in any way out
.\" of dealing in the work, even if advised of the possibility of such
.\" damage or existence of a defect, except proven that it results out
.\" of said person's immediate fault when using the work as intended.
.\"-
.Dd $Mdocdate: January 20 2009 $
.Dt BOOT 8 i386
.Os
.Sh NAME
.Nm boot ,
.Nm boot.cfg ,
.Nm ldbsd.com ,
.Nm pxeboot
.Nd
i386 second-stage boot loader
.Sh DESCRIPTION
The
.Nm
system programme, often called
.Nm ldbsd.com ,
aims to load the system kernel into core memory from disc or network
and run it, as well as do some auxiliary functions, while dealing
with the problems arising from the history of the i386 architecture
since 1978, incompatibilities, extensions, bugs, El Torito booting,
Intel's Preboot Execution Environment (PXE) for network boot, etc.
.Mx
floppies use a specially limited version optimised for size, lacking
support for any filesystem other than 4.2FFS and most commands.
.Pp
It can be loaded either directly from the BIOS (most commonly via
PXE; earlier versions could also be loaded using El Torito), the
.Nm bootxx
first stage boot loader (from floppy, hard disc, compact flash card,
USB stick, and the likes; recently, since
.Nm bootxx
itself was made El Torito capable, this has become the desired method
for El Torito boot), any bootloader compliant with the Multiboot
specification (as
.Nm
is a Multiboot compliant OS Kernel image), or after renaming to
.Nm ldbsd.com
by any bootloader implementing the COMBOOT API (specified by SYSLINUX,
EXTLINUX, ISOLINUX, PXELINUX) or MS-DOS\(rg (unless DOS occupies the HMA).
Once loaded, it can be used, in a more or less limited fashion, to boot a
.Mx
kernel from a supported filesystem (4.2FFS, ISO 9660, FAT12, FAT16, FAT28,
TFTP, NFS), inspect the filesystems, get or set machine information, or
load other bootloaders (see below for details).
It can inflate
.Xr gzip 1
compressed files, set up serial console, and provides an interactive prompt.
.Pp
Basic operation procedure is as follows:
.Pp
.Bl -enum
.It
Be loaded.
.Pp
.Bl -tag -width Multiboot
.It BIOS
We are loaded to 0x07C00.
The drive used to load us from is passed in the DL register.
The ES:BX and DS:SI registers and the stack contain additional data.
While we do not care about the actual address, we expect to be whole.
.It Nm bootxx
We are loaded at the final address.
The drive used to load us from is passed in a special memory location.
The DS:SI registers are set up if we were loaded from a HDD partition.
The Master Boot Record
.Po Pa /usr/mdec/mbrldr No or Pa /usr/mdec/mbrmgr Pc
takes care to set these up correctly.
.It PXE
The NIC's PXE boot ROM initialises the NIC, network driver, UNDI and
PXE interfaces, contacts a DHCP server by broadcasting an IPv4 request on
the network, gets an IP address and the name of a file to load from the
DHCP server, and downloads the file indicated via TFTP to 0x07C00.
That would be
.Nm boot .
Control is then passed to address 0x07C00 with ES:BX and the stack set up.
.Pp
PXE booting is useful for
.Xr diskless 8
clients or initial download and execution of the installation kernel,
.Pa bsd.rd ,
or for rescue system purposes.
.It DOS
We are loaded to xxxx:0100h with no drive or PXE information set up.
The interrupt vectors are hooked by DOS, so if we overwrite any memory in
use by DOS, we lose.
That would be the case if xxxx is larger than our final address, any hooks
point to an address between our final address and 9000:0000h, the HMA is in
use (because that's where the kernel is loaded to), or somesuch.
This also implies we cannot chain any other bootloader.
Furthermore, we require the machine to be in Real Mode, not in VM86 mode,
so EMM386.SYS, Win32 or similar must not be active.
We ask DOS for the current drive to use this information later.
.It COMBOOT
We are loaded in a similar way as from DOS, except the machine
state is not changed as much from the initial state.
After determining that we are in fact loaded via COMBOOT and not DOS,
we ask SYSLINUX to terminate after gathering information about the boot
drive, partition, or PXE; the UNDI and PXE stacks are kept active if any.
.It Multiboot
We request to be loaded to 0x00100000 (the HMA) due to GNU GRUB's
limitations, save the boot device off the MBI structure, copy ourselves
to the final location, and switch back to Real Mode.
.El
.Pp
During the initial operation, the stack is located about 80 KiB behind
the start of our own memory area, and switched to the final location if
the position in memory is known to be correct early.
.It
System information (boot drive, potential partition table entry,
PXENV+ and !PXE structure pointers) are stored in safe locations.
.It
The code is relocated to the final address once or twice if needed.
The final address is 4000:0000h with the stack beginning at 3000:FFFCh.
The stack is shared between Real Mode and 32-bit Virtual Protected Address Mode.
The code is mostly organised using the small memory model, with everything
within 64 KiB (although the real limit is more than 256 bytes less than that
due to initial loading issues), except some rather large uninitialised areas
and the disc I/O bounce buffer, which begin at 3000:0000 and grow upwards.
The heap begins after the bss section and grows up to just short of 9000:0000h.
.It
If the bootloader is compiled to do so, for example on a Live CD, it displays
a boot menu unless the shift key is pressed, and retains the numeric return
value for later, to replace the cfg suffix of the configuration file with it.
.It
The IDT for the Protected Mode is set up.
.It
The system is switched to Protected Mode.
.It
The hardware is probed:
.Pp
.Bl -bullet -compact
.It
Console devices: the default BIOS console (INT 10h, which may be a
MDA/MGA/Hercules, CGA/EGA or VGA CRT/LCD, plus DIN or PS/2 or emulated
keyboard) as well as up to four serial ports (via the BIOS interface).
.It
Memory: ask the BIOS and probe page by page through the address space,
in case the BIOS reports wrong information.
.It
APM support
.It
PXE support
.El
.It
Unless a control key is held, the files
.Pa /x.x.x.x/boot.cfg
.Pq where x.x.x.x is our own IPv4 address
and
.Pa /boot.cfg
.Pq with cfg possibly replaced from the menu
are read and executed as if the commands had been entered on the loader prompt.
.It
The bootloader prompt
.Pp
.Dl boot> _
.Pp
is issued, and a command line is read.
If no key is pressed within five seconds, the kernels
.Pa /bsd
and
.Pa /bsd.old
are tried, in order, to be booted with the current parameters; if
unsuccessful or any key is pressed, the timeout is disabled (it can
be manipulated from the configuration file or command line).
The system will be unable to boot if no suitable kernel image is found.
.El
.Pp
Commands from the configuration file and the loader prompt are read
line by line and executed as read.
Empty lines and lines beginning with the comment character,
.Sq \&# ,
are ignored when reading from the configuration file.
Just entering an empty line at the loader prompt, however, will do
the default action of booting a kernel with the current parameters.
To pass multiple commands on a line, use the U+0060 character,
.Sq \&\` ,
as delimiter.
To pass multiple commands into a macro definition, use the tilde,
.Sq \*(TI ,
as delimiter.
Leading and trailing whitespace is ignored.
.Sh COMMANDS
The following commands are accepted at the loader prompt:
.Bl -tag -width reboot
.It boot Op Ar image Op Fl acds
Boots the kernel image specified by
.Ar image
with any options given.
If the
.Ar image
file specification, or one of its
.Ar device
or
.Ar filename
parts (see below) is omitted, values from variables will be used.
.Bl -tag -width XaX
.It Fl a
Causes the kernel to ask for the root filesystem to use.
.It Fl c
Causes the kernel to go into
.Xr UKC 8
before performing
.Xr autoconf 4 .
.It Fl d
Causes the kernel to drop into
.Xr ddb 4
at the earliest convenient point.
.It Fl s
Attempts to boot into single-user mode.
.El
.It cat Ar image
Displays the file onto the console.
Output is paginated every 24 lines.
.It echo
Displays the arguments onto the console.
.It env
On i386, this command is not used.
.It help
Prints a list of available commands.
.It ls Op Ar dirspec
Prints the content of the specified directory in long format.
Output is paginated every 24 lines.
.Pp
The cd9660, tftp and nfs filesystems do not support this command.
They will either always fail or always succeed with sane but unusable results.
The FAT12, FAt16 and FAT28 filesystems have hardcoded perms and uid/gid.
.It machine Op Ar command
Issues machine-specific commands:
.Bl -tag -width diskinfo
.It Nm boot Ar dev
Load a bootsector (MBR or PBR) from the indicated device and boot it.
Possible devices are fd0 (floppy boot), hd0 (MBR), hd0a, hd0b, hd0c,
hd0d (PBR), and some more useless combinations.
.It Nm diskinfo
Display a list of probed floppy and hard disc drives including BIOS
and geometry information.
.It Nm exec Ar type image
Load a bootsector or other bootloader from an
.Ar image
file and execute it.
Currently known values for
.Ar type :
.Bl -tag -width sector
.It Cm grub
GNU GRUB 0.9x
.Pa stage2
file
.br
GNU GRUB 0.9x
.Pa stage2_eltorito
file
.br
GNU GRUB2
.Pa core.img
file
.It Cm sector
Boot sector or image, loaded to 0000:7C00h
.br
.Mx
.Nm
second-stage loader
.El
.It Nm label Op Ar device
Displays the idea
.Nm
has about the disklabel of the currently active or the specified
.Ar device .
.It Nm memory Op Ar arg
If used without any arguments, print the current idea
.Nm
has about the memory configuration taken from BIOS or probed.
Arguments having the form of
.Pp
.Dl [+\-]<size>@<address>
.Pp
add (+) or exempt (\-) the specified amount of memory.
Both size and base address can be specified in decimal, octal or
hexadecimal, using standard C prefixes.
.Pp
Memory segments are not required to be adjacent to each other;
the only requirement is that there is real physical memory under
the range added.
The following example adds 32 MiB of memory right after the first 16 MiB:
.Bd -unfilled -offset indent
boot> machine mem +0x2000000@0x01000000
.Ed
.Pp
Another useful command is to withdraw a range of memory from OS usage, which
may have been wrongfully reported as useful by the BIOS.
This example excludes the 15\(en16 MiB range from the map of useful memory:
.Bd -unfilled -offset indent
boot> machine mem \-0x100000@0x00F00000
.Ed
.It regs
Debugging command displaying register dumps.
.It oldbios
Enable or disable the so-called
.Dq Old BIOS / Soekris helper ,
which restricts
.Nm
from loading more than one sector at a time from disc.
.El
.It macro
Displays the names of all currently defined macros.
Up to four can be defined, holding up to 256 characters.
.It macro Ar name Op Ar cmd
Deletes the macro
.Ar name ,
or defines it to
.Ar cmd .
.It reboot
Initiates a warm machine reboot.
.It set Op Ar name Op Ar value
If invoked without arguments, prints a list of variables and their values.
If only a
.Ar name
is given, the value of that variable is displayed.
Otherwise, the variable is set to the new
.Ar value .
The following variables are defined:
.Bl -tag -width timeout
.It addr
Address at which to load the kernel
.It debug
Debug flag
.It device
Boot device name (see below)
.It doboot
.Dq 0
disables automatic boot on entering an empty line
.It howto
Options passed to the loaded kernel, see
.Cm boot
.It image
File name containing the kernel
.Ar image
.It timeout
Number of seconds to wait for human intervention before auto-booting
.It tty
Name of the active console device, for example:
.Bl -bullet -compact
.It
com0
.It
com1
.It
pc0
.El
.El
.It stty Op Ar device Op Ar speed
Displays or sets the
.Ar speed
for a console
.Ar device .
If the baudrate for the currently active console device is changed,
.Nm
offers you five seconds of grace period to switch your terminal to match.
If the baudrate for an inactive device is changed, it will only become
active on the
.Em next
switch to a serial console device; it is not used on the PC CRT console.
.Pp
The default baudrate is 9600 bps.
.Nm
uses eight data bits, no parity, one stop bit.
.It time
Displays the system date and time.
.El
.Sh IMAGE SPECIFICATIONS
An image specification consists of two parts, the device name and
a pathname, separated by a colon
.Pq So : Sc .
In most circumstances, both can be omitted, and pathnames do not
need to begin with a leading slash even if they are absolute.
Note that, for some filesystems, you are limited to an 8.3 character
naming scheme with case insensitive (mapped to lowercase) filenames.
Other filesystems may not provide directory listing information or
the ability to stat files (especially remote filesystems).
.Pp
Examples of valid image specifications are:
.Bl -bullet -compact
.It
fd0a:/bsd
.It
hd0o:/bsd.rd
.It
/
.Pq for Dq Cm ls
.It
cd0a:/boot/grub/stage2
.El
.Pp
Disklabels are read from hard discs (BIOS drive >= 80h) by searching
for a primary
.Mx
partition first.
The default partition type, 0x27, can be changed at
.Xr installboot 8
time, where it is hardcoded into the partition boot record.
If no suitable MBR partition was found or we're on a floppy, the
disklabel is searched at the beginning of the drive instead.
The label offset for the i386 architecture is one 512-byte sector.
On
.Mx
.Tn DuaLive
CDs, it may be embedded in the first-stage sparc bootloader.
If no disklabel can be read from the disc, one is faked.
The device size
.Pq So c Sc slice
defaults to the size of an 1440 KiB floppy disc, but if any MBR primary
partitions are found which span more space, their values are used instead.
The
.Sq d ,
.Sq e ,
.Sq f
and
.Sq g
slices are filled with the four MBR primary partitions, if any.
The
.Sq a
slice is filled, in this order, with: the partition passed via DS:SI
if plausible, the first non-empty MBR partition
.Po \*(sLd\*(sR-\*(sLg\*(sR slices Pc ,
the whole disc
.Po So c Sc slice Pc .
.Sh FILES
.Bl -tag -compact -width /tftpboot/boot.cfg
.It Pa /usr/mdec/bootxx
first stage bootloader (PBR)
.It Pa /usr/mdec/boot
second stage bootloader
.It Pa /usr/mdec/mbrldr
hard disc MBR, simple version
.It Pa /usr/mdec/mbrmgr
MBR, bootmanager version
.It Pa /boot
usual location of installed loader
.It Pa ldbsd.com
alternative name for
.Nm
.It Pa /boot.cfg
.Nm
configuration file
.It Pa /bsd
standard kernel image
.It Pa /bsd.rd
kernel image for installation/recovery
.It Pa /bsd.old
alternative kernel image
.It Pa /etc/dhcpd.conf
.Xr dhcpd 8
configuration file
.It Pa /tftpboot/boot
standard location of
.Nm
for netboot
.It Pa /tftpboot/boot.cfg
common/shared
.Nm
configuration file on the TFTP server;
.Pa /tftpboot/10.11.12.13/boot.cfg
contains peer-specific configuration to be used instead
.It Pa /tftpboot/bsd
kernel image
.It Pa /tftpboot/pxeboot
deprecated, no longer in use
.El
.Sh EXAMPLES
A sample configuration file for
.Xr dhcpd 8
is already contained with
.Mx
and might look as follows:
.Bd -literal -offset indent
shared\-network KICKSTART {
	subnet 172.23.42.0 netmask 255.255.255.0 {
		option routers 172.23.42.1;
		filename "boot";
		range 172.23.42.10 172.23.42.199;
	}
}
.Ed
.Pp
Boot the default kernel:
.Pp
.Dl boot> boot
.Pp
Remove the 5 second pause at boot-time permanently, causing
.Nm
to load the kernel immediately without prompting:
.Pp
.Dl # echo \&"boot\&" >/boot.cfg
.Pp
Remove the 5 second pause at boot-time permanently, causing
.Nm
to do nothing automatically:
.Pp
.Dl # echo \&"set timeout 0\&" >/boot.cfg
.Pp
Use serial console.
A null modem cable should connect the specified serial port to a terminal.
Useful for debugging.
.Pp
.Dl boot> set tty com0
.Pp
Invoke the serial console at every boot:
.Pp
.Dl # echo \&"set tty com0\&" >/boot.cfg
.Pp
Multiple commands on one line are useful for machines whose serial
console is unusable from within the boot loader, but the only way
to talk to the kernel, e.g. for installation on a Soekris/WRAP:
.Pp
.Bd -literal -offset indent
boot> stty com0 38400 \` set tty com0 \` boot /bsd.rd
.Ed
.Pp
Boot the kernel named
.Pa /bsd
from the second hard disc in
.Dq User Kernel Configuration
mode (see
.Xr boot_config 8 ) .
This mechanism allows for the explicit enabling and disabling of devices
during the current boot sequence, as well as the modification
of device parameters.
Once booted, such changes can be made permanent by using
.Xr config 8 Ns 's
.Fl e
option.
.Pp
.Dl boot> boot hd1a:/bsd \-c
.Sh SEE ALSO
.Xr gzip 1 ,
.Xr compress 3 ,
.Xr autoconf 4 ,
.Xr ddb 4 ,
.Xr dhcpd.conf 5 ,
.Xr boot_config 8 ,
.Xr boot_i386 8 ,
.Xr dhcpd 8 ,
.Xr diskless 8 ,
.Xr fdisk 8 ,
.Xr httpd 8 ,
.Xr inetd 8 ,
.Xr installboot 8 ,
.Xr reboot 8 ,
.Xr tftpd 8
.Rs
.%T Preboot Execution Environment (PXE) Specification
.%N Version 2.1
.%D September 20, 1999
.%A Intel Corporation
.Re
.Sh HISTORY
This bootloader is based on code written by
.An Michael Shalayeff
for
.Ox 2.1 .
The separate
.Nm pxeboot
command first appeared in
.Ox 3.5 ,
based upon work from
.Nx .
In
.Ox
and
.Mx 7
and below, the
.Pa boot.cfg
file was called
.Pa boot.conf ,
it has been renamed for ISO 9660 and FAT compatibility.
A version called
.Nm cdboot
appeared in
.Mx 8
and went away for
.Mx 10 .
The separate versions got merged into one bootloader,
DOS, COMBOOT, Multiboot support, pagination, macros, the
.Cm machine exec
and
.Cm cat
commands, working chainbooting of bootsectors and GNU GRUB,
faked disklabels (if none exist on disc), FAT filesystem support,
and many more things were added or rewritten for
.Mx 11
and grml by
.An Thorsten Glaser .
