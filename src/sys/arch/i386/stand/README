Speicherlayout für den neuen Bootloader:

• Linken nach 0x00040000 (4000:0000h)
• Stack bei   0x0003FFFC (3000:FFFCh) nach Relokation
• initialer Stack 160 Bytes in cmd_buf in srt0.S(.text)
• maximale Code- und Datengröße (also ohne .bss) 64 KiB (minus 1 bißchen)
• initiale Relokation erfolgt durch srt0.S, sofern nicht durch bootxx be-
  reits an korrekte Adresse geladen:
  ‣ Herausfinden der eigenen linearen Basisadresse
  ‣ Aufsetzen des Initialstacks
  ‣ Wenn lineare Basisadresse in [30000,4FFFF]:
    ⇒ Relokation nach 6000:0000
    ⇒ Initialstackrelokation nach 6000:(pxe_command_buf-_start)
  ‣ Relokation nach 4000:0000
  ‣ Aufsetzen des Stacks (RM SS:SP=3000:0000FFFC, PM ESP=0x0003FFFC)
• Datenzugriffe im RM erfolgen immer(!) relativ zur Startadresse
• Bis zum Aufsetzen des Initialstacks rennen wir mit dem Stack des
  Bootloaders (bootxx, SYSLINUX, Multiboot, MS-DOS®), und zwar so
  sparsam wie möglich
• Multiboot: Relokation von 0x00100000 (absolut 1 MiB) nach 0x00040000,
  ggf. Shortcut durch das normale Initialisationsgedöns
• MS-DOS®: Herausfinden, welches Laufwerk aktiv ist / von wo wir geladen
  wurden, alternativ DL=80h setzen
• SYSLINUX, EXTLINUX, PXELINUX, ISOLINUX: Identifizieren, Textmodus
  forcieren, Typ holen
  ‣ SYSLINUX, EXTLINUX, ISOLINUX: Laufwerk holen
  ‣ ISOLINUX: CD-Emulation beënden
  ‣ SYSLINUX, EXTLINUX: Bootpartition holen
  ‣ SYSLINUX, EXTLINUX, ISOLINUX: komplett aufräumen
  ‣ PXELINUX: aufräumen und UNDI im Speicher belassen
• PXE: PXENV+ und !PXE Strukturen sichern
• bootxx sichert Bootpartition selber
• XXX Standardlaufwerk bei PXE?

─────────────────────────────────────────────────────────────────────────
$MirOS: src/sys/arch/i386/stand/README,v 1.4 2009/01/10 12:38:21 tg Exp $
