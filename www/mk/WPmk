rcsid_WPmk='$MirOS: www/mk/WPmk,v 1.8 2013/06/09 02:47:39 tg Exp $'
#-
# This file is part of the website of The MirOS Project, which is
# copyrighted material, please read the LICENCE file for details.

#DEPEND mk/htsconv
. "$TOP"/mk/htsconv

committer=$1
set -A gcbanners

if [[ $committer != +([0-9a-z]) || ! -s $TOP/data/$committer.gc ]]; then
	print -ru2 "Cannot find WP configuration for '$committer'"
	exit 1
fi
. "$TOP/data/$committer.gc"

integer notimesort=1
integer parser_usedate=0

#DEPEND mk/parser
. "$TOP"/mk/parser

if [[ $committer != +([0-9a-z]) ]]; then
	print -ru2 "Eh? '$committer' is invalid."
	exit 255
fi
if [[ ! -s $TOP/data/60$committer.png ]]; then
	print -ru2 "Cannot find PNG file for '$committer'"
	exit 1
fi
datadate=
for x in "${rcsid_db[@]}"; do
	[[ $x = '$''MirOS: www/data/WP'"$committer"'.inc,v '+([0-9.])' '+([0-9/])' '+([0-9:])' '*'$' ]] || continue
	set -A xa -- $x
	datadate=${xa[3]}
	break
done
if [[ $datadate != 20[0-9][0-9]/@(0[1-9]|1[012])/@(0[1-9]|[12][0-9]|3[01]) ]]; then
	print -ru2 "No RCSID in WP$committer.inc"
	exit 1
fi
datadate=${datadate:8:2}.${datadate:5:2}.${datadate::4}

set -A fwp
integer entryp=0
while (( entryp < entries )); do
	ent=${ei_indir[entryp++]}
	[[ -n ${e_title[ent]} ]] || continue
	if [[ ${e_id[ent]} != [1-9]*([0-9]) ]]; then
		# This also catches duplicates due to parser using '-g$guid'
		print -ru2 "Non-numeric ID '${e_id[ent]}' for '${e_title[ent]}'"
		exit 1
	fi
	fwp[${e_id[ent]}]=$ent
done
set -A fwpk -- "${!fwp[@]}"
fwpks=${#fwpk[*]}
fwpkl=${fwpk[fwpks - 1]}
if (( entries != fwpkl )); then
	print -u2 "$entries entries, but the highest found# is $fwpkl"
	exit 1
fi

print -r -- "WP$committer.png"
php >"WP$committer.png~" <<EOF
<?php
\$font1 = "$TOP/files/FNT/GenI102.ttf";
\$font2 = "$TOP/files/FNT/GenBasBI.ttf";
\$fontsize1 = $fontsize1;
\$fontsize2 = $fontsize2;
\$dfont = "$TOP/mk/6x13.gdf";

\$upic = "$TOP/data/60$committer.png";
\$user = "$statname";
\$numc = $fwpkl;
\$date = "$datadate";

// Load user picture
if ((\$upim = imagecreatefrompng(\$upic)) === false ||
    (\$upif = getimagesize(\$upic)) == false ||
    \$upif[0] != 60 || \$upif[1] != 60)
	die("Bad user picture, need 60x60 PNG.");

// Create image
\$im = imagecreatetruecolor(234, 61);
// Allocate colours
\$bgcol = imagecolorallocate(\$im, 0x10, 0x10, 0x10);
\$fgcol = imagecolorallocate(\$im, 0xFF, 0xFF, 0xFF);
\$black = imagecolorallocate(\$im, 0x00, 0x00, 0x00);
\$amber = imagecolorallocate(\$im, 0xFF, 0xBF, 0x00);

// Fill image with background colour
imagefilledrectangle(\$im, 0, 0, 233, 59, \$bgcol);

// Copy user picture
imagecopy(\$im, \$upim, 0, 0, 0, 0, 60, 60);

// Write user text
\$txt_ofs = 3;
\$text = \$user;
// Get bounding box
\$bbox = imageftbbox(\$fontsize1, 0, \$font1, \$text);
// Transform coordinates into width+height and position
\$size_w = abs(\$bbox[2] - \$bbox[0]);	// right - left
\$size_h = abs(\$bbox[7] - \$bbox[1]);	// top - bottom
\$x = -\$bbox[0];				// left (offset)
\$y = \$size_h - abs(\$bbox[1]);		// lower
// Adjust position
\$x += 60;
\$y += 3;
// Render text into image
imagefttext(\$im, \$fontsize1, 0, \$x, \$y, \$amber, \$font1, \$text);

// Write caches text
\$txt_ofs = \$size_h + 6;
\$text = sprintf('%d Cache%s found', \$numc, \$numc == 1 ? '' : 's');
// Get bounding box
\$bbox = imageftbbox(\$fontsize2, 0, \$font2, \$text);
// Transform coordinates into width+height and position
\$size_w = abs(\$bbox[2] - \$bbox[0]);	// right - left
\$size_h = abs(\$bbox[7] - \$bbox[1]);	// top - bottom
\$x = -\$bbox[0];				// left (offset)
\$y = \$size_h - abs(\$bbox[1]);		// lower
// Adjust position
\$x += 60;
\$y += \$txt_ofs;
// Render text into image
imagefttext(\$im, \$fontsize2, 0, \$x, \$y, \$fgcol, \$font2, \$text);

// Write date text
imagefilledrectangle(\$im, 221, 0, 233, 59, \$black);
if ((\$dfi = imageloadfont(\$dfont)) === false)
	die("Bitmap font problem");
\$x = 234 - 13;
for (\$y = 0; \$y < strlen(\$date); ++\$y)
	imagecharup(\$im, \$dfi, \$x, 59 - \$y * 6, \$date[\$y], \$amber);

// Black bottom border
imagefilledrectangle(\$im, 0, 60, 233, 60, \$black);

// Output created image
imagepng(\$im, NULL, 9);

exit(0);
EOF
rv=$?
if (( rv )); then
	print -ru2 "Error creating statpic: $(<"WP$committer.png~")"
	exit 1
fi
mws_moveifchange -b "WP$committer.png~" "WP$committer.png"


print -r -- "WP$committer.htm"
mws_basepath "WP$committer.htm"
mws_setname "gc/$committer" "$committer’s found Waypoints"
mws_setheadline "Geocaches found by $gclogin"
mws_putheader "$rcsid_WPmk" >"WP$committer.htm~"
{
	print '<p><a href="#wpts" style="border:0;"><img style="border:0;"'
	print " alt=\"$statname WP=$fwpkl on $datadate\""
	print " src=\"WP$committer.png\" /></a></p>"
	if (( ${#gcbanners[*]} )); then
		print '<h2 id="banners">Banners et al.</h2>'
		for x in "${gcbanners[@]}"; do
			[[ $x = *'<'@(div|table|h[3-6])* ]] || x="<p>$x</p>"
			print -r -- "$x"
		done
	fi
	print "<h2 id=\"wpts\">Waypoints: $fwpkl</h2>"
	print '<ul style="position:relative; left:-20px;">'
	entryp=0
	while (( entryp < entries )); do
		ent=${ei_indir[entryp++]}
		case ${e_ntf[ent]} {
		(0)
			class=gc_ztf
			what="Owner"
			sep=★
			;;
		(1)
			class=gc_ftf
			what="First To Find"
			sep=☀
			;;
		(2)
			class=gc_stf
			what="Second To Find"
			sep=☂
			;;
		(3)
			class=gc_ttf
			what="Third To Find"
			sep=☃
			;;
		(4)
			class=gc_vtf
			what="Forth To Find"
			sep=♨
			;;
		(L)
			class=gc_ltf
			what="Last To Find"
			sep=☄
			;;
		(*)
			class=gc_tftc
			what=
			sep='•'
			;;
		}
		print -r "<li id=\"wp${e_id[ent]}\"${what:+ title=\"$what\"}" \
		    "class=\"$class\">${e_date[ent]} #${e_id[ent]} $sep"
		for wp in ${e_waypoint[ent]}; do
			case $wp {
			(GC*)
				wp="<a href=\"http://www.geocaching.com/seek/cache_details.aspx?wp=$wp\">$wp</a>"
				;;
			(N[0-9]+([0-9A-F]))
				wp="<a href=\"http://www.navicache.com/cgi-bin/db/displaycache2.pl?CacheID=$((16#${wp#N}))\">$wp</a>"
				;;
			(O[BCKPSUZ]*)
				case $wp {
				(OB*) x=nl ;;
				(OC*) x=de ;;
				(OK*) x=org.uk ;;
				(OP*) x=pl ;;
				(OS*) x=se ;;
				(OU*) x=us ;;
				(OZ*) x=cz ;;
				}
				wp="<a href=\"http://www.opencaching.$x/viewcache.php?wp=$wp\">$wp</a>"
				;;
			(OX*)
				wp="<a href=\"http://www.opencaching.com/#!geocache/$wp\">$wp</a>"
				;;
			(TC*|LC*)
				wp="<a href=\"http://www.terracaching.com/viewcache.cgi?ID=$wp\">$wp</a>"
				;;
			(*)
				wp=$(xhtml_escape "$wp")
				;;
			}
			print -r " $wp"
		done
		for x in ${e_tag[ent]}; do
			[[ $x = recommended ]] && \
			    sep='<span style="color:red;" title="Recommended">❧</span>'
		done
		print -r " $sep ${e_title[ent]}"
		if [[ -n ${ei_body[ent]} ]]; then
			print '<div class="gc_body">'
			print -r -- "${ei_body[ent]}" | perl -pe '
				s`\b(N[0-9][0-9A-F]{4}|(GC|O[BCKPSUXZ]|[TL]C)[0-9A-Z]{4,5})\b`
					($wp = $1) =~ /^GC/ ? "<a href=\"http://www.geocaching.com/seek/cache_details.aspx?wp=$wp\">$wp</a>" :
					$wp =~ /^N[0-9]/ ? sprintf("<a href=\"http://www.navicache.com/cgi-bin/db/displaycache2.pl?CacheID=%d\">$wp</a>", hex(substr($wp, 1))) :
					$wp =~ /^OB/ ? "<a href=\"http://www.opencaching.nl/viewcache.php?wp=$wp\">$wp</a>" :
					$wp =~ /^OC/ ? "<a href=\"http://www.opencaching.de/viewcache.php?wp=$wp\">$wp</a>" :
					$wp =~ /^OK/ ? "<a href=\"http://www.opencaching.org.uk/viewcache.php?wp=$wp\">$wp</a>" :
					$wp =~ /^OP/ ? "<a href=\"http://www.opencaching.pl/viewcache.php?wp=$wp\">$wp</a>" :
					$wp =~ /^OS/ ? "<a href=\"http://www.opencaching.se/viewcache.php?wp=$wp\">$wp</a>" :
					$wp =~ /^OU/ ? "<a href=\"http://www.opencaching.us/viewcache.php?wp=$wp\">$wp</a>" :
					$wp =~ /^OZ/ ? "<a href=\"http://www.opencaching.cz/viewcache.php?wp=$wp\">$wp</a>" :
					$wp =~ /^OX/ ? "<a href=\"http://www.opencaching.com/#!geocache/$wp\">$wp</a>" :
					$wp =~ /^[TL]C/ ? "<a href=\"http://www.terracaching.com/viewcache.cgi?ID=$wp\">$wp</a>" :
					$wp;
				`eg'
			print '</div>'
		fi
		print '</li>'
	done
	print '</ul>'
} | mws_content >>"WP$committer.htm~"
mws_putfooter >>"WP$committer.htm~"
mws_moveifchange "WP$committer.htm~" "WP$committer.htm"
exit 0
