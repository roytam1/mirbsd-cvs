rcsid_inc2rss='$MirOS: www/mk/inc2rss,v 1.32 2011/07/25 10:16:07 tg Exp $'
#-
# This file is part of the website of The MirOS Project, which is
# copyrighted material, please read the LICENCE file for details.

integer maxentries=25
DATE_RSS="%a, %d %b %Y %H:%M:%S %z"
name=$1

. "$TOP/data/$name.cfg"

#DEPEND mk/parser
. "$TOP"/mk/parser

#DEPEND mk/htsconv
. "$TOP"/mk/htsconv

mws__header="<!-- RSS mode -->"
mws__abspath=$mws__canonsite

function rss_putheader {
	#lastchanged=$(date -r $(stat -f "%m" "$TOP/data/$name.inc") +"$DATE_RSS")
	lastchanged=$(date +"$DATE_RSS")
	cat <<-EOF
		<rss
		 xmlns:atom="http://www.w3.org/2005/Atom"
		 xmlns:dc="http://purl.org/dc/elements/1.1/"
		 version="2.0">
		<channel xml:lang="en">
		 <title>$ptitle</title>
		 <description>$pname - the MirOS Project</description>
		 <atom:link href="$mws__abspath/$1" rel="self" type="application/rss+xml" />
		 <lastBuildDate>$lastchanged</lastBuildDate>
		 <link>http://mirbsd.de/</link>
		 <managingEditor>tg@mirbsd.org (The MirOS Project)</managingEditor>
		 <webMaster>bsiegert@mirbsd.org (The MirOS Project)</webMaster>
		 <copyright>All content Copyright © by The MirOS Project or its respective
		  writers. Permission to reproduce wlog entries in unmodified form without
		  notice is granted provided they are not used to endorse or promote any
		  products or opinions. For everything else you need to obtain written
		  permission from the copyright owner.</copyright>
		 <dc:language>en</dc:language>
		 <ttl>${rssttl:-1440}</ttl>
		 <generator>MirOS Website, written in mksh; RCS IDs:
		    $rcsid_parser
		    $rcsid_common
		    $rcsid_htsconv
		    $rcsid_inc2rss
		  RCS IDs of the content database:
		    $rcsid_cfg
	EOF
	for x in "${rcsid_db[@]}"; do
		[[ -z $x ]] && continue
		print "    $x"
	done
	print " </generator>"
}

function rss_putfooter {
	print "</channel></rss>"
}

function rss_output {
	local rcmd i x
	integer ent=$1
	rpath=$2
	eid=$(uri_escape "${e_id[ent]}")
	efe="${mws__abspath}${rpath}${ei_srcf[ent]}_${eid}.htm#${eid}_${ei_srcf[ent]}"
	pubdate=$(strftm "$DATE_RSS" ${ei_time[ent]})
	if [[ -n ${e_title[ent]} ]]; then
		title="${e_title[ent]}"
	else
		title="${e_date[ent]}${e_author[ent]+ by }${e_author[ent]}"
	fi
	if [[ ${e_language[ent]} = +([A-Za-z0-9-]) ]]; then
		xmllang=" xml:lang=\"${e_language[ent]}\""
		rss3lang="<language>${e_language[ent]}</language>"
	else
		xmllang=
		rss3lang=
	fi
	if [[ $title = *'<'* || $title = *'>'* ||
	    ${title//'&#'+([0-9]);} = *'&'* ]]; then
		print -u2 Error: RSS title cannot contain HTML \
		    and only numeric entities!
		exit 1
	fi
	# we use $xmllang: RSS 2.0 doesn’t allow the language tag inside
	# items, just as channel tag (and Benny’s template doesn’t even
	# use it but dc:language instead)
	cat <<-EOF
		<item$xmllang>
		<title>$title</title>
		<pubDate>$pubdate</pubDate>
		<link>$efe</link>
		<guid isPermaLink="true">$mws__canonsite/permalinks/${ei_srcf[ent]}_${eid}.htm</guid>
	EOF
	for x in ${e_tag[ent]}; do
		print "<category>$x</category>"
		print $x >>stamp_tag_$name
	done
	if [[ -n ${e_author[ent]} ]]; then
		eauthor=${e_author[ent]}
		mauthor=
		if [[ $eauthor = *@ ]]; then
			uauthor=" ${eauthor%%@*}"
			eauthor="${eauthor}mirbsd.org"
		fi
		[[ $eauthor = *\(*\)* ]] || eauthor="$eauthor (MirOS Developer$uauthor)"
		print "<author>${eauthor}</author>\n"
	fi
	print "<description>"
	if [[ -n ${e_pictures[ent]} ]]; then
		set -A rcmd -- sed
		for i in ${e_pictures[ent]}; do
			i=${i%%:*}
			eval x='${e_picture'$i'[ent]}'
			rcmd[${#rcmd[*]}]=-e
			rcmd[${#rcmd[*]}]="s@!PICTURE${i}!@$(xhtml_escape \
			    "$x" | sed_escape)g"
		done
	else
		rcmd=cat
	fi
	"${rcmd[@]}" <<<"${ei_body[ent]%%@(<!-- RSS stop -->)*}" | \
	    mws_content | xhtml_escape
	print "</description></item>"
}

rm -f stamp_tag_$name
print -r -- ${name}.rss
mws_setname $whoami "$pname"
mws_subdir -
rss_putheader "${name}.rss" >${name}.rss~

integer i='entries - 1'
integer last='entries < maxentries ? 0 : entries - maxentries'
while (( i >= last )); do
	integer ent=${ei_indir[i]}

	if [[ ${e_deleted[ent]} = 1 ]]; then
		(( last = last > 0 ? last - 1 : 0 ))
		let i--
		continue
	fi
	rss_output $ent "/permalinks/" >>${name}.rss~
	let i--
done

rss_putfooter >>${name}.rss~
mws_moveifchange ${name}.rss~ ${name}.rss
[[ -e stamp_tag_$name ]] && sort -u -o stamp_tag_$name stamp_tag_$name
exit 0
