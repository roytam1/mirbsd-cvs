rcsid_inc2htm='$MirOS: www/mk/inc2htm,v 1.32 2013/08/01 09:39:50 tg Exp $'
#-
# This file is part of the website of The MirOS Project, which is
# copyrighted material, please read the LICENCE file for details.

integer perpage=12
integer parser_usedate=0
name=$1

. "$TOP/data/$name.cfg"

#DEPEND mk/common
. "$TOP"/mk/common

#DEPEND mk/parser
. "$TOP"/mk/parser

#DEPEND mk/htsconv
. "$TOP"/mk/htsconv

wd=$(pwd)
cd "$TOP/data"
for x in *.cfg; do
	x=${x%.cfg}
	t=$(grep '^targets=' $x.cfg || :)
	typeset -l targets=
	[[ -z $t ]] || eval $t
	for t in $targets; do
		if [[ $t != +([0-9a-z_]) ]]; then
			print -u2 "Invalid tag '$t' in data/$x.cfg"
			continue
		fi
		eval linktarget_$t=$x
	done
done
cd "$wd"

function output {
	local rcmd i j x

	rpath=$1
	efe="${rpath}${ei_srcf[ent]}_${eid}.htm#${eid}_${ei_srcf[ent]}"
	title=${e_date[ent]}
	[[ -n ${e_author[ent]} ]] && \
	    title="$title by <a href=\"mailto:${e_author[ent]}mirbsd.org\">${e_author[ent]}</a>"
	subtitle=
	if [[ ${e_language[ent]} = +([A-Za-z0-9-]) ]]; then
		xmllang=" xml:lang=\"${e_language[ent]}\""
	else
		xmllang=
	fi
	print "<div class=\"wlentry\"$xmllang>"
	if [[ -n ${e_title[ent]} ]]; then
		subtitle='<div class="wlsubtitle">'"${title}</div>$nl"
		title="${e_title[ent]}"
	fi
	if [[ -n ${e_tag[ent]} ]]; then
		subtitle=$subtitle'<div class="wltagtitle">Tags:'
		for x in ${e_tag[ent]}; do
			eval t=\$linktarget_$x
			[[ -z $t ]] || x="<a href=\"@@RELPATH@@${t}_all.htm#${eid}_${ei_srcf[ent]}\">$x</a>"
			subtitle="$subtitle $x"
		done
		subtitle="$subtitle</div>$nl"
	fi
	if [[ -n ${e_pictures[ent]} ]]; then
		set -A rcmd -- sed
		for i in ${e_pictures[ent]}; do
			case $i {
			(*:*)	j=${i#*:}; i=${i%%:*} ;;
			(*)	j= ;;
			}
			eval x='${e_picture'$i'[ent]}'
			rcmd[${#rcmd[*]}]=-e
			rcmd[${#rcmd[*]}]="s@!PICTURE${i}!@$(mws_makepiclink \
			    "$x" "$j" d | sed_escape)g"
		done
	else
		rcmd=cat
	fi
	cat <<-EOF
		<div class="wltitle">
		<h2 class="wlentry" id="${e_id[ent]}_${ei_srcf[ent]}"><a href="${efe}">${title}</a></h2>
		${subtitle}</div>
	EOF
	"${rcmd[@]}" <<-EOF
		${ei_body[ent]/'<!-- RSS stop -->'}
		</div>
	EOF
}

function mopen {
	integer number=$1
	if (( number == 1 )); then
		fn=$name.htm
	else
		fn=${name}_${number}.htm
	fi
	print -r -- "$fn"
	mws_setname $whoami "$pname – Page $number"
	mws_subdir 0
	mws_setheadline "$ptitle"
	mws_putheader >$fn~
	print -r -- "<p>${plinks}" >>$fn~
}

function mclose {
	mws_putfooter >>$1~
	mws_moveifchange $1~ $1
}


#rm -f ${name}.{cut,htm} ${name}_*.htm permalinks/${name}_*.htm
saveIFS=$IFS
IFS=
(( cutoff )) && cat >${name}.cut~ <<-EOF
	: \${mws__relpath=/} ${mws__relpath=/}
	mws__tmpa='${rcsid_db[*]}'
	saveIFS=\$IFS
	IFS=
	for mws__tmpb in \$mws__tmpa; do
		mws__tmpd=0
		for mws__tmpc in "\${rcsid_db[@]}"; do
			[[ \$mws__tmpc = "\$mws__tmpb" ]] || continue
			mws__tmpd=1
			break
		done
		(( mws__tmpd )) || rcsid_db[\${#rcsid_db[*]}]=\$mws__tmpb
	done
	IFS=\$saveIFS
EOF
IFS=$saveIFS
mws_basepath ${name}_all.htm
print -r -- ${name}_all.htm
mws_setname $whoami "$pname – All in One Page"
mws_setrss "${mws__relpath}${name}.rss"
mws_subdir 0
mws_setheadline "$ptitle"
mws_putheader >${name}_all.htm~
plinks="<a href=\"${name}_all.htm\">All</a> <a href=\"${name}.htm\">1</a>"
plinksr="<a href=\"../${name}_all.htm\">All</a> <a href=\"../${name}.htm\">1</a>"
integer entryc=entries
integer entryp='entries - 1'
integer ent
while (( entryp >= 0 )); do
	ent=${ei_indir[entryp]}
	[[ ${e_deleted[ent]} = 1 ]] && let --entryc
	let entryp--
done
integer i=2
while (( i <= ((entryc - cutoff) / perpage + 1) )); do
	plinks="$plinks <a href=\"${name}_${i}.htm\">${i}</a>"
	plinksr="$plinksr <a href=\"../${name}_${i}.htm\">${i}</a>"
	let ++i
done
plinks="${plinks}</p>"
plinksr="${plinksr}</p>"
print -r -- "<p>${plinks}" >>${name}_all.htm~
mopen 1
mkdir -p permalinks
integer entryc=0
integer entryp='entries - 1'
integer ent
while (( entryp >= 0 )); do
	ent=${ei_indir[entryp]}
	eid=$(uri_escape "${e_id[ent]}")
	do_permalink=1
	for f in "${nopermalinks[@]}"; do
		[[ $f = ${ei_srcf[ent]} ]] || continue
		do_permalink=0
		break
	done
	if [[ ${e_deleted[ent]} = 1 ]]; then
		if (( do_permalink )); then
			fe=permalinks/${ei_srcf[ent]}_${eid}.htm
			print -r -- "$fe"
			mws_push
			mws_setname $whoami "$pname"
			mws_subdir 1
			mws_putheader >$fe~
			mclose $fe
			mws_pop
		fi
		let entryp--
		continue
	fi
	if (( do_permalink )); then
		fe=permalinks/${ei_srcf[ent]}_${eid}.htm
		print -r -- "$fe"
		mws_push
		mws_setname $whoami "$pname"
		mws_subdir 1
		mws_setheadline "$ptitle"
		mws_putheader >$fe~
		print -r -- "<p>${plinksr}" >>$fe~
		output | mws_content >>$fe~
		mclose $fe
		mws_pop
	fi
	if [[ ${e_hidden[ent]} = 1 ]]; then
		let entryp--
		continue
	fi
	if (( entryc < cutoff )); then
		print "mws_content <<'EOF_cutoff_$name'" >>${name}.cut~
		output @@RELPATH@@permalinks/ >>${name}.cut~
		print EOF_cutoff_$name >>${name}.cut~
	else
		output permalinks/ | mws_content >>$fn~
	fi
	output permalinks/ | mws_content >>${name}_all.htm~
	let entryp--
	let entryc++
	if (( ((entryc - cutoff) % perpage) == 0 )); then
		print -r -- "<p class=\"linkbot\">$plinks" >>$fn~
		mclose $fn
		mopen $(((entryc - cutoff) / perpage + 1))
	fi
done
print -r -- "<p class=\"linkbot\">$plinks" >>$fn~
print -r -- "<p class=\"linkbot\">$plinks" >>${name}_all.htm~
mclose $fn
mclose ${name}_all.htm
[[ -e ${name}.cut~ ]] && mws_moveifchange ${name}.cut~ ${name}.cut
exit 0
