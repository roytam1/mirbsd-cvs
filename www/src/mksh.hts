# This file is part of the website of The MirOS Project, which is
# copyrighted material, please read the LICENCE file for details.

mws_setname subprojects/mksh "mksh – the MirBSD Korn Shell"
mws_setrss "tag_mksh.rss"
mws_putheader '$MirOS: www/src/mksh.hts,v 1.222 2009/04/13 18:01:51 tg Exp $'
mws_content <<'EOF'
<h1>mksh(1) R37c</h1>
<p>This is the website of the MirBSD™ Korn Shell, an actively developed free
 implementation of the Korn Shell programming language and a successor to the
 Public Domain Korn Shell (pdksh).</p>

<table width="100%"><tr><td>
<p>This page is always accessible via a redirection at <a
 href="http://mirbsd.de/mksh"><tt>http://mirbsd.de/mksh</tt></a>, which is
 the canonical homepage URI, and in case the webserver is unreachable, <a
 href="http://mirbsd.de/mksh-fornow">the backup page</a> will provide basic
 information. The <a href="http://directory.fsf.org/mksh.html">FSF/UNESCO
 directory of Free Software</a> lists mksh, too.</p>
</td><td style="width:160px;"><object data="@@RELPATH@@pics/mksh.svg"
 type="image/svg+xml" width="128" height="100"><img alt="mksh Logo"
 src="@@RELPATH@@pics/mksh128x100.png" /></object></td></tr></table>

<h2 id="toc">Table of Contents</h2><ul>
 <li><a href="#prefetch">Introduction</a> and Licence</li>
 <li><a href="#irc">Support</a> (IRC, manual page, mailing lists, …)</li>
 <li><a href="#build">Installation</a></li>
 <li><a href="#upgrade">Upgrade</a> your packages from older mksh</li>
 <li>Inclusion in <a href="#otheros">operating systems</a></li>
 <li><a href="#contrib">comparision</a> with other shells</li>
 <li><a href="#regress">Testsuite Results</a> (regression tests)</li>
 <li><a href="#vsn">on version numbers</a> – for packagers</li>
 <li><a href="#plans">future plans</a></li>
 <li><a href="#clog">ChangeLog</a></li>
 <li>information about <a href="mksh_old.htm">old versions</a></li>
</ul>

<h2 id="prefetch">Introduction</h2>
<p>The current version of mksh is <strong>mksh R37c</strong> from
 <em>7 April 2009</em>.</p>
<p>Thanks to “Der Verein <a href="http://www.trash.net/verein/">trash.net</a>”
 for sponsoring access to a Solaris 8 box. Thanks to HP TestDrive, which helps
 in keeping mksh portable to several Unixes and compilers, and track down some
 architecture- or glibc-specific bugs. Thanks to Julian “yofuh” Wiesener for
 just another account on a Sun E420 on Solaris 11β. Thanks to someone who
 prefers to stay anonymous due to tons of red tape for providing access to an
 AIX 5.3 system with gcc and xlC installed. Thanks to gnubber’s admin (Barry
 “bddebian” deFreese), as well as Samuel “youpi” Thibault, for providing shell
 access to a Debian GNU/HURD system. Thanks to Lucas “laffer1” Holt for ssh
 access to the MidnightBSD server. Thanks to Waldemar “wbx” Brodkorb for
 dropping his unused Zaurus SL-C3200 to someone who can actually make use of
 it to test mksh on OpenBSD. Thanks to Andreas “gecko2” Gockel for access to
 a couple of Debian and Macintosh boxen and an iPhone 3G. Thanks to Martin
 Zobel-Helas for an account on an Alpha system. Thanks to Bastian “waldi”
 Blank for access to an S/390 system and uploading mksh packages to Debian
 for quite some time. Also thanks to Otavio Salvador and Patrick “aptituz”
 Schönfeld for uploading a couple of my Debian packages. The Debian GNU/k*BSD
 and HURD developers were quite helpful in assisting and testing as well.
 Thanks to Thomas E. “TGEN” Spanjaard for access to both a NetBSD and a
 DragonFly system. Thanks to Josef “jupp” / “penpen” Schugt for testing mksh
 on a Digital Unix (OSF/1 V4.0) system from the Uni Bonn Physik CIP Pool.
 Thanks to DEChengst from #UnixNL for providing access to a HP/Compaq Tru64
 (OSF/1 V5.1B) system, an OSF/1 V2.0 system and an Ultrix 4.5 system. Thanks
 to Adam “replaced” Hoka for a BSDi BSD/OS 3.1 ISO9660 image and offering to
 help with HP-sUX testing (now that HP TestDrive went down) and porting to
 Haiku. Thanks to André “naaina” Wösten for ssh on a QNX box. Thanks to
 Olivier Duchateau for testing on Slackware and Zenwalk GNU/Linux.
 (Did I miss anyone? Mail me if so. Some of these are past, anyway.)</p>
<p>What is mksh(1)? – Short answer: The MirBSD Korn Shell. Okay, but what
 exactly does it do, or why another shell? These questions will be answered
 <a href="#contrib">below</a> for the people interested. Right now, you only
 need to know that mksh is a <a href="http://www.debian.org/social_contract#guidelines">DFSG</a>-free
 and <a href="http://www.opensource.org/docs/osd">OSD</a>-compliant (and OSI
 approved)
 successor to pdksh, developed as part of <a href="http://mirbsd.de/">the
 MirOS Project</a> as native bourne/POSIX/korn shell for MirOS BSD, but also
 to be readily available under other UNIX®-like operating systems.</p>
<p id="lic">The source code for mksh is available at the MirOS Project mirrors
 as well as these of other operating system projects due to being <a
 href="#otheros">included</a> in these; however, we do not provide binaries.
 Find <a href="#build">instructions to build and install mksh</a> below, or
 ask your operating environment vendor to package and include mksh; we provide
 assistance for this task if asked. <em>Licencing</em> permits this as long
 as due credit is given to the authors and contributors and the copyright
 notices are not removed in their entirety; modifying is allowed (but if
 the result is still called mksh, it’s discouraged; talk with us if you
 feel you have to modify mksh). The individual licences used are the MirOS
 licence, and (for BSD compatibility on other oerating systems) the 3-clause
 UCB licence and the ISC licence; <a
 href="/cvs.cgi/src/bin/mksh/copyright?rev=HEAD">full terms</a> are
 available via CVSweb. pdksh originally was public domain, with a few
 exceptions, but these files are not part of mksh R21 or up. The mksh(1) author
 (mirabilos) acknowledges the contributions of these people who dedicated pdksh
 and oksh to the public, and asserts a collective copyright on the code.
 All these licences are DFSG clean and conform to the OSD, and the MirOS
 Licence is listed on the pages of the ifrOSS licence centre as well as
 in the FSF/UNESCO Directory of Free Software. The MirBSD Korn Shell is <a
 href="@@RELPATH@@permalinks/news_e20081114-nn.htm">OSI Certified <img
 src="@@RELPATH@@pics/open_source_button.png" alt="Open Source Software™" />
 </a> and its <a href="@@ABSPATH@@/man/mksh.1">manual</a> Open Knowledge.</p>
<p>To compile mksh, you will need a bourne or POSIX shell (Solaris
 <tt>/bin/sh</tt> is enough, and the Z shell should work), a C compiler (at
 the moment, only the one from the <a href="http://gcc.gnu.org/">GNU Compiler
 Collection</a> works, but we’re attempting to change this), system and C
 library header files and the standard C runtime. You will also need a set of
 standard UNIX® tools on a supported operating system: any recent BSD; Darwin,
 Apple Mac OSX; Interix (Microsoft® Services for Unix 3.5, maybe Subsystem for
 Unix Applications on Win2003/Vista); GNU/Cygwin; UWIN; GNU/Linux (libc5,
 glibc, dietlibc, µClibc, some klibc systems are tested), Debian GNU/kFreeBSD,
 GNU/HURD or GNU/Linux; Sun Solaris (8, 9, 10, 11), OpenSolaris; AIX; IRIX;
 HP-UX 11i; OSF/1; ULTRIX; Minix 3<br />To run the
 regression test suite, you will need a not too antiquated Perl with POSIX.pm
 as well as <tt><a href="#editor">/bin</a>/ed</tt> (whose installation is
 strongly suggested anyway, because it’s the standard <tt>FCEDIT</tt> history
 editor and standard UNIX® text editor), as well as a controlling terminal,
 usually <tt>/dev/tty</tt> or provided from script(1) or GNU screen.</p>
<p>To use mksh, you only need the C runtime (and any supplemental libraries
 the binary was linked against) and, optionally, <tt>/bin/ed</tt> – for
 interactive use, a controlling terminal is highly recommended because job
 control does not work without one.</p>
<p>To make full use of mksh(1)’s interactive features, it is recommended to
 copy the <tt>dot.mkshrc</tt> file from the source distribution as
 <tt>~/.mkshrc</tt> into the user’s home directory and let the user adjust
 it to suit his needs. The sample file configures a few aliases and shell
 functions as well as a sensible prompt (<tt>$PS1</tt>) and some csh-like
 directory stack functions and zsh-like hooks. Full use of this file requires
 a few special UNIX® tools. Note that <tt>$ENV</tt> must not be set for
 mksh(1) to parse the <tt>~/.mkshrc</tt> file at startup.</p>

<h2 id="irc">Support</h2>
<p>We provide an online manual page in <a
 href="@@ABSPATH@@/man/mksh.1">HTML</a> and <a
 href="@@ABSPATH@@/MirOS/dist/mir/mksh/mksh.pdf">PDF</a> format.
 Reading books about Korn Shells in general is recommended as further help,
 but beware of the <a href="#contrib">differences</a> to other shells. Some
 ISBNs are listed at the end of the manual page.</p>
<p>If you require additional assistance or want to discuss bugs, features
 or enhancements, write to the <a href="mailto:miros-discuss@mirbsd.org">mailing
 list</a> (or <a href="mailto:postmaster@mirbsd.org">subscribe</a> to it).
 The mailing list can be reached <a href="nntp://news.gmane.org/gmane.os.miros.general">via
 NNTP</a> or at the <a href="http://marc.info/?l=miros-discuss">MARC web
 archive</a> (or <a href="http://news.gmane.org/gmane.os.miros.general">GMane
 Loom</a>) as well.
 Joining the IRC channel at <a href="http://freenode.net/">Freenode</a>
 (irc.freenode.net:6667) <tt>#!/bin/mksh</tt> (no joke, this is really the
 channel’s name) and <tt>#ksh</tt> (where you must distinguish AT&amp;T ksh from
 mksh though) is recommended as well.</p>

<h2 id="build">Installation</h2>
<p>Skip to the section about being <a href="#otheros">included in operating
 environments</a> unless you really want to compile mksh from source yourself
 or create a package for your operating system of choice.</p>
<p>First off, you have to download the source code from any of the mirrors
 listed below, or any other mirror you know of. Official source code
 distributions are a cpio(1) compressed “old-style” (portable octal) archive,
 compressed with gzip(1) (zlib’s deflate algorithm) and digitally signed with
 gzsig(1) using the MirOS Project’s <a href="/gzsigkey.cer">current signature
 key</a>. Please verify the signature <em>as well as</em> the hashes and/or
 checksums below, so you’re sure the content is intact and the version number
 on the archive is correct. If you require source code in tar(1)’s “ustar”
 format, check the Debian Project for availability, although they often do
 not carry the latest version. The pax(1) utility (the POSIX Archiver) can
 extract from the CPIO distfile and is available even on a stock Microsoft®
 Windows® installation.</p>
<h3 id="mirrors">Known Mirrors</h3><ul>
 <li><a href="https://www.mirbsd.org/MirOS/dist/mir/mksh/mksh-R37c.cpio.gz">https://www.mirbsd.org/MirOS/dist/mir/mksh/mksh-R37c.cpio.gz</a></li>
 <li><a href="http://pub.allbsd.org/MirOS/dist/mir/mksh/mksh-R37c.cpio.gz">http://pub.allbsd.org/MirOS/dist/mir/mksh/mksh-R37c.cpio.gz</a></li>
</ul>
<h3 id="hashes">Checksums and Hashes</h3><ul>
 <li>RMD160 (mksh-R37c.cpio.gz) = 3403ae2195a1f369df2ee64fbb3ec2a4c62d2212</li>
 <li>TIGER (mksh-R37c.cpio.gz) = d06fd072a26d552047d4597e0f65f5aaa1d1fb38d21014ce</li>
 <li>3018305415 268074 /MirOS/dist/mir/mksh/mksh-R37c.cpio.gz</li>
 <li>MD5 (mksh-R37c.cpio.gz) = ecd6b95dbdb5ead1fc065a3044142379</li>
 <li style="list-style:none;">All official distfiles are gzsig(1)d.</li>
</ul>

<h3 id="decomp">Decompression</h3>
<p>Use any of the following syntaxes to extract the distfile; you’ll get the
 idea soon. Some web browsers (prominently, Mozilla® and its derivates as well
 as Microsoft® Internet Explorer®) already inflate the distfile during
 download but do not remove the “.gz” extension; replace “gzip -dc” (gzcat)
 with “cat” if that happens for you.</p>
<p>The first example is using BSD paxtar (MirOS BSD, OpenBSD, NetBSD®), or
 “bsdtar” (DragonFly); the second and third use cpio(1) or pax(1) and are
 for most operating systems; the fourth is for Debian.</p><ul>
<li>$ tar xzf mksh-R37c.cpio.gz &amp;&amp; cd mksh</li>
<li>$ gzip -dc mksh-R37c.cpio.gz | cpio -mid &amp;&amp; cd mksh</li>
<li>$ gzip -dc mksh-R37c.cpio.gz | pax -r &amp;&amp; cd mksh</li>
</ul>

<h3 id="compile">Compilation</h3>
<p>Now you’re in the source code directory; <tt>Build.sh</tt> does all the
 magic for you. In theory, invoking the command<br />
 <tt>% /bin/sh ./Build.sh</tt><br />
 should work. Relative paths can be used too, for example, instead of cd(1)ing
 to the source directory, you could’ve done<br />
 <tt>% mkdir build; cd build; /bin/sh ../mksh/Build.sh</tt></p>
<p>The build script requires a bourne shell (Solaris <tt>/bin/sh</tt>, the <a
 href="http://heirloom.sourceforge.net/sh.html">Heirloom sh</a>, DEC OSF/1
 V2.0 <tt>/bin/sh</tt>), korn shell (ksh, ksh88, ksh93, pdksh, mksh, oksh,
 maybe the MKS ksh), POSIX shell (posh, <tt>/usr/xpg4/bin/sh</tt>, ash,
 dash), or a super-set (GNU bash) to work; the Z Shell sometimes works as
 well, but the ULTRIX <tt>/bin/sh</tt> or the C shell (csh, tcsh) or “bsh”
 or a scripting shell like the wish won’t. Accepted arguments are:</p><ul>
<li><tt>-combine</tt> – all-in-one build (gcc4, mksh R37 and up)</li>
<li><tt>-j</tt> – parallel build (mksh R31d and up)</li>
<li><tt>-llvm[=…]</tt> – compile to bytecode; option arguments (or, if none
 given, ‘-std-compile-opts’) are passed to LLVM opt (mksh R36b and up)</li>
<li><tt>-Q</tt> – be (only) a little less verbose</li>
<li><tt>-r</tt> – don’t try to build a pre-formatted version
 of the manual page using nroff(1) if found – <em>recommended</em></li>
</ul>
<p>The build script also honours the following environment variables:</p><ul>
<li><tt>CC</tt> (gcc) – the C compiler used</li>
<li><tt>CFLAGS</tt> (-O2 / -xO2; on HP-UX/IA64 also -mlp64 / +DD64) –
 optimiser and other compiler flags used</li>
<li><tt>CPPFLAGS</tt> (no default) – additional cpp(1) flags</li>
<li><tt>LDFLAGS</tt> (set on AIX for libcrypt) – additional CCLD flags</li>
<li><tt>LIBS</tt> (-lcrypt on Interix; empty otherwise) – additional
 libraries to pull in</li>
<li><tt>NOWARN</tt> (-Wno-error / -errwarn=%none) – $CC option to disable
 bailing out at errors; used during mirtoconf checks</li>
<li><tt>NROFF</tt> (nroff; “nroff -c” with GNU groff) – the manual page
 processor used unless <tt>-r</tt> is given</li>
<li><tt>TARGET_OS</tt> (uname -s || uname) – the operating system to compile
 for; set this during cross compilation; valid: AIX BeOS (not yet) BSD/OS
 CYGWIN* Darwin DragonFly FreeBSD GNU (HURD) GNU/kFreeBSD Haiku (not yet)
 HP-UX Interix IRIX* Linux MidnightBSD Minix MirBSD NetBSD OpenBSD OSF1
 Plan9 (not yet) PW32* (not yet) QNX SunOS syllable (not yet) ULTRIX UWIN*</li>
</ul>
<p>If <tt>CPPFLAGS</tt> contain any of the following definitions, the resulting
 binary will be compiled with a specific flavour:</p><ul>
<li><tt>-DMKSH_SMALL</tt> – build a really small mksh(1), e.g. for embedded
 systems</li>
<li><tt>-DMKSH_ASSUME_UTF8</tt> – do not use setlocale(3) or
 nl_langinfo(CODESET); assume the terminal is always in UTF-8 mode</li>
<li><tt>-DMKSH_BINSHREDUCED</tt> – include code to automatically “set -o
 posix” to reduce functionality if called as <tt>sh</tt> or <tt>-sh</tt></li>
<li><tt>-DMKSH_CLS_STRING</tt> – the string to send to the terminal to clear
 the window (default: <tt>"\033[;H\033[J"</tt>)</li>
<li><tt>-DMKSH_CONSERVATIVE_FDS</tt> – use less filedescriptors (32/10 ipv
 56/24), e.g. if the system supports few (mksh R37c and up)</li>
<li><tt>-DMKSH_NOPWNAM</tt> – if MKSH_SMALL is not set, still omit getpwnam(3)
 calls in order to not pull in the nsswitch or PAM libraries</li>
<li><tt>-DMKSH_NOVI</tt> – if this or MKSH_SMALL is set, the vi command line
 editing mode (which is orphaned anyway, yet functional) is omitted</li>
<li><tt>-DUSE_REALLOC_MALLOC=0</tt> – if <tt>realloc(NULL, n)</tt> is not
 equivalent to <tt>malloc(n)</tt> (n &gt; 0) as ANSI C89 prescribes</li>
</ul>
<p>You can override certain mirtoconf checks by setting environment variables
 like <tt>HAVE_REVOKE=0</tt> (default for Linux) – if these are set to 0 or 1,
 the values are used; if unset, the values are probed (unless overridden by a
 different check, such as MKSH_SMALL), if set to ‘x’ the probe is forced.<br />
 Useful items to enable/disable are HAVE_MKNOD and HAVE_READLINE (set to 0 to
 disable, set to x to re-enable for MKSH_SMALL), HAVE_SETLOCALE_CTYPE (set to
 0 if you know that it won’t ever return UTF-8), HAVE_PERSISTENT_HISTORY (0 to
 not include this feature), HAVE_FLOCK_EX (if flock or mmap do not work on
 files), HAVE_EXPSTMT (if <tt>({</tt> expression statements are buggy).</p>

<h4 id="oespec">Operating Environment specific notes</h4>

<h5 id="oe_ack">Compiler: ACK</h5>
<p>Support for <a href="http://www.cs.vu.nl/ack/">ACK on Minix 3</a> has
 been added in mksh R37c with a workaround a known ACK bug (the "const"
 bug); it is now perfectly usable. Support for <a
 href="http://tack.sourceforge.net/">other ACK versions</a> or targets can
 be user-contributed.</p>

<h5 id="oe_bcc">Compiler: Borland C++ Builder</h5>
<p>This compiler is somewhat supported in mksh R30 with UWIN’s cc wrapper.
 (We haven’t been able to produce a working executable though.)</p>

<h5 id="oe_decc">Compiler: DEC/Compaq/HP C for OSF/1 and Tru64</h5>
<p>This compiler is fully supported with mksh R33b (partial support did
 appear earlier).</p>
<p>The ucode based compiler, linker and loader for Digital UNIX (OSF/1)
 V2.0 on MIPS is supported since mksh R36. It may, however, be forced to
 link statically to work around a bug in the toolchain.</p>

<h5 id="oe_dmc">Compiler: Digital Mars</h5>
<p>This compiler is somewhat supported in mksh R30 with UWIN’s cc wrapper
 and a few kludges. (We haven’t been able to produce a tested executable
 though, due to general stability issues with the UWIN platform.)</p>

<h5 id="oe_gcc">Compiler: GCC</h5>
<p>The GNU C Compiler 1.42, 2.7.2.1, 2.7.2.3, egcs (gcc 2.95) and the GNU
 Compiler Collection (gcc 3.x, 4.x) are known to work, but not all versions
 work on all targets.
 Specific C flags, known extensions, etc. are autoprobed; cross-compilation
 works fine. Use of gcc 4.x is discouraged because of several dangerous changes
 in how the optimiser works; it is possible to work around their trading off
 reliability for benchmark-only speed increases, but because mksh developers
 do not use gcc 4.x this will have to be user-contributed. On the other hand,
 gcc 3.x (in some cases 2.x) is the best choice for compiling mksh.</p>
<p>On BSDi BSD/OS, where gcc 1.42 and gcc 2.7.2.1 are available, the cc(1)
 manual page mentions that gcc 1.42 produces more reliable code, so we
 recommend to build mksh with <tt>CC=cc</tt> (gcc1) instead of <tt>CC=gcc</tt>
 or <tt>CC=gcc2</tt> there instead.</p>
<p>Since mksh uses ProPolice, the Stack-Smashing Protector, some GCC versions’
 compilates require additional shared libaraies.</p>

<h5 id="oe_hpc">Compiler: HP C/aC++</h5>
<p>HP’s C compiler (/usr/bin/cc on HP-UX) is supported in mksh R30 and above;
 on IA64, only the LP64 model can be used; mksh segfaults in the ILP32 module
 (or rather, the system libraries do, I think), so it is default. PA-RISC too
 works fine, so this compiler is a primary choice.</p>

<h5 id="oe_xlc">Compiler: IBM XL C/C++ / VisualAge</h5>
<p>IBM xlC 9.0 on AIX 5.3 is supported in mksh R30 and above.</p>
<p>IBM xlC 8.0 on Linux/POWER and IBM xlC 6.0β on MacOS X are on the TODO.</p>
<p>IBM xlC 7.0 on AIX 5.2 is supported in mksh R35c and above.</p>

<h5 id="oe_icc">Compiler: Intel C/C++/Fortran</h5>
<p>ICC emulates GCC quite well (too well for my taste), is fully supported in
 mksh R30 and above on several platforms, but spits out <strong>lots</strong>
 (and I <em>mean</em> huge ugly lots) of bogus warnings during compile. We’re
 not going to work around these; let Intel fix their compiler instead. Some of
 these warnings were even responsible for bugs in mksh.</p>
<p>I could not get the Intel Compiler 10 for Windows® to work.</p>
<p>mksh enables the ICC stack protector option automaticaly. Compilates
 usually require the Intel shared libraries to be around.</p>

<h5 id="oe_llvm">Compiler: LLVM</h5>
<p>Apple llvm-gcc from Xcode 3.1 had full success with mksh R34.</p>
<p>Vanilla <a href="http://llvm.org/">llvm-gcc</a> works fine as well.</p>
<p>Vanilla <a href="http://clang.llvm.org/">llvm-clang</a> starting at
 r58935 produces working code with mksh R36b and up.</p>

<h5 id="oe_msc">Compiler: Microsoft® C/C++</h5>
<p>Support for the Microsoft® C Compiler on Interix and UWIN, with the
 respective <tt>/usr/bin/cc</tt> wrappers, appeared in mksh R30.
 The following product versions have been tested:</p>
<p><tt>CL.EXE: Microsoft (R) 32-bit C/C++ Standard Compiler Version 13.00.9466 for 80x86<br />
 LINK.EXE: Microsoft (R) Incremental Linker Version 7.00.9466</tt><br />
 (both are part of the .NET Common Language Runtime redistributable)</p>
<p><tt>CL.EXE: Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 14.00.50727.42 for 80x86<br />
 LINK.EXE: Microsoft (R) Incremental Linker Version 8.00.50727.42</tt><br />
 (both are part of Visual Studio 2005 C++ Expreß)<br />
 You’ll have to change Interix’ cc(1) wrapper though: replace <tt>/Op</tt>
 with <tt>/Gs-</tt> to disable the stack checks (missing support in libc
 for them, they used to be off by default) and remove <tt>/Ze</tt>.</p>
<p>On Interix (SFU 3.5), this compiler is maturely usable and a good choice.</p>
<p>On GNU/Cygwin, using <a href="http://interix-wgcc.sourceforge.net/">wgcc</a>
 it <em>might</em> be possible to use this compiler. I could not test that yet,
 though.</p>
<p>On UWIN, this is usable as well.</p>

<h5 id="oe_mpp">Compiler: MIPSpro</h5>
<p>Support for SGI’s MIPSpro compiler on IRIX appeared in mksh R33b.</p>

<h5 id="oe_nwcc">Compiler: nwcc</h5>
<p>Support for nwcc appeared in mksh R36b, although the compiler itself
 is still slightly broken. It has worked for a while without explicit
 <tt>Build.sh</tt> support, though.</p>

<h5 id="oe_pcc">Compiler: PCC (BSD)</h5>
<p>Support for the Caldera/SCO UNIX® based, BSD-licenced portable C compiler
 in the <a href="http://pcc.ludd.ltu.se/">ragge version</a> has been added
 with mksh R31d. Versions from end of April 2008 onwards are known to work
 reliably, even with -O enabled.</p>
<p>The compiler itself rarely works on GNU/Linux or Darwin due to GNUisms,
 assembler problems, etc. though.</p>

<h5 id="oe_sun">Compiler: SUNpro</h5>
<p>Support for the <a href="http://developers.sun.com/sunstudio/">SUN Studio
 12</a> compiler (cc 5.9) as well as cc 5.8 appeared in mksh R30; other
 versions might be supported as well. This compiler is a primary choice.</p>
<h6>Using SUNWcc on MirBSD</h6>
<pre> $ SP=/home/tg/Misc/suncc/sunstudio12
 $ LD_LIBRARY_PATH=$SP/prod/lib/sys:$SP/prod/lib CC=$SP/prod/bin/cc \
   LDFLAGS="-Yl,$SP/S" sh /usr/src/bin/mksh/Build.sh -r</pre>

<h5 id="oe_tcc">Compiler: tcc (Tiny C)</h5>
<p>Support for Fabrice Bellard’s tcc appeared in mksh R31, although its
 unability to do ‘-E’ in older versions gave us some headache, and glibc
 currently makes it impossible to link the final executable.</p>

<h5 id="oe_t15">Compiler: TenDRA (maybe Ten15 too)</h5>
<p>Support for TenDRA appeared in mksh R31 and appears to be solid; mksh
 uses the ‘system’ profile for compiling by default. Users who wish to
 build mksh with a different profile are welcome to help to port it.</p>
<p>See <a href="#oe_bsu">ULTRIX</a> for an example of getting a ‘POSIX’
 profile to work.</p>

<h5 id="oe_muc">Compiler: DEC ucode (MIPS CC)</h5>
<p>Since mksh R33c, ucode on Ultrix is fully supported.</p>

<h5 id="oe_diet">Toolchain: dietlibc</h5>
<p>Fefe’s dietlibc works in mksh R34, although his opinion towards certain
 standards, such as <tt>caddr_t</tt>, strcasecmp(3), etc. are weird.</p>

<h5 id="oe_klcc">Toolchain: klibc</h5>
<p>klibc (with stock klcc as compiler wrapper) is currently missing a
 few syscalls, but the Debian unstable version with these added worls.</p>

<h5 id="oe_aix">OS: AIX</h5>
<p>Support for AIX with xlC appeared in mksh R30.</p>
<p>If passing custom LDFLAGS, don’t forget the export symbols required for
 using libcrypt. If passing custom LIBS, don’t forget <tt>-lcrypt</tt>.</p>

<h5 id="oe_beos">OS: BeOS / Haiku</h5>
<p>ahoka@ has begun porting, but it doesn’t work yet.</p>

<h5 id="oe_bsi">OS: BSDi BSD/OS</h5>
<p>BSD/OS 3.1 works fine with mksh R33.</p>

<h5 id="oe_cyg">OS: GNU/Cygwin</h5>
<p>This operating environment is supported as much as it adheres to standard
 POSIX/SUSv3 conformant things. No workarounds for <tt>.exe</tt> suffixes or
 other platform-specific quirks have been or will be added.</p>

<h5 id="oe_osx">OS: Darwin / Mac OSX</h5>
<p>Works pretty well.</p>

<h5 id="oe_dfl">OS: DragonFly BSD</h5>
<p>Perfect choice. Note <tt>/bin/sh</tt> compatibility needs a quirk.</p>

<h5 id="oe_bsf">OS: FreeBSD</h5>
<p>Perfect choice. Note <tt>/bin/sh</tt> compatibility needs a quirk.</p>

<h5 id="oe_hurd">OS: GNU/HURD</h5>
<p>This operating system is supported (on i386) since R29 but not well
 tested. mksh is part of Debian GNU/HURD, so it is expected to work.</p>

<h5 id="oe_kbsd">OS: GNU/k*BSD</h5>
<p>This operating environment has been supported for quite a while as part
 of Debian and somewhat tested.</p>

<h5 id="oe_linux">OS: GNU/Linux</h5>
<p>While POSIX does not apply to “GNU’s Not Unix”, the <a
 href="http://www.pathname.com/fhs/pub/fhs-2.3.html#SPECIFICOPTIONS2">FHS</a>
 (ex-FSSTND) does; please convince your distributor to move ed to /bin/ed if
 not already done. Manual page installation paths are not standardised in
 older distributions either.</p>
<p>Besides glibc (GNU libc), dietlibc (from Fefe), µClibc (embedded), and
 libc5 (on Linux 2.0.38) work, but locale detection is not automatic.</p>
<p>mksh can be used as /bin/sh on Debian and similarly strict distributions,
 which allow to use e.g. ash/dash there as well.</p>

<h5 id="oe_hpux">OS: HP-UX</h5>
<p>Support for HP-UX with GCC appeared in mksh R29 and works with HP’s C
 compiler and is no longer experimental in mksh R30. Please use stty(1) to
 make the terminal sanely usable.</p>
<p>If passing custom CFLAGS, don’t forget <tt>-mlp64</tt> (GCC) or
 <tt>+DD64</tt> on Itanium.</p>

<h5 id="oe_interix">OS: Interix</h5>
<p>We have only tested SFU 3.5 on Windows® 2000, not SUA on Windows® 2003 SR1
 or the version integrated into Vista.</p>
<p>As the Unix Perl which comes with Interix is too old, and the ActiveState
 Perl has… other issues, to run the regression tests, please install Perl from
 <a href="http://www.pkgsrc.org/">NetBSD® pkgsrc®</a> instead.</p>
<p>As of mksh R30, the native compiler (cc(1)) is supported in addition
 to gcc, calling Microsoft C. Do not use the c89(1) wrapper.</p>
<p>If passing custom LIBS, don’t forget to add <tt>-lcrypt</tt> or any other
 library providing arc4random(3).</p>
<p>mksh can replace /bin/ksh and /bin/sh without any problems.</p>

<h5 id="oe_sgi">OS: IRIX</h5>
<p>Support for IRIX64 6.5 appeared in mksh R33b.</p>

<h5 id="oe_mnbsd">OS: MidnightBSD</h5>
<p>mksh is part of MidnightBSD 0.2-CURRENT and above and used as native
 /bin/ksh; it can be used as /bin/sh as well with a quirk.</p>
<p>MidnightBSD 0.3 uses mksh as <tt>/bin/sh</tt> indeed.</p>

<h5 id="oe_minix">OS: Minix</h5>
<p>Minix 3 is supported starting mksh R37b (gcc), R37c (ACK/adk cc).
 Minix 1 and Minix 2 will never be supported due to size constraints on
 16-bit platforms, unless a user contributes code.</p>
<p>Minix 3 contains a <tt>/usr/bin/ed</tt> which, even if copied to the
 correct directory (<a href="#editor"><tt>/bin</tt></a>), will fail the
 regression tests due to bugs. A modern ed(1), if compiled, might help
 with it similarily to QNX, but MirBSD ed needs very many patches, so
 this was not tried.</p>

<h5 id="oe_bsm">OS: MirBSD</h5>
<p>Perfect choice. This is where mksh comes from.</p>

<h5 id="oe_bsn">OS: NetBSD</h5>
<p>Perfect choice.</p>
<p>Starting with NetBSD 1.6, mksh can replace /bin/ksh and /bin/sh without
 any problems. On NetBSD 1.5, mksh can only replace /bin/ksh safely.</p>

<h5 id="oe_bso">OS: OpenBSD</h5>
<p>The setlocale(3) call in OpenBSD’s libc will always return the “C”
 locale and therefore has been disabled by default.</p>
<p>mksh can replace /bin/ksh and /bin/sh without any problems. mksh is
 supposed to be a superset of oksh (except GNU bash-style PS1, weird
 POSuX character classes, and an incompatible ulimit builtin change).</p>

<h5 id="oe_osf1">OS: DEC/Compaq OSF/1, Compaq/HP Tru64</h5>
<p>Digital Unix is somewhat supported using gcc as of mksh R31b.
 With mksh R33b, many more versions and the native compiler work.</p>

<h5 id="oe_plan9">OS: Plan 9</h5>
<p>Plan 9 is not supported yet – we were able to create an executable, but
 it did not return to the prompt after running a non-builtin command; this
 is job control issues, and patches are welcome. (Note this is for R37 and
 below; R37b might actually work, but someone would have to test this.)</p>
<p>Due to the unavailability of ttys, job control will never be supported.</p>
<p>The APE (ANSI’n’POSIX Environment) is required to build mksh; I don’t
 remember which compiler I used, but I think it was GCC.</p>

<h5 id="oe_pw32">OS: PW32 on Win2k</h5>
<p>PW32 is not supported yet – killpg(3) is missing, and
 it’s possible that PW32 and Minix 3, at least, need job control disabled
 or worked around. Maybe peek at how ash/bash for PW32 do it. gcc works.</p>

<h5 id="oe_qnx">OS: QNX/Neutrino</h5>
<p>QNX/Neutrino (Perl: “nto”) support appeared in mksh R36b.</p>
<p>The QNX ed(1) fails the regression tests due to being broken; compile
 the MirBSD ed and place it in <tt>/bin/</tt> to fix this.</p>

<h5 id="oe_solaris">OS: Solaris</h5>
<p>Solaris is full supported since “forever” with gcc, and since mksh R30
 with Sun’s C compiler. Both 32-bit and 64-bit modes work; 64-bit mode is
 not enabled by default by <tt>Build.sh</tt>, you must do that manually by
 passing CFLAGS of <tt>-O2 -m64</tt> or <tt>-xO2 -xarch=generic64</tt>.</p>
<p>Solaris does not come with Berkeley mdoc macros for nroff, so using
 the HTML or PDF versions of the manual pages or pregenerating a catman
 page on another OS is required.</p>

<h5 id="oe_syll">OS: Syllable Desktop</h5>
<p>This does not yet work due to a signal passing bug in the AtheOS kernel,
 we were told by their developers. However, mksh R33 is at the same level
 of support as Plan 9 now.</p>
<p>Chances are a more recent mksh works with a more recent Syllable.</p>
<p>Syllable Server will work, as it is, <em>at the moment</em>, “just” a
 GNU/Linux distribution with a different GUI. This may change though.</p>

<h5 id="oe_bsu">OS: ULTRIX</h5>
<p>Even on ULTRIX 4.5, mksh R33c works fine. The system ksh must be used
 for running the <tt>Build.sh</tt> script, though.</p>
<p>You however must pass the <tt>-YPOSIX</tt> option to the ucode compiler,
 as the default <tt>-YBSD</tt> profile produces a broken executable (spins
 instead of starting up), and the <tt>-YSYSTEM_FIVE</tt> profile does not
 even compile. See <a href="#oe_t15">TenDRA</a> for another OE which has
 issues with different OE profiles. (<tt>Build.sh</tt> takes care of this
 automatically.)</p>

<h5 id="oe_uwin">OS: UWIN-NT</h5>
<p>Compilation of mksh R30 on UWIN works with several compilers (bcc, dmc,
 msc – I could not get gcc-egcs, gcc-2.95, gcc-mingw, icc to work) but the
 platform itself is very flakey, and even some regression tests crash, due
 to target limitations apparently. Within these limits, mksh is usable.</p>

<h3 id="postbuild">After compiling</h3>
<p>The <tt>Build.sh</tt> script generates an executable (“mksh”, except on
 GNU/Cygwin, where it is called “mksh.exe”), a shell script to use the newly
 built mksh to run the regression test suite (“test.sh”), and (unless the
 <tt>-r</tt> option was given) a pre-formatted manual page (“mksh.cat1”).
 It also lists installation instructions unless <tt>-Q</tt> was provided.
 Now it’s the time to run<br /><tt>% ./test.sh -v</tt><br />
 in order to see if the shell works.</p>
<p>To actually install mksh, copy the binary to some place in $PATH, i.e.
 /bin/mksh, $HOME/.bin/mksh, /usr/local/bin/mksh, or whatever your packaging
 system wants; strip it and run chmod 555 on it. (This can easily be achieved
 with install(1) – on Solaris, this is /usr/ucb/install not /usr/bin/install –
 with the arguments -c, -s, -m 755¹, and -o/-g. ① with 555, strip(1) cannot
 write the file any more, chmod 555 afterwards.) Also append its installation
 path to <tt>/etc/shells</tt>, install the <tt>dot.mkshrc</tt> file (usually
 alongside with the copyright file and other documentation), copy it to
 <tt>/etc/skel/.mkshrc</tt> if your operating environment has this means to
 include default dotfiles; install either the catman page (mksh.cat1) to,
 for example, /usr/share/man/cat1/mksh.0, or the mdoc page (mksh.1) to the
 standard location (/usr/share/man/man1/ or /usr/man/man1/ or whatever your
 operating environment requires). The manual page requires the Berkeley mdoc
 macros (either the BSD or the GNU groff version) to be installed during
 formatting time.</p>
<p>Note that a <tt>~/.mkshrc</tt> file will <em>not</em> be executed if
 <tt>$ENV</tt> is set and not empty, nor is there an <tt>/etc/mkshrc</tt>.</p>

<h2 id="upgrade">For packagers: Upgrades</h2>
<p><strong>Note:</strong> This is <em>not</em> <a href="#clog">the
 ChangeLog</a>, these are the packager-visible upgrade notes regarding
 changes in the build system (<tt>Build.sh</tt> and friends, compiler
 support, packaging conventions, bad examples, etc).</p>
<p>mksh R37c now honours <tt>-DMKSH_CONSERVATIVE_FDS</tt> and ACK.
 The regression test suite keeps <tt>LOCPATH</tt> around.</p>
<p>mksh R37b now honours <tt>-DMKSH_UNEMPLOYED</tt> for the jobless
 mode required on, at least, Minix 3.</p>
<p>Freshmeat announcements <strong>have ceased</strong> because the
 site switched to a very user-unfriendly HTML (especially Lynx). Use
 the <a href="@@RELPATH@@tag_mksh.rss">RSS feed</a> instead.</p>
<p>mksh R37 has a new ‘-combine’ <tt>Build.sh</tt> option. The
 <tt>-DMKSH_AFREE_DEBUG</tt> flag is gone due to a new allocator,
 which however honours <tt>-DUSE_REALLOC_MALLOC=0</tt>.</p>
<p><a href="mksh_old.htm#upgrade">older entries</a></p>

<h2 id="otheros">Inclusion in other operating systems</h2><ul>
<li><a href="http://www.debian.org/">Debian</a> GNU/Linux, GNU/HURD and
 GNU/kFreeBSD have an <a href="http://packages.debian.org/mksh">mksh package</a>
 maintained by the MirOS Project and uploaded (sponsored) by Bastian “waldi”
 Blank, Otavio Salvador, and Patrick Schönfeld; the debconf questions were taken
 from dash. We do not provide an inofficial source package any longer.</li>
<li><a href="http://www.gentoo.org/">Gentoo GNU/Linux</a> has an mksh <a
 href="http://sources.gentoo.org/viewcvs.py/gentoo-x86/app-shells/mksh/">ebuild</a>
 created by <a href="http://www.hboeck.de/">Hanno Böck</a>.</li>
<li><a href="http://fedoraproject.org/">Fedora</a> GNU/Linux 8, 9, 10, 11,
 and <a href="http://www.redhat.com/rhel/">RHEL</a> 4 and 5 (via EPEL) now
 officially contain <a
 href="http://fedoraproject.org/wiki/Packages/mksh">an mksh package</a> (<a
 href="http://cvs.fedoraproject.org/viewvc/devel/mksh/mksh.spec">spec
 file</a>). There are some <a
 href="http://fedoraproject.org/wiki/EPEL/FAQ#How_can_I_install_the_packages_from_the_EPEL_software_repository.3F">Instructions</a>
 for activating EPEL (RHEL only), then just type <tt>yum install mksh</tt>.</li>
<li>The <a href="http://en.opensuse.org/Build_Service">OpenSuSE Build
 Service</a> provides an mksh package inside the <a
 href="http://download.opensuse.org/repositories/shells/SLES_9/src/">shells repo</a>,
 thanks to Pascal “loki” Bleser and Marcus “darix” Rückert; the RPMs are
 available for various distributions as well as as SRPM (source RPM).
 The inofficial <em>portable</em> SRPM has been retired; the OBS SRPM
 has been changed to be buildable on Debian and MirBSD as well as include
 the contributed <tt>arc4random.c</tt> file. There are <a
 href="http://download.opensuse.org/repositories/home:/mirabile/CentOS_5/src/">more
 downloads</a> available, just browse a little.</li>
<li><a href="http://finkproject.org/">Fink</a> delivers an <a
 href="http://pdb.finkproject.org/pdb/package.php/mksh">mksh package</a>
 from Andreas “gecko2” Gockel.</li>
<li><a href="http://www.sourcemage.org/">SMGL</a> (Sourcemage GNU/Linux) has an
 <a href="http://distro.ibiblio.org/pub/linux/distributions/sourcemage/codex/test/shell-term-fm/mksh/">mksh
 spell</a> in their grimoire, developed by the MirOS Project together with
 Daniel “morfic” Goller, updated by Thomas “sobukus” Orgis.</li>
<li>In the <a href="https://www.freewrt.org/trac/">FreeWRT Embedded GNU/Linux
 Appliance Development Kit (meta distribution)</a>, the <a
 href="https://www.freewrt.org/svn/trunk/freewrt/package/mksh/">mksh
 package</a> is maintained by us. mksh is also the default shell in FreeWRT
 trunk (soon to be 1.1) and above.</li>
<li><a href="http://openwrt.org/">OpenWrt Embedded GNU/Linux Distribution</a>
 also <a href="https://dev.openwrt.org/browser/packages/utils/mksh">provides
 mksh</a> on ADSL/WLAN routers thanks to Felix “nbd” Fietkau.</li>
<li><a href="http://www.ubuntu.com/">Ubuntu GNU/Linux</a>, <a
 href="http://www.nexenta.org/os">Nexenta OS</a> (GNU/Solaris), the <a
 href="http://grml.org/">grml</a> (and grml64) Live-CD, and other Debian
 derivates also have an mksh package; Knoppix, SIDUX, and grml-small do
 <em>not</em> contain or offer mksh. <em>Note</em>: We need URLs to the
 packages for these, can anyone provide any?</li>
<li><a href="http://www.archlinux.org/">Arch GNU/Linux</a> users can install
 an <a href="http://aur.archlinux.org/packages.php?do_Details=1&amp;ID=3431">mksh
 package</a> by Daniel “homsn” Hommel.</li>
<li><a href="http://www.freebsd.org/">FreeBSD®</a> Ports (for FreeBSD, very old
 <a href="http://www.dragonflybsd.org/">DragonFly BSD</a> versions and <a
 href="http://www.desktopbsd.net/">DesktopBSD</a>) also have a <a
 href="http://cvsweb.freebsd.org/ports/shells/mksh/">port</a> created by
 Andreas “ankon” Kohn and kept up to date by Martin “miwi” Wilke. It is
 unknown if this applies to <a href="http://www.pcbsd.org/">PC-BSD</a> too,
 but there’s no mksh PBI (yet?).</li>
<li><a href="http://www.midnightbsd.org/">MidnightBSD</a> uses <a
 href="http://cvsweb.midnightbsd.org/mports/shells/mksh/">mports</a>, a
 derivate of FreeBSD® ports. Naturally, they deliver mksh as well.
 MidnightBSD 0.2-CURRENT from 18th August 2007 onwards has mksh as both <a
 href="http://cvsweb.midnightbsd.org/src/contrib/mksh/"><tt>/bin/mksh</tt></a>
 and <a href="http://cvsweb.midnightbsd.org/src/bin/mksh/"><tt>/bin/ksh</tt></a>,
 i.e. it is the default MidnightBSD Korn shell. From 29 March 2009 onwards, it
 is also the default <tt>/bin/sh</tt> (since MidnightBSD 0.3).</li>
<li><a href="http://www.pkgsrc.org/">NetBSD® pkgsrc®</a> (native also on recent
 DragonFly BSD; available for many other operating systems as well) has a <a
 href="http://cvsweb.netbsd.org/bsdweb.cgi/pkgsrc/shells/mksh/">package</a>
 created by us and kept up to date by Blair Sadewitz and Adam “replaced” Hoka.
 We do not provide an inofficial source package any longer.</li>
<li>The <a href="http://wiki.netbsd.se/Desktop_Project">Desktop NetBSD
 project</a> also contains mksh; see the source of their <a
 href="http://cvsweb.netbsd.org/bsdweb.cgi/pkgsrc/meta-pkgs/desktop-gnome/Makefile">meta
 package</a>. This will provide their users with a modern, fast, secure,
 featureful shell and enhance the experience.</li>
<li><a href="http://beastiebox.sourceforge.net/">Beastiebox</a> also comes
 with mksh as an option. It’s NetBSD® based, mostly.</li>
<li>The MirPorts Framework brings mksh to OpenBSD, Mac OSX and Interix as
 well as older MirOS BSD versions, which have mksh as native Korn Shell.</li>
<li><a href="http://www.openbsd.org/">OpenBSD</a> ports do <em>not</em>
 package mksh, but an <a href="@@ABSPATH@@/MirOS/dist/mir/mksh/ports/mksh-obsdport.tgz">inofficial
 port</a> is available.</li>
<li>ChinaLinux mirrors (and apparently packages) mksh.</li>
<li>Some US-American Apple Users’ Group (the <a
 href="http://www.hmug.org/pub/MacOS_X/BSD/Applications/Shells/mksh/">HMUG</a>)
 packages mksh for Darwin, too.</li>
<li>Frugalware Linux contains a broken mksh package; the build logs show
 the problem is on their side. (XXX Someone has any URL for us?)</li>
<li>There are probably many more, please drop us a note!</li>
<li><a href="http://linux.softpedia.com/get/System/Shells/MirBSD-Korn-Shell-24602.shtml">Softpedia</a>
 lists mksh, just like the FSF/UNESCO directory.</li>
</ul>
<p>These packages are not official and have not always been tested by mksh
 developers; please keep this in mind.</p>

<h2 id="contrib">Other Shells and more</h2>
<p>mksh is a successor of pdksh but not affiliated with the pdksh
 developers or contributors. mksh is not affiliated with the AT&amp;T
 Korn Shell, its past or present owners, other than that both attempt
 to implement the Korn Shell programming language.</p>
<p>mksh targets users who desire a compact, fast, reliable, secure
 shell not cut off modern extensions; a shell with Unicode support;
 an actively developed, current, and portable product; one with
 developers that listen to their users’ requests and implement them
 if they actually make sense.</p>
<p>mksh aims to replace pdksh in all but very rare use cases (such as
 support for checking the Unix mbox) and in all operating environments
 (thus including patches from pdksh on e.g. Debian).</p>

<h3 id="co-diffs">Differences</h3>
<p>mksh is a direct descendant from the OpenBSD <tt>/bin/ksh</tt> and
 contains all of its bug fixes and enhancements <strong>except</strong>
 the “GNU bash-like <tt>$PS1</tt>” and “POSIX character class support
 in globbing” changes and the incompatible “ulimit can handle multiple
 limits in one invocation” difference. Some of the more weird diffs in
 oksh have not been merged either. The DeliLinux developer who
 is responsible for packaging oksh for GNU/Linux should instead use mksh
 and port that diff over (be careful to not break the fixes to the command
 line editing modes, these are subtilely broken in OpenBSD). Even better,
 the OpenBSD people should not only commit a port of mksh but replace their
 ksh with it (optionally retaining that GNU bash-like $PS1 stuff). The
 <tt>set -o emacs-usemeta</tt> command is no longer needed because the
 emacs editing mode has been changed for Unicode/UTF-8 mode, which adds a
 new <tt>set -o utf8-hack</tt> mode. The <tt>set -o sh</tt> command has
 been completely removed, <tt>set -o posix</tt> merely turns off brace
 expansion as side effect. There is no limit (well, 2³² – for now…) on
 array sizes any more. Many bugs and security holes have been closed in
 mksh and are still in oksh and OpenBSD ksh. The user interface has much
 less bugs and surprises; emacs editing mode is enabled by default.
 In contrast to oksh, <tt>set -o arc4random</tt> can be used to control
 which generator for <tt>$RANDOM</tt> is used.</p>
<p>mksh is the heir of pdksh and contains all the latest fixes from upstream
 (so ca. 1995) and Debian. It is the only pdksh derivate currently being
 under active development. See above for other
 differences. The code really has been cleaned up and no longer contains any
 material under licences more restrictive than the BSD licence.</p>
<p>AT&amp;T ksh88 and ksh93 compare to mksh substantially, but share no code;
 the user interface is slightly different especially for ksh88; many editing
 commands work (only slightly) differently as well. mksh implements many, but
 by far not all, ksh93 features, but most ksh88 features. No floating point.
 The last command of a pipeline is executed in a subshell.</p>
<p>mksh can do many things GNU bash can’t, for example better arrays, the
 ksh Co-processes, etc. but is much faster and smaller. In contrast to bash,
 mksh is still being actively developed (bash almost only receives small
 changes or weird stuff like programmable tab completion). GNU bash’s array
 initialiser syntax is not yet supported. We don’t aim at being fully bash
 compatible, but some of the surprises for converts will be removed. Funnily,
 bash4 now contains some things first introduced in mksh.</p>
<p>The Z shell (zsh) isn’t even remotely ksh compatible in its “emulate ksh”
 operation mode, and we don’t compare to it.</p>
<p>mksh is <em>mostly</em> bourne shell compatible (but ^ as alias for | is
 not supported, like most modern shells). mksh is also POSIX sh compatible.
 Some constructs are not supported, for example<br />
 <tt>((foo; bar) 2>&amp;1 || baz)</tt><br />which has to be rewritten as<br />
 <tt>( (foo; bar) 2>&amp;1 || baz)</tt><br />because ((…)) is shell arithmetics;
 brace expansion is turned on by default; etc.</p>
<p>mksh R33 supports more (later versions even more) bash/ksh93/zsh constructs
 than its predecessors; sometimes, not all cases (e.g. applying string trimming
 on arrays) are supported, but you probably will not notice that.</p>

<h2 id="regress">Official Testing</h2>
<p>The MirOS Project has tested mksh on the following operating systems,
 asked people to test, and hunted mksh down in these packaging systems:</p>
<!--
<h3 id="regress_dev">Development Versions post release</h3>
<ul>
 <li style="list-style:none;">– tests by the project, using Build.sh –</li>
 <li style="list-style:none;">– other build system integration –</li>
</ul>
-->
<h3 id="regress_rel">Current Release</h3>
<ul>
<li style="list-style:none;">– tests by the project, using Makefile –</li>
 <li>MirOS #10-current (i386 gcc3.4.6)</li>
 <li>MirOS #10-current (sparc gcc3.4.6)</li>
<li style="list-style:none;">– tests by the project, using Build.sh –</li>
 <li>MirOS #10-current (i386 clang58935mp0 llvm58935mp0)</li>
 <li>MirOS #10-current (i386 clang58935mp0 opt+llc+llvm58935mp0)</li>
 <li>MirOS #10-current (i386 llvmgcc4.2.1-Apple_5627mp2 llvm58935mp0)</li>
 <li>MirOS #10-current (i386 llvmgcc4.2.1-Apple_5627mp2 opt+llc+llvm58935mp0)</li>
 <li>MirOS #10-current (i386 pcc20081028-MirPorts-1)</li>
 <li>MirOS #10-current (i386 SUNWcc5.9 Linux_i386 2007/05/03, GNU ld 2.13.90.0.2 20020802)</li>
 <li>BSDi BSD/OS 3.1 #4 M300-043 (i386 gcc2.7.2.1)</li>
 <li>BSDi BSD/OS 3.1 #4 M300-043 (i386 gcc1.42)</li>
 <li>DragonFly 1.9-DEVELOPMENT Feb 17, 2007 (i386 gcc3.4.6)</li>
 <li>MidnightBSD 0.3-CURRENT (i386 gcc3.4.6-20080430)</li>
 <li>DEC OSF/1 X2.0-8 (Rev. 155) (mips cc3.0 ucode ld3.0) <em>without</em> testsuite check</li>
 <li>DEC ULTRIX 4.5 0 RISC (mips cc3.0 ucode ld3.0)</li>
 <li>HP Tru64 OSF/1 V5.1B 2650 (alpha Compaq C V6.5-011 Rev. 2650)</li>
 <li>HP Tru64 OSF/1 V5.1B 2650 (alpha gcc2.97-tru64-010710 alphaev56)</li>
 <li>Solaris 8 Generic_117350-41 sun4u (sparc gcc3.4.3)</li>
 <li>Solaris 8 Generic_117350-41 sun4u (sparc64 gcc3.4.3)</li>
 <li>Solaris 10 Generic_137111-08 sun4u (sparc gcc3.4.6)</li>
 <li>Solaris 10 Generic_137111-08 sun4u (sparc64 gcc3.4.6)</li>
 <li>Solaris 10 Generic_137111-08 sun4u (sparc:V8+ SUNWcc5.9 124867-08 2008/10/07, ld 5.10-1.489)</li>
 <li>Solaris 10 Generic_137111-08 sun4u (sparc64 SUNWcc5.9 124867-08 2008/10/07, ld 5.10-1.489)</li>
 <li>Cygwin_NT-5.0 1.5.25(0.156/4/2) 2008-04-17 12:11 i586 win2kSP2 (i386 gcc3.4.4)</li>
 <li>Debian GNU 5.0 sid GNU-Mach 1.3.99/Hurd-0.3 i686-AT386 (i386 gcc4.3.1-7)</li>
 <li>CentOS GNU/Linux 5.2 2.6.18-92.1.18.el5xen (amd64 gcc4.1.2-44)</li>
 <li>Debian GNU/Linux 4.0 etch 2.6.18-6-686 (i386 gcc1:3.3.6-15)</li>
 <li>Debian GNU/Linux 4.0 etch 2.6.18-6-686 (i386 gcc4.1.1-21)</li>
 <li>Debian GNU/Linux 4.0 lenny 2.6.18-6-686 (i386 gcc4.1.2-25)</li>
 <li>Debian GNU/Linux 4.0 lenny 2.6.18-6-686 (i386 gcc4.3.2-1.1)</li>
 <li>Debian GNU/Linux 4.0 lenny 2.6.18-6-686 (i386 TenDRA-4.1.2-18)</li>
 <li>ecce!GNU/Linux 1.00 2.0.38a (i386 libc5 gcc2.7.2.3) <em>except</em> locale support</li>
 <li>Minix 3 3.1.4~r4203? (i386 ACK)</li>
 <li>Minix 3 3.1.4~r4203? (i386 gcc)</li>
<li style="list-style:none;">– other build system integration –</li>
 <li>See the <a href="#otheros">Inclusion</a> section for general information</li>
 <li>Fedora GNU/Linux Core 9 2.6.18-128.1.1.el5 (i386 gcc4.3.0-8) <em>by x86-4 buildd via Koji/EPEL packager</em></li>
 <li>Fedora GNU/Linux Core 9 2.6.18-128.el5 (macppc gcc4.3.0-8) <em>by ppc8 buildd via Koji/EPEL packager</em></li>
 <li>Fedora GNU/Linux Core 9 2.6.18-128.el5 (ppc64 gcc4.3.0-8) <em>by ppc10 buildd via Koji/EPEL packager</em></li>
 <li>Fedora GNU/Linux Core 9 2.6.18-128.1.1.el5 (amd64 gcc4.3.0-8) <em>by x86-5 buildd via Koji/EPEL packager</em></li>
 <li>Fedora GNU/Linux Core 10 2.6.18-128.1.1.el5 (i386 gcc4.3.2-7) <em>by x86-6 buildd via Koji/EPEL packager</em></li>
 <li>Fedora GNU/Linux Core 10 2.6.18-128.el5 (macppc gcc4.3.2-7) <em>by ppc6 buildd via Koji/EPEL packager</em></li>
 <li>Fedora GNU/Linux Core 10 2.6.18-128.el5 (ppc64 gcc4.3.2-7) <em>by ppc4 buildd via Koji/EPEL packager</em></li>
 <li>Fedora GNU/Linux Core 10 2.6.18-128.1.1.el5 (amd64 gcc4.3.2-7) <em>by x86-1 buildd via Koji/EPEL packager</em></li>
 <li>Fedora GNU/Linux Core 11 2.6.18-128.1.1.el5xen (i386 gcc4.4.0-0.31) <em>by xenbuilder2 buildd via Koji/EPEL packager</em></li>
 <li>Fedora GNU/Linux Core 11 2.6.18-128.el5 (macppc gcc4.4.0-0.31) <em>by ppc2 buildd via Koji/EPEL packager</em></li>
 <li>Fedora GNU/Linux Core 11 2.6.18-128.el5 (ppc64 gcc4.4.0-0.31) <em>by ppc9 buildd via Koji/EPEL packager</em></li>
 <li>Fedora GNU/Linux Core 11 2.6.18-128.1.1.el5 (amd64 gcc4.4.0-0.31) <em>by x86-2 buildd via Koji/EPEL packager</em></li>
 <li>Red Hat GNU/Linux RHEL 4 2.6.18-128.1.1.el5xen (i386 gcc3.4.6-10) <em>by xenbuilder2 buildd via Koji/EPEL packager</em></li>
 <li>Red Hat GNU/Linux RHEL 4 2.6.18-128.el5 (macppc gcc3.4.6-10) <em>by ppc3 buildd via Koji/EPEL packager</em></li>
 <li>Red Hat GNU/Linux RHEL 4 2.6.18-128.1.1.el5xen (amd64 gcc3.4.6-10) <em>by xenbuilder2 buildd via Koji/EPEL packager</em></li>
 <li>Red Hat GNU/Linux RHEL 5 2.6.18-128.1.1.el5xen (i386 gcc4.1.2-44) <em>by xenbuilder2 buildd via Koji/EPEL packager</em></li>
 <li>Red Hat GNU/Linux RHEL 5 2.6.18-128.el5 (macppc gcc4.1.2-44) <em>by ppc2 buildd via Koji/EPEL packager</em></li>
 <li>Red Hat GNU/Linux RHEL 5 2.6.18-128.1.1.el5xen (amd64 gcc4.1.2-44) <em>by xenbuilder2 buildd via Koji/EPEL packager</em></li>
 <li>OpenSUSE GNU/Linux 10.3 2.6.27.21-0.1-xen (i386 gcc4.2.1) <em>by build16 buildd via OBS SRPM package</em></li>
 <li>OpenSUSE GNU/Linux 10.3 2.6.27.21-0.1-xen (amd64 gcc4.2.1) <em>by build19 buildd via OBS SRPM package</em></li>
 <li>OpenSUSE GNU/Linux 11.0 2.6.27.21-0.1-xen (i386 gcc4.3.1-20080507-r135036) <em>by build20 buildd via OBS SRPM package</em></li>
 <li>OpenSUSE GNU/Linux 11.0 2.6.27.21-0.1-xen (amd64 gcc4.3.1-20080507-r135036) <em>by build19 buildd via OBS SRPM package</em></li>
 <li>OpenSUSE GNU/Linux 11.1 2.6.27 (i386 gcc4.3.2-r141291) <em>by build24 buildd via OBS SRPM package</em></li>
 <li>OpenSUSE GNU/Linux 11.1 2.6.27 (amd64 gcc4.3.2-r141291) <em>by build14 buildd via OBS SRPM package</em></li>
 <li>SLES GNU/Linux 9 2.6.27.21-0.1-xen (i386 gcc3.3.3) <em>by build24 buildd via OBS SRPM package</em></li>
 <li>SLES GNU/Linux 9 2.6.27.21-0.1-xen (amd64 gcc3.3.3) <em>by build14 buildd via OBS SRPM package</em></li>
 <li>SuSE GNU/Linux Factory 2.6.29 (i386 gcc4.3.3-r144878) <em>by build16 buildd via OBS SRPM package</em></li>
 <li>SuSE GNU/Linux Factory 2.6.29 (amd64 gcc4.3.3-r144878) <em>by build24 buildd via OBS SRPM package</em></li>
 <li>CentOS GNU/Linux 5 2.6.27.21-0.1-xen (i386 gcc4.1.2-14) <em>by build14 buildd via OBS SRPM package</em></li>
 <li>CentOS GNU/Linux 5 2.6.27.21-0.1-xen (amd64 gcc4.1.2-14) <em>by build18 buildd via OBS SRPM package</em></li>
 <li>Fedora GNU/Linux 9 2.6.27.21-0.1-xen (i386 gcc4.3.0-8) <em>by build12 buildd via OBS SRPM package</em></li>
 <li>Fedora GNU/Linux 9 2.6.27.21-0.1-xen (amd64 gcc4.3.0-8) <em>by build15 buildd via OBS SRPM package</em></li>
 <li>Fedora GNU/Linux 10 2.6.27.21-0.1-xen (i386 gcc4.3.2-7) <em>by build11 buildd via OBS SRPM package</em></li>
 <li>Fedora GNU/Linux 10 2.6.27.21-0.1-xen (amd64 gcc4.3.2-7) <em>by build24 buildd via OBS SRPM package</em></li>
 <li>Mandriva GNU/Linux 2008 2.6.27.21-0.1-xen (i386 gcc4.2.2-0.RC.1mdv2008.0) <em>by build24 buildd via OBS SRPM package</em></li>
 <li>Mandriva GNU/Linux 2008 2.6.27.21-0.1-xen (amd64 gcc4.2.2-0.RC.1mdv2008.0) <em>by build26 buildd via OBS SRPM package</em></li>
 <li>Mandriva GNU/Linux 2009 2.6.27.21-0.1-xen (i386 gcc4.3.2) <em>by build16 buildd via OBS SRPM package</em></li>
 <li>Mandriva GNU/Linux 2009 2.6.27.21-0.1-xen (amd64 gcc4.3.2) <em>by build20 buildd via OBS SRPM package</em></li>
 <li>Red Hat GNU/Linux RHEL 4 2.6.27.21-0.1-xen (i386 gcc3.4.6-9) <em>by build20 buildd via OBS SRPM package</em></li>
 <li>Red Hat GNU/Linux RHEL 4 2.6.27.21-0.1-xen (amd64 gcc3.4.6-9) <em>by build26 buildd via OBS SRPM package</em></li>
 <li>Red Hat GNU/Linux RHEL 5 2.6.27.21-0.1-xen (i386 gcc4.1.2-14) <em>by build11 buildd via OBS SRPM package</em></li>
 <li>Red Hat GNU/Linux RHEL 5 2.6.27.21-0.1-xen (amd64 gcc4.1.2-14) <em>by build26 buildd via OBS SRPM package</em></li>
 <li>SLES GNU/Linux 10 2.6.27.21-0.1-xen (i386 gcc4.1.2-20070115) <em>by build24 buildd via OBS SRPM package</em></li>
 <li>SLES GNU/Linux 10 2.6.27.21-0.1-xen (amd64 gcc4.1.2-20070115) <em>by build14 buildd via OBS SRPM package</em></li>
</ul>
<h3 id="regress_old">Older Versions</h3>
<ul>
<li style="list-style:none;">– tests by the project, using Build.sh –</li>
 <li>MirOS #7-stable (sparc gcc2.95.3-078E)</li>
 <li>MirOS #10-current (i386 pcc20081028)</li>
 <li>FreeBSD 6.2-RELEASE (i386 gcc3.4.6-20060305)</li>
 <li>MidnightBSD 0.2.1-RELEASE-p2 (i386 pcc20081028-MirPorts-0)</li>
 <li>NetBSD 3.0_STABLE (i386 gcc3.3.3_nb3_20040520)</li>
 <li>OpenBSD 4.3 GENERIC#207 (zaurus gcc3.3.5)</li>
 <li>AIX 5.3 (powerpc gcc4.0.0_powerpc-ibm-aix5.1.0.0, LD 1.65 04/06/2005)</li>
 <li>AIX 5.3 32-bit (powerpc xlC9.0 070428, LD 1.65 04/06/2005)</li>
 <li>AIX 5.3 64-bit (powerpc xlC9.0 070428, LD 1.65 04/06/2005)</li>
 <li>Mac OSX Leopard 10.5.5 (9F33) Darwin 9.5.0 (amd64 gcc4.0.1-Apple_5484)</li>
 <li>Mac OSX Leopard 10.5.5 (9F33) Darwin 9.5.0 (i386 llvmgcc4.2.1-Apple_5555-LLVM_2039)</li>
 <li>Mac OSX Leopard 10.5.4 (9E17) Darwin 9.4.0 (i386 gcc4.0.1-Apple_5480)</li>
 <li>Mac OSX Leopard 10.5.4 (9E17) Darwin 9.4.0 (i386 gcc4.2.1-Apple_5558)</li>
 <li>Mac OSX Leopard Server 10.5.4 (9E17) Darwin 9.4.0 (macppc gcc3.3-20030304-Apple_1823)</li>
 <li>Mac OSX Leopard Server 10.5.4 (9E17) Darwin 9.4.0 (macppc gcc4.0.1-Apple_5465)</li>
 <li>Mac OSX Leopard Server 10.5.4 (9E17) Darwin 9.4.0 (macppc cross-llvmgcc4.2.1-Apple_5555-LLVM_2039)</li>
 <li>Max OSX iPhoneOS 2.0 (N82AP) Darwin 9.3.1 (arm cross-gcc4.0.1-Apple_5484 Apple SDK)</li>
 <li>Max OSX iPhoneOS 2.0 (N82AP) Darwin 9.3.1 (arm llvmgcc4.2.1-Apple_5555 Saurik iphone-gcc 4.2-20080604-1-8)</li>
 <li>QNX 6.3.2 2006/03/16-14:19:50EST (i386 gcc2.95.3)</li>
<li style="list-style:none;">– tests by third parties (Build.sh) –</li>
 <li>AIX 5.2 (powerpc xlC7.0) by Jupp Söntgen</li>
 <li>SGI IRIX64 6.5 (mips:R10K mipspro7.4.4m) by Elias Pipping</li>
 <li>SGI IRIX64 6.5 (mips:R10K gcc3.4.1) by Elias Pipping</li>
 <li>Zenwalk GNU/Linux 2.6.25.4 (i386 gcc4.2.3) by Olivier Duchateau</li>
<!--
<li style="list-style:none;">– other build system integration –</li>
 <li>See the <a href="#otheros">Inclusion</a> section for general information</li>
<li style="list-style:none;">– tests by third parties (packagers) –</li>
-->
<li style="list-style:none;">– even older versions –</li>
 <li>See <a href="mksh_old.htm#regress">the old-mksh site</a></li>
 <li>MidnightBSD (amd64, sparc64) gcc</li>
 <li>HP-UX 11i (hppa, IA64) gcc, aCC</li>
 <li>Interix 3.5 (i386 win2k), 6 (i386 Vista) gcc, msc</li>
 <li>UWIN-NT (i386) dmc, msc</li>
 <li>GNU/Linux (alpha, amd64, i386, macppc, s390) gcc, TenDRA, icc,
  llvm-gcc4.2, nwcc, dietlibc, glibc, µClibc</li>
</ul>
<h3 id="regress_fail">Known to FAIL Build or Test</h3>
<ul>
 <li>UWIN-NT 4.1.0/5.0 2195 2006-02-14 (i386 bcpp BCC32.EXE 5.5.1, ILINK32.EXE 5.00)
  does not really work except a few basic commands</li>
 <li>Fabrice Bellard’s tcc in combination with GNU libc often fails linking
  with an error message like this:<br /><tt>/usr/lib/libc_nonshared.a:
  '__i686.get_pc_thunk.bx' defined twice</tt> (eg. Debian lenny tcc0.9.24-1)</li>
 <li>klibc (klcc) on GNU/Linux needs a few patches to work</li>
 <li>mksh works on Plan 9, but does not return after executing a non-builtin
  command. Syllable Desktop exhibits the same behaviour.</li>
</ul>

<h2 id="vsn">Recommendations on version numbering</h2>
<p>mksh by default uses a version numbering scheme that uses full integers,
 prefixed by a capital letter R significing “Release”. If minor updates are
 required or requested, a lower-case letter from the standard latin alphabet
 will be appended, starting at ‘b’ and ending at ‘z’ (but usually way before
 or at ‘i’). If a packaging system cannot handle version numbers such as
 <tt>mksh-R29b</tt> (source) → <tt>mksh-R29b-1</tt>, <tt>mksh-R29bp1</tt>
 (binary), packagers OUGHT TO map this to a numerical system as follows:
 <tt>mksh-29.2-1</tt>, <tt>mksh-29.2.1</tt>, <tt>mksh-29.2nb0</tt>, depending
 on the packaging-system local policy for build numbers / patchlevels.</p>
<p>Schemes to AVOID are <tt>mirbsdksh-1.29b</tt>, <tt>mksh-2.9.2</tt>, or
 worse. Please adhere to our recommendations so that users are able to locate
 mksh in their operation environment of choice.</p>

<h3 id="editor">/bin/ed</h3>
<p>While we’re at it – recommendations for packagers – there is another set
 of do’s and dont’s: location of the UNIX® standard text editor. As outlined
 in traditional unixoid operating system standards, manifested into POSIX,
 and – for these three-letter words that aren’t Unix, no matter which of the
 kernels they use in their variety of so-called distributions – the <a
 href="http://www.pathname.com/fhs/pub/fhs-2.3.html#SPECIFICOPTIONS2">FHS</a>
 (FSSTND): ed lives in <tt>/bin/ed</tt>, period.</p>
<p>Patching mksh’s code to look for ed in ANY other location is a MUST NOT.</p>

<h2 id="plans">Future Plans</h2><ul>
<li>bash-style multiline command line editing, as an option (the current
 horizontally scrolled one is finally (with R28) bug-free even with
 multiline and very long prompts optionally with embedded newlines,
 and more suitable for small terminals)</li>
<li>Ensure arithmetics are properly bound to <tt>mksh_ari_t</tt> and
 <tt>mksh_uari_t</tt> and offer switching to 64 bit, including as
 array index type, as a compile time option;
 seeing as some systems (DEC?) may not have a 64 bit type</li>
<li>Adding <tt>goto</tt> and <tt>label</tt> keywords/commands</li>
<li>Adding builtins <tt>fstat</tt>, <tt>lstat</tt>, <tt>traverse</tt>, …</li>
<li>for a b in …; do (like make(1) does)</li>
<li>${foo:S/bar/baz/g} and maybe ${foo:C/bar/baz/x} via regex(3)</li>
<li>A sensible website</li>
<li>Build and actually work on more platforms – DJGPP, PW32,
 Plan 9, Syllable – debug these</li>
<li>Mode for no input line editing at all (required for Plan 9)
 and no Emacs just Vi mode (requested by unknown at FOSDEM 2009 – yuck)</li>
<li>Real Unicode command line editing code</li>
<li>Real Unicode internal op, including ${foo:2:3}</li>
<li>Build with more platforms’ native tools or other compilers
 – ACK, kencc, ICC/UWIN, egcs/UWIN, tcc</li>
<li>Add the ability to handle embedded NUL bytes in strings read,
 for example in the hexdump “utility” (regression test)
 <br />XXX this might be a bad idea actually, cf. php’s insecurity</li>
<li>Bugfix for suspending <tt>a &amp;&amp; b</tt> chain</li>
<li>echo diff &lt;(echo 1) &lt;(echo 2)</li>
<li>;&amp; and ;;&amp; in case like zsh</li>
<li>read with timeout like ksh93</li>
<li>read -e like ksh93</li>
<li>maybe associative arrays? meh, rather the bloat… naah</li>
</ul>

<h2 id="clog">Recent Changes</h2>
<p>Changes in the current (unreleased) development version:</p><ul>
 <li>Begin porting mksh to the <a href="http://9fans.net/">Plan 9</a>
  ANSI’n’POSIX Environment (not finished)</li>
 <li>Port to <a href="http://www.syllable.org/">Syllable</a> (much
  improved; support now en par with Plan 9’s, thanks to Anthony Morphett
  &lt;awmorp@gmail.com&gt; – maybe the rest is a kernel bug?)</li>
 <!-- li>Import the GNU bash- and zsh-style ability to get and set multiple
  limits in a single invocation from oksh (thanks millert) -->
 <li>[ahoka] Begin porting to <a href="http://www.haiku-os.org/">Haiku</a>
  and, implicitly, BeOS (not finished yet)</li>
</ul>
<p id="r37c">mksh R37c provides these follow-up fixes:</p><ul>
 <li>[tg] Improve præprocessor detection/work in <tt>Build.sh</tt></li>
 <li>[tg] Decouple MKSH_CONSERVATIVE_FDS from MKSH_SMALL</li>
 <li>[tg] Enable MKSH_CONSERVATIVE_FDS by default on Minix 3</li>
 <li>[tg] Work around the (in-)famous ACK "const" bug</li>
 <li>[tg] Optimise structure alignment and padding; Closes: #522778</li>
 <li>[tg] Retain <tt>LOCPATH</tt> (for glibc locale) in <tt>check.pl</tt></li>
 <li>[tg] Document, simplify and clean up the code better</li>
 <li>[tg] Use <i>mirbsd.org</i> eMail addresses consistently</li>
</ul>
<p id="r37b">mksh R37b comes with the following fixes on top:</p><ul>
 <li>[tg] Clean up build system and <tt>dot.mkshrc</tt> some more</li>
 <li>[tg] Add getrusage(2) implementation using times(3) if none found</li>
 <li>[tg] Add jobless mode (for Minix 3, Plan 9, …)</li>
 <li>[tg] Detect the Amsterdam Compiler Kit in the build system</li>
 <li>[tg] If no <tt>RLIM_INFINITY</tt> don’t try to do ulimit</li>
 <li>[tg] Work around gcc4 strict warnings vs. broken system headers</li>
 <li>[tg] Work around systems with mmap(2) but no munmap(2)</li>
 <li>[tg] Fix (disallow) bind key macro recursion (instead of beeping and
  going into an endless loop), allow multi-line bind key macros (mostly
  from Alexander Hall), remove dead code (the beeping) and optimise</li>
 <li>[tg] Add (commented out, undesired, standards compliance breaking)
  compatibility code to MidnightBSD 0.1 <tt>/bin/sh</tt> for ctriv</li>
 <li>[tg] Clarify the mksh(1) manual page even more</li>
 <li>[tg] Port to <a href="http://www.minix3.org/">Minix 3</a> + GCC</li>
</ul>
<p id="r37">mksh R37 has major standards compliance improvements:</p><ul>
 <li>[tg] Rename <tt>-o utf8-hack</tt> to <tt>-o utf8-mode</tt></li>
 <li>[tg] Fix spacing mode error (pasto) in the mdoc(7) format manpage</li>
 <li>[tg] Implement <tt>$((#…))</tt> unsigned arithmetic calculation,
  needed for arc4random_uniform(3)-in-korn-shell implementation</li>
 <li>[tg] Really preserve LD_LIBRARY_PATH in <tt>check.pl</tt></li>
 <li>[tg] New <tt>Build.sh</tt> option ‘-combine’ for building mksh(1) at
  once with “-fwhole-program --combine” (gcc4, llvm-gcc4) if available</li>
 <li>[tg] Always set <tt>COLUMNS</tt> and <tt>LINES</tt> trying as hard
  as we can, using <tt>TIOCGWINSZ</tt> even if used without FTALKING,
  and with the sane 80x24 default if the ioctl(2) fails</li>
 <li>[tg] Handle _POSIX_VDISABLE being undefined (e.g. Linux/klibc)</li>
 <li>[tg] &lt;sys/file.h&gt; is only required for flock(2)</li>
 <li>[tg] Fix multi-column output routine for the corner case if the
  screen is less wide than one output column; 10x Gábor Gergely</li>
 <li>[tg] Fix ${foo/@(%)/\\x} in UTF-8 mode (utf_widthadj for control
  characters U+0080‥U+009F is slightly broken; this fix shifts the
  brokenness into the command line editing mode only)</li>
 <li>[tg] Introduce <tt>mksh_ari_t</tt> and <tt>mksh_uari_t</tt>
  internal types to limit arithmetics to 32 bit on all systems;
  currently depending on the already-used standard <tt>int32_t</tt>
  and <tt>uint32_t</tt> types. Future expansion to 64 bit possible.
  Document that shell integer variables use this type.</li>
 <li>[tg] The variables PGRP, PPID, RANDOM and USER_ID are now unsigned</li>
 <li>[tg] Fix two off-by-ones breaking PS1 ending with a newline; bug
  reported by Matthias Diener</li>
 <li>[tg] Just pass through C1 control characters for now</li>
 <li>[tg] Code and internal interfaces cleanup</li>
 <li>[tg] Regression test fixes for Cygwin env(1) being unsorted</li>
 <li>[tg] Replace the memory allocator by something equally simple
  and homegrown but optimised for use with mksh and free checking</li>
 <li>[tg] Import a couple of minor fixes (e.g. spelling) from oksh</li>
 <li>[tg] Fix problems with "set -e" for real; from oksh, Closes: #518359</li>
 <li>[tg] In "set -o posix" mode, have limited echo(1) to improve
  standards compliance; the exact feature set is open for discussion,
  e.g. with pkgsrc® people; for now, only <tt>-n</tt> as first arg</li>
 <li>[tg] Make test builtin operator precedence consistent; from oksh</li>
 <li>[tg] Revamp and fold and enhance the regression tests</li>
 <li>[tg] Document somewhat surprising behaviour in mksh(1) better;
  here: <tt>[ x -eq y ]</tt>; for gps23 from <tt>#ksh</tt></li>
 <li>[tg] Reduce memory consumption by allocator simplification</li>
 <li>[tg] Fix bugs spotted by DEC ucode cc (ULTRIX) and gcc 1.42 (BSD/OS)</li>
 <li>[laffer1] Make mksh the default <tt>/bin/sh</tt> in MidnightBSD</li>
</ul>
<p><a href="mksh_old.htm#clog">older changes</a></p>
EOF
mws_putfooter
exit 0
