mws_putheader '$MirOS: www/src/mksh.hts,v 1.83 2008/03/04 00:45:02 tg Exp $'
#-
# This file is part of the website of The MirOS Project, which is
# copyrighted material, please read the LICENCE file for details.

mws_setname subprojects/mksh "mksh – the MirBSD Korn Shell"
mws_content <<'EOF'
<h1>mksh(1) R33</h1>
<p>This is the website of the MirBSD™ Korn Shell, an actively developed free
 implementation of the Korn Shell programming language and a successor to the
 Public Domain Korn Shell (pdksh).</p>
<p>This page is always accessible via a redirection at <a
 href="http://mirbsd.de/mksh"><tt>http://mirbsd.de/mksh</tt></a>, which is
 the canonical homepage URI, and in case the webserver is unreachable, <a
 href="http://mirbsd.de/mksh-fornow">the backup page</a> will provide basic
 information. The <a href="http://directory.fsf.org/mksh.html">FSF/UNESCO
 directory of Free Software</a> lists mksh, too.</p>

<h2 id="toc">Table of Contents</h2><ul>
 <li><a href="#prefetch">Introduction</a> and Licence</li>
 <li><a href="#irc">Support</a> (IRC, manual page, mailing lists, …)</li>
 <li><a href="#build">Installation</a></li>
 <li><a href="#upgrade">Upgrade</a> your packages from older mksh</li>
 <li>Inclusion in <a href="#otheros">operating systems</a></li>
 <li><a href="#contrib">comparision</a> with other shells</li>
 <li><a href="#regress">Testsuite Results</a></li>
 <li><a href="#vsn">on version numbers</a> – for packagers</li>
 <li><a href="#plans">future plans</a></li>
 <li><a href="#clog">ChangeLog</a></li>
 <li>information about <a href="mksh_old.htm">old versions</a></li>
</ul>

<h2 id="prefetch">Introduction</h2>
<p>The current version of mksh is <strong>mksh R33</strong> from
 <em>1 March 2008</em>.</p>
<p>Thanks to “Der Verein <a href="http://www.trash.net/verein/">trash.net</a>”
 for sponsoring access to a Solaris 8 box. Thanks to HP TestDrive, which helps
 in keeping mksh portable to several Unixes and compilers, and track down some
 architecture- or glibc-specific bugs. Thanks to Julian “yofuh” Wiesener for
 just another account on a Sun E420 on Solaris 11β. Thanks to someone who
 prefers to stay anonymous due to tons of red tape for providing access to an
 AIX 5.3 system with gcc and xlC installed. Thanks to gnubber’s admin (Barry
 “bddebian” deFreese), as well as Samuel “youpi” Thibault, for providing shell
 access to a Debian GNU/HURD system. Thanks to Lucas “laffer1” Holt for ssh
 access to the MidnightBSD server. Thanks to Waldemar “wbx” Brodkorb for
 dropping his unused Zaurus SL-C3200 to someone who can actually make use of
 it to test mksh on OpenBSD. Thanks to Andreas “gecko2” Gockel for access to
 a couple of Debian and Macintosh boxen. Thanks to Martin Zobel-Helas for an
 account on an Alpha system. Thanks to Bastian “waldi” Blank for access to an
 S/390 system and uploading mksh packages to Debian for quite some time. Also
 thanks to Otavio Salvador for uploading a couple of my Debian packages. The
 Debian GNU/k*BSD and HURD developers were quite helpful in assisting and
 testing as well. Thanks to Thomas E. “TGEN” Spanjaard for access to both a
 NetBSD and a DragonFly system. (Did I miss anyone? Mail me if so.)</p>
<p>What is mksh(1)? – Short answer: The MirBSD Korn Shell. Okay, but what
 exactly does it do, or why another shell? These questions will be answered
 <a href="#contrib">below</a> for the people interested. Right now, you only
 need to know that mksh is a <a href="http://www.debian.org/social_contract#guidelines">DFSG</a>-free
 and <a href="http://www.opensource.org/docs/osd">OSD</a>-compliant
 successor to pdksh, developed as part of <a href="http://mirbsd.de/">the
 MirOS Project</a> as native bourne/POSIX/korn shell for MirOS BSD, but also
 to be readily available under other UNIX®-like operating systems.</p>
<p id="lic">The source code for mksh is available at the MirOS Project mirrors
 as well as these of other operating system projects due to being <a
 href="#otheros">included</a> in these; however, we do not provide binaries.
 Find <a href="#build">instructions to build and install mksh</a> below, or
 ask your operating environment vendor to package and include mksh; we provide
 assistance for this task if asked. <em>Licencing</em> permits this as long
 as due credit is given to the authors and contributors and the copyright
 notices are not removed in their entirety; modifying is allowed (but if
 the result is still called mksh, it’s discouraged; talk with us if you
 feel you have to modify mksh). The individual licences used are the MirOS
 licence, 2-clause and 3-clause UCB licences and the ISC licence; <a
 href="/cvs.cgi/src/bin/mksh/copyright?rev=HEAD">full terms</a> are
 available via CVSweb. pdksh originally was public domain, with a few
 exceptions, but these files are not part of mksh R21 or up. The mksh(1) author
 (mirabilos) acknowledges the contributions of these people who dedicated pdksh
 to the public, and asserts a collective copyright on the code.
 All these licences are DFSG clean and conform to the OSD, and the MirOS
 Licence is listed on the pages of the ifrOSS licence centre as well as
 in the FSF/UNESCO Directory of Free Software.</p>
<p>To compile mksh, you will need a bourne or POSIX shell (Solaris
 <tt>/bin/sh</tt> is enough, and the Z shell should work), a C compiler (at
 the moment, only the one from the <a href="http://gcc.gnu.org/">GNU Compiler
 Collection</a> works, but we’re attempting to change this), system and C
 library header files and the standard C runtime. You will also need a set of
 standard UNIX® tools on a supported operating system: any recent BSD; Darwin,
 Apple Mac OSX; Interix (Microsoft® Services for Unix 3.5, maybe Subsystem for
 Unix Applications); GNU/Cygwin; UWIN; GNU/Linux (libc5, glibc, and uClibc
 systems are tested), Debian GNU/kFreeBSD, GNU/HURD or GNU/Linux; Sun Solaris
 (8, 9, 10, 11), OpenSolaris; some AIX; HP-UX 11i; OSF/1<br />To run the
 regression test suite, you will need a not too antiquated Perl with POSIX.pm
 as well as <tt><a href="#editor">/bin</a>/ed</tt> (whose installation is
 strongly suggested anyway, because it’s the standard <tt>FCEDIT</tt> history
 editor and standard UNIX® text editor), as well as a controlling terminal,
 usually <tt>/dev/tty</tt> or provided from script(1) or GNU screen.</p>
<p>To use mksh, you only need the C runtime (and any supplemental libraries
 the binary was linked against) and, optionally, <tt>/bin/ed</tt> – for
 interactive use, a controlling terminal is highly recommended because job
 control does not work without one.</p>
<p>To make full use of mksh(1)’s interactive features, it is recommended to
 copy the <tt>dot.mkshrc</tt> file from the source distribution as
 <tt>~/.mkshrc</tt> into the user’s home directory and let the user adjust
 it to suit his needs. The sample file configures a few aliases and shell
 functions as well as a sensible prompt (<tt>$PS1</tt>) and some csh-like
 directory stack functions and zsh-like hooks. Full use of this file requires
 a few special UNIX® tools, e.g. readlink(1) with the <tt>-f</tt> flag.</p>

<h2 id="irc">Support</h2>
<p>We provide an online manual page in <a
 href="http://www.mirbsd.org/man/mksh.1">HTML</a> and <a
 href="http://www.mirbsd.org/MirOS/dist/mir/mksh/mksh.pdf">PDF</a> format.
 Reading books about Korn Shells in general is recommended as further help,
 but beware of the <a href="#contrib">differences</a> to other shells.</p>
<p>If you require additional assistance or want to discuss bugs, features
 or enhancements, write to the <a href="mailto:miros-discuss@mirbsd.org">mailing
 list</a> (or <a href="mailto:postmaster@mirbsd.org">subscribe</a> to it).
 The mailing list can be reached <a href="nntp://news.gmane.org/gmane.os.miros.general">via
 NNTP</a> or at the <a href="http://marc.info/?l=miros-discuss">MARC web
 archive</a> (or GMane Loom) as well.
 Joining the IRC channel at <a href="http://freenode.net/">Freenode</a>
 (irc.freenode.net:6667) <tt>#!/bin/mksh</tt> (no joke, this is really the
 channel’s name) and <tt>#ksh</tt> (where you must distinguish AT&amp;T ksh from
 mksh though) is recommended as well.</p>

<h2 id="build">Installation</h2>
<p>Skip to the section about being <a href="#otheros">included in operating
 environments</a> unless you really want to compile mksh from source yourself
 or create a package for your operating system of choice.</p>
<p>First off, you have to download the source code from any of the mirrors
 listed below, or any other mirror you know of. Official source code
 distributions are a cpio(1) compressed “old-style” (portable octal) archive,
 compressed with gzip(1) (zlib’s deflate algorithm) and digitally signed with
 gzsig(1) using the MirOS Project’s <a href="/gzsigkey.cer">current signature
 key</a>. Please verify the signature <em>as well as</em> the hashes and/or
 checksums below, so you’re sure the content is intact and the version number
 on the archive is correct. If you require source code in tar(1)’s “ustar”
 format, check the Debian Project for availability, although they often do
 not carry the latest version. The pax(1) utility (the POSIX Archiver) can
 extract from the CPIO distfile and is available even on a stock Microsoft®
 Windows® installation.</p>
<h3 id="mirrors">Known Mirrors</h3><ul>
 <li><a href="http://www.mirbsd.org/MirOS/dist/mir/mksh/mksh-R33.cpio.gz">http://www.mirbsd.org/MirOS/dist/mir/mksh/mksh-R33.cpio.gz</a></li>
 <li><a href="http://pub.allbsd.org/MirOS/dist/mir/mksh/mksh-R33.cpio.gz">http://pub.allbsd.org/MirOS/dist/mir/mksh/mksh-R33.cpio.gz</a></li>
</ul>
<h3 id="hashes">Checksums and Hashes</h3><ul>
 <li>RMD160 (mksh-R33.cpio.gz) = 1a66dde28a077a7372c980d8da674eca34695431</li>
 <li>TIGER (mksh-R33.cpio.gz) = 36cb4470c77a51cef82e1d6ac94331a35729419798192370</li>
 <li>507273168 252600 /MirOS/dist/mir/mksh/mksh-R33.cpio.gz</li>
 <li>MD5 (mksh-R33.cpio.gz) = dbe6561bf94c4a85f92aecc22fe2c8b9</li>
 <li style="list-style:none;">All official distfiles are gzsig(1)d.</li>
</ul>

<h3 id="decomp">Decompression</h3>
<p>Use any of the following syntaxes to extract the distfile; you’ll get the
 idea soon. Some web browsers (prominently, Mozilla® and its derivates as well
 as Microsoft® Internet Explorer®) already inflate the distfile during
 download but do not remove the “.gz” extension; replace “gzip -dc” (gzcat)
 with “cat” if that happens for you.</p>
<p>The first example is using BSD paxtar (MirOS BSD, OpenBSD, NetBSD®), or
 “bsdtar” (DragonFly); the second and third use cpio(1) or pax(1) and are
 for most operating systems; the fourth is for Debian.</p><ul>
<li>$ tar xzf mksh-R33.cpio.gz &amp;&amp; cd mksh</li>
<li>$ gzip -dc mksh-R33.cpio.gz | cpio -mid &amp;&amp; cd mksh</li>
<li>$ gzip -dc mksh-R33.cpio.gz | pax -r &amp;&amp; cd mksh</li>
<li style="list-style:none;">and, in exceptional cases</li>
<li>$ tar xzf mksh_33.1.orig.tar.gz &amp;&amp; cd mksh-33.1</li>
</ul>

<h3 id="compile">Compilation</h3>
<p>Now you’re in the source code directory; <tt>Build.sh</tt> does all the
 magic for you. In theory, invoking the command<br />
 <tt>% /bin/sh ./Build.sh</tt><br />
 should work. Relative paths can be used too, for example, instead of cd(1)ing
 to the source directory, you could’ve done<br />
 <tt>% mkdir build; cd build; /bin/sh ../mksh/Build.sh</tt></p>
<p>The build script requires a bourne shell (Solaris <tt>/bin/sh</tt> or the
 <a href="http://heirloom.sourceforge.net/sh.html">Heirloom sh</a>, korn shell
 (ksh, ksh88, ksh93, pdksh, mksh, oksh, maybe the MKS ksh), POSIX shell (posh,
 <tt>/usr/xpg4/bin/sh</tt>, ash, dash), or a super-set (GNU bash) to work; the
 Z Shell could work too, but the C shell (csh, tcsh) or “bsh” or a scripting
 shell like the wish won’t. Accepted arguments are:</p><ul>
<li><tt>-j</tt> – parallel build (mksh R31d and up)</li>
<li><tt>-q</tt> – output almost nothing</li>
<li><tt>-Q</tt> – be (only) a little less verbose</li>
<li><tt>-r</tt> – don’t try to build a pre-formatted version
 of the manual page using nroff(1) if found – <em>recommended</em></li>
</ul>
<p>The build script also honours the following environment variables:</p><ul>
<li><tt>CC</tt> (gcc) – the C compiler used</li>
<li><tt>CFLAGS</tt> (-O2 / -xO2; on HP-UX/IA64: -O2 -mlp64) – optimiser and
 other compiler flags used</li>
<li><tt>CPPFLAGS</tt> (no default) – additional cpp(1) flags</li>
<li><tt>LDFLAGS</tt> (set on AIX for libcrypt) – additional CCLD flags</li>
<li><tt>LIBS</tt> (-lcrypt on Interix; empty otherwise) – additional
 libraries to pull in</li>
<li><tt>NOWARN</tt> (-Wno-error / -errwarn=%none) – $CC option to disable
 bailing out at errors; used during mirtoconf checks</li>
<li><tt>NROFF</tt> (nroff; “nroff -c” with GNU groff) – the manual page
 processor used unless <tt>-r</tt> is given</li>
<li><tt>TARGET_OS</tt> (uname -s || uname) – the operating system to compile
 for; set this during cross compilation; valid: AIX CYGWIN* Darwin DragonFly
 FreeBSD GNU (HURD) GNU/kFreeBSD HP-UX Interix Linux Minix (not yet) MirBSD
 NetBSD OpenBSD Plan9 (not yet) SunOS UWIN</li>
</ul>
<p>If <tt>CPPFLAGS</tt> contain any of the following definitions, the resulting
 binary will be compiled with a specific flavour:</p><ul>
<li><tt>-DMKSH_SMALL</tt> – build a really small mksh(1), e.g. for embedded
 systems</li>
<li><tt>-DMKSH_ASSUME_UTF8</tt> – do not use setlocale(3) or
 nl_langinfo(CODESET); assume the terminal is always in UTF-8 mode</li>
<li><tt>-DMKSH_NOPWNAM</tt> – if MKSH_SMALL is not set, still omit getpwnam(3)
 calls in order to not pull in the nsswitch or PAM libraries</li>
<li><tt>-DMKSH_NOVI</tt> – if this or MKSH_SMALL is set, the vi command line
 editing mode is omitted</li>
</ul>
<p>You can override certain mirtoconf checks by setting environment variables
 like <tt>HAVE_REVOKE=0</tt> (default for Linux) – if these are set to 0 or 1,
 the values are used; if unset, the values are probed (unless overridden by a
 different check, such as MKSH_SMALL), if set to ‘x’ the probe is forced.<br />
 Useful items to enable/disable are HAVE_MKNOD (set to 0 to disable, set to x
 to re-enable for MKSH_SMALL), HAVE_SETLOCALE_CTYPE (set to 0 if you know that
 it won’t ever or will always return UTF-8), HAVE_PERSISTENT_HISTORY (0 to not
 include this feature).</p>

<h4 id="oespec">Operating Environment specific notes</h4>

<h5 id="oe_ack">Compiler: ACK</h5>
<p>Support for <a href="http://www.cs.vu.nl/ack/">ACK on Minix 3</a> will be
 added after mksh works on Minix 3 with GCC. Support for <a
 href="http://tack.sourceforge.net/">other ACK versions</a> or targets can
 be user-contributed.</p>

<h5 id="oe_bcc">Compiler: Borland C++ Builder</h5>
<p>This compiler is somewhat supported in mksh R30 with UWIN’s cc wrapper.
 (We haven’t been able to produce a working executable though.)</p>

<h5 id="oe_dmc">Compiler: Digital Mars</h5>
<p>This compiler is somewhat supported in mksh R30 with UWIN’s cc wrapper
 and a few kludges. (We haven’t been able to produce a tested executable
 though, due to general stability issues with the UWIN platform.)</p>

<h5 id="oe_gcc">Compiler: GCC</h5>
<p>The GNU C Compiler 2.7.2.3, egcs (gcc 2.95) and the GNU Compiler Collection
 (gcc 3.x, 4.x) are known to work, but not all versions work on all targets.
 Specific C flags, known extensions, etc. are autoprobed; cross-compilation
 works fine. Use of gcc 4.x is discouraged because of several dangerous changes
 in how the optimiser works; it is possible to work around their trading off
 reliability for benchmark-only speed increases, but because mksh developers
 do not use gcc 4.x this will have to be user-contributed. On the other hand,
 gcc 3.x (in some cases 2.x) is the best choice for compiling mksh.</p>
<p>Since mksh uses ProPolice, the Stack-Smashing Protector, some GCC versions’
 compilates require additional shared libaraies.</p>
<p>For gcc 2.x which does not grok <tt>-std=<i>foo</i></tt>, set the variables
 <tt>HAVE_CAN_STDG99=0 HAVE_CAN_STDC99=0</tt> to quell a lot of warnings.</p>

<h5 id="oe_hpc">Compiler: HP C/aC++</h5>
<p>HP’s C compiler (/usr/bin/cc on HP-UX) is supported in mksh R30 and above;
 on IA64, only the LP64 model can be used; mksh segfaults in the ILP32 module
 (or rather, the system libraries do, I think), so it is default. PA-RISC too
 works fine, so this compiler is a primary choice.</p>

<h5 id="oe_xlc">Compiler: IBM XL C/C++</h5>
<p>IBM xlC 9.0 on AIX is supported in mksh R30 and above.</p>
<p>IBM xlC 8.0 on Linux/POWER and IBM xlC 6.0β on MacOS X are on the TODO.</p>

<h5 id="oe_icc">Compiler: Intel C/C++/Fortran</h5>
<p>ICC emulates GCC quite well (too well for my taste), is fully supported in
 mksh R30 and above on several platforms, but spits out <strong>lots</strong>
 (and I <em>mean</em> huge ugly lots) of bogus warnings during compile. We’re
 not going to work around these; let Intel fix their compiler instead. Some of
 these warnings were even responsible for bugs in mksh.</p>
<p>I could not get the Intel Compiler 10 for Windows® to work.</p>
<p>mksh enables the ICC stack protector option automaticaly. Compilates
 usually require the Intel shared libraries to be around.</p>

<h5 id="oe_msc">Compiler: Microsoft® C/C++</h5>
<p>Support for the Microsoft® C Compiler on Interix and UWIN, with the
 respective <tt>/usr/bin/cc</tt> wrappers, appeared in mksh R30.
 The following product versions have been tested:</p>
<p><tt>CL.EXE: Microsoft (R) 32-bit C/C++ Standard Compiler Version 13.00.9466 for 80x86<br />
 LINK.EXE: Microsoft (R) Incremental Linker Version 7.00.9466</tt><br />
 (both are part of the .NET Common Language Runtime redistributable)</p>
<p><tt>CL.EXE: Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 14.00.50727.42 for 80x86<br />
 LINK.EXE: Microsoft (R) Incremental Linker Version 8.00.50727.42</tt><br />
 (both are part of Visual Studio 2005 C++ Expreß)<br />
 You’ll have to change Interix’ cc(1) wrapper though: replace <tt>/Op</tt>
 with <tt>/Gs-</tt> to disable the stack checks (missing support in libc
 for them, they used to be off by default) and remove <tt>/Ze</tt>.</p>
<p>On Interix, this compiler is maturely usable and a good choice.</p>

<h5 id="oe_pcc">Compiler: PCC (BSD)</h5>
<p>Support for the Caldera/SCO UNIX® based, BSD-licenced portable C compiler
 in the <a href="http://pcc.ludd.ltu.se/">ragge version</a> 0.9.8
 and pcc-071009 has been added with mksh R31d; as of now, you need to use an
 environment option of <tt>HAVE_CAN_OTWO=0 HAVE_CAN_OPTIMISE=0</tt> (disable
 optimisation) because otherwise the “continue” command is broken and thusly
 the regression test suite does not pass. This has been confirmed to be a bug
 in pcc (at least), probably due to sigsetjmp(3)/siglongjmp(3) interaction.
 More recent versions of pcc seem to fail to build even simple executables.</p>

<h5 id="oe_sun">Compiler: SUNpro</h5>
<p>Support for the <a href="http://developers.sun.com/sunstudio/">SUN Studio
 12</a> compiler (cc 5.9) as well as cc 5.8 appeared in mksh R30; other
 versions might be supported as well. This compiler is a primary choice.</p>

<h5 id="oe_tcc">Compiler: tcc (Tiny C)</h5>
<p>Support for Fabrice Bellard’s tcc appeared in mksh R31, although its
 unability to do ‘-E’ in older versions gave us some headache, and glibc
 currently makes it impossible to link the final executable.</p>

<h5 id="oe_t15">Compiler: TenDRA (maybe Ten15 too)</h5>
<p>Support for TenDRA appeared in mksh R31 and appears to be solid; mksh
 uses the ‘system’ profile for compiling by default. Users who wish to
 build mksh with a different profile are welcome to help to port it.</p>

<h5 id="oe_aix">OS: AIX</h5>
<p>Support for AIX with xlC appeared in mksh R30.</p>
<p>If passing custom LDFLAGS, don’t forget the export symbols required for
 using libcrypt. If passing custom LIBS, don’t forget <tt>-lcrypt</tt>.</p>

<h5 id="oe_hurd">OS: GNU/HURD</h5>
<p>This operating system is supported (on i386) since R29 but not well
 tested. mksh is part of Debian GNU/HURD, so it is expected to work.</p>

<h5 id="oe_linux">OS: GNU/Linux</h5>
<p>While POSIX does not apply to “GNU’s Not Unix”, the <a
 href="http://www.pathname.com/fhs/pub/fhs-2.3.html#SPECIFICOPTIONS2">FHS</a>
 (ex-FSSTND) does; please convince your distributor to move ed to /bin/ed if
 not already done. Manual page installation paths are not standardised in
 older distributions either.</p>
<p>We didn’t test dietlibc yet, but uClibc works; libc5 on 2.0.36 too.</p>
<p>mksh can be used as /bin/sh on Debian and similarly strict distributions,
 which allow to use e.g. ash/dash there as well.</p>

<h5 id="oe_hpux">OS: HP-UX</h5>
<p>Support for HP-UX with GCC appeared in mksh R29 and works with HP’s C
 compiler and is no longer experimental in mksh R30. Please use stty(1) to
 make the terminal sanely usable.</p>
<p>If passing custom CFLAGS, don’t forget <tt>-mlp64</tt> (GCC) or
 <tt>+DD64</tt> on Itanium.</p>

<h5 id="oe_interix">OS: Interix</h5>
<p>As of mksh R30, the native compiler (cc(1)) is supported in addition
 to gcc, calling Microsoft C. Do not use the c89(1) wrapper.</p>
<p>If passing custom LIBS, don’t forget to add <tt>-lcrypt</tt> or any other
 library providing arc4random(3).</p>
<p>mksh can replace /bin/ksh and /bin/sh without any problems.</p>

<h5 id="oe_mnbsd">OS: MidnightBSD</h5>
<p>mksh is part of MidnightBSD 0.3 and above and used as native /bin/ksh;
 it almost certainly can be used as /bin/sh as well.</p>

<h5 id="oe_minix">OS: Minix</h5>
<p>Minix 3 is not supported yet – we were able to create an executable, but
 it did not run properly due to job control issues, similar to Plan 9.
 Minix 1 and Minix 2 will never be supported due to size constraints on
 16-bit platforms, unless a user contributes code.</p>

<h5 id="oe_plan9">OS: Plan 9</h5>
<p>Plan 9 is not supported yet – we were able to create an executable, but
 it did not return to the prompt after running a non-builtin command; this
 is job control issues, and patches are welcome.</p>
<p>Due to the unavailability of ttys, job control will never be supported.</p>
<p>The APE (ANSI’n’POSIX Environment) is required to build mksh; I don’t
 remember which compiler I used, but I think it was GCC.</p>

<h5 id="oe_pw32">OS: PW32 on Win2k</h5>
<p>PW32 is not supported yet – killpg() and getrlimit() are missing, and
 it’s possible that PW32 and Minix 3, at least, need job control disabled
 or worked around. Maybe peek at how ash/bash for PW32 do it. gcc works.</p>

<h5 id="oe_openbsd">OS: OpenBSD</h5>
<p>The setlocale(3) call in OpenBSD’s libc is broken until before 4.1 and
 will always return non-UTF8 even if run within an uxterm (xterm(1)) which
 comes with OpenBSD’s base installation. If not upgrading to OpenBSD 4.1,
 use a different setlocale library function like <a
 href="/cvs.cgi/contrib/code/Snippets/setlocale.c?rev=HEAD">this one</a>
 and pass its filename as $LIBS to <tt>Build.sh</tt>.</p>
<p>mksh can replace /bin/ksh and /bin/sh without any problems.</p>

<h5 id="oe_osf1">OS: OSF/1</h5>
<p>Digital Unix is somewhat supported using gcc as of mksh R31b.</p>

<h5 id="oe_solaris">OS: Solaris</h5>
<p>Solaris is full supported since “forever” with gcc, and since mksh R30
 with Sun’s C compiler. Both 32-bit and 64-bit modes work; 64-bit mode is
 not enabled by default by <tt>Build.sh</tt>, you must do that manually by
 passing CFLAGS of <tt>-O2 -m64</tt> or <tt>-xO2 -xarch=generic64</tt>.</p>
<p>Tonnerre LOMBARD reports it’s not possible to use mksh as login shell
 with the graphical login manager on some OpenSolaris beta version.</p>
<p>Solaris does not come with Berkeley mdoc macros for nroff, so using
 the HTML or PDF versions of the manual pages or pregenerating a catman
 page on another OS is required.</p>

<h5 id="oe_uwin">OS: UWIN-NT</h5>
<p>Compilation of mksh R30 on UWIN works with several compilers (bcc, dmc,
 msc – I could not get gcc-egcs, gcc-2.95, gcc-mingw, icc to work) but the
 platform itself is very flakey, and even some regression tests crash, due
 to target limitations apparently.</p>
<p>My UWIN installation has been wrecked, so only mksh R30 is tested, mksh
 R31 and up are not. Sorry folks.</p>

<h3 id="postbuild">After compiling</h3>
<p>The <tt>Build.sh</tt> script generates an executable (“mksh”, except on
 GNU/Cygwin, where it is called “mksh.exe”), a shell script to use the newly
 built mksh to run the regression test suite (“test.sh”), and (unless the
 <tt>-r</tt> option was given) a pre-formatted manual page (“mksh.cat1”).
 It also lists installation instructions unless <tt>-q</tt> or <tt>-Q</tt>
 were provided. Now it’s the time to run<br /><tt>% ./test.sh -v</tt><br />
 in order to see if the shell works.</p>
<p>To actually install mksh, copy the binary to some place in $PATH, i.e.
 /bin/mksh, $HOME/.bin/mksh, /usr/local/bin/mksh, or whatever your packaging
 system wants; strip it and run chmod 555 on it. (This can easily be achieved
 with install(1) – on Solaris, this is /usr/ucb/install not /usr/bin/install –
 with the arguments -c, -s, -m 755¹, and -o/-g. ① with 555, strip(1) cannot
 write the file any more, chmod 555 afterwards.) Also append its installation
 path to <tt>/etc/shells</tt>, install the <tt>dot.mkshrc</tt> file (usually
 alongside with the copyright file and other documentation), copy it to
 <tt>/etc/skel/.mkshrc</tt> if your operating environment has this means to
 include default dotfiles; install either the catman page (mksh.cat1) to,
 for example, /usr/share/man/cat1/mksh.0, or the mdoc page (mksh.1) to the
 standard location (/usr/share/man/man1/ or /usr/man/man1/ or whatever your
 operating environment requires). The manual page requires the Berkeley mdoc
 macros (either the BSD or the GNU groff version) to be installed during
 formatting time.</p>

<h2 id="upgrade">For packagers: Upgrades</h2>
<p>No surprises in mksh R33 either, but the build system now gives more
 detailed output on the version actually built, to aid tracking down
 FTBFSen (build errors) with access to only the build logs. Regression
 tests now work with Intel’s compiler on SLES too, which requires a
 custom <tt>LD_LIBRARY_PATH</tt> formerly stripped by the script.</p>
<p>No surprises in mksh R32, but some ancient systems (AIX, Solaris 11,
 OSF/1, UWIN) are now better supported.</p>
<p>In mksh R31d, parallel make with ‘-j’ was added (no limitation on number
 of childs though), this even works with Solaris 8 <tt>/bin/sh</tt>. The
 <tt>MKSH_NEED_MKNOD</tt> define is no longer honoured.</p>
<p>From mksh R31 to R31b, arc4random.c has been upgraded.</p>
<p>From mksh R30 to R31, there are no surprises. The “arc4random.c” file
 is available from mircvs://contrib/code/Snippets/arc4random.c now, and
 the new “source” command is not available in posix mode either.</p>
<p>From mksh R29 to R30, the following things should be kept in mind:</p>
<p>The syntax of <tt>Build.sh</tt> has changed: $CC now defaults to “cc”
 instead of “gcc”, and the ‘-d’ and ‘-nd’ arguments are gone – if you
 want to build a statically linked mksh, pass <tt>LDSTATIC=-static</tt>
 (gcc+GNU ld, adjust for other OEs) to it. An “arc4random.c” is now
 automatically included into the build if found in the source directory.
 The $CPP variable is ignored, <tt>$CC -E</tt> is used instead, except
 for tcc, which uses “cpp -D__TINYC__” because “tcc -E” doesn’t work.</p>
<p>As a tribute to better POSIX compatibility, certain aliases (like
 “stop”) are no longer predefined in “set -o posix” mode, which is invoked
 automatically if the shell is run as <tt>-sh</tt>, <tt>/bin/sh</tt> or
 similar, so that they can be used as function names.</p>
<p>If defining <tt>MKSH_SMALL</tt>, the ‘vi’ editing mode is omitted,
 which may surprise your users.</p>
<p>Many compilers other than gcc are now supported as well as AIX.</p>

<h2 id="otheros">Inclusion in other operating systems</h2><ul>
<li><a href="http://crux.nu/">Crux GNU/Linux</a> has an mksh port contributed by
 <a href="http://www.xs4all.nl/~hanb/software/crux/han/mksh/">Han Boetes</a>.</li>
<li><a href="http://www.debian.org/">Debian</a> GNU/Linux, GNU/HURD and
 GNU/kFreeBSD have an <a href="http://packages.debian.org/mksh">mksh package</a>
 maintained by the MirOS Project and uploaded (sponsored) by Bastian “waldi”
 Blank and Otavio Salvador; the debconf questions were taken from dash. The <a
 href="http://www.mirbsd.org/MirOS/dist/mir/mksh/ports/mksh_33.1-2.dsc">mksh
 Debian source package</a> is available, too.</li>
<li><a href="http://www.gentoo.org/">Gentoo GNU/Linux</a> has an mksh <a
 href="http://sources.gentoo.org/viewcvs.py/gentoo-x86/app-shells/mksh/">ebuild</a>
 created by <a href="http://www.hboeck.de/">Hanno Böck</a>.</li>
<li><a href="http://fedoraproject.org/">Fedora</a> GNU/Linux 8 and Fedora
 GNU/Linux 7, as well as <a
 href="http://www.redhat.com/rhel/">RHEL</a> 4 and 5 (via EPEL) now
 officially contain <a
 href="http://fedoraproject.org/wiki/Packages/mksh">an mksh
 package</a>. There are some <a
 href="http://fedoraproject.org/wiki/EPEL/FAQ#head-fc43191402d7242da15ebb282c1a7dc948f6c852">Instructions</a>
 for activating EPEL (RHEL only), then just type <tt>yum install
 mksh</tt>.</li>
<li>The <a href="http://en.opensuse.org/Build_Service">OpenSuSE Build
 Service</a> provides an mksh package inside the <a
 href="http://software.opensuse.org/download/shells/">shells repo</a>,
 thanks to Pascal “loki” Bleser and Marcus “darix” Rückert; the RPMs are
 available for various instances of SuSE, OpenSuSE and Redhat/Fedora Core
 as well as as SRPM (source RPM). There used to be a repository by <a
 href="http://ftp.skynet.be/pub/suser-guru/rpm/packages/System/mksh/">loki</a>
 in the past.</li>
<li>An <a href="http://www.mirbsd.org/MirOS/dist/mir/mksh/ports/mksh-33-1.src.rpm">inofficial
 <em>portable</em> SRPM</a> (created on Debian GNU/kFreeBSD) is available
 as well. This one contains the <tt>arc4random.c</tt> support routines for
 operating systems from clueless vendors (GNU, Sun, etc).</li>
<li><a href="http://finkproject.org/">Fink</a> delivers an <a
 href="http://pdb.finkproject.org/pdb/package.php/mksh">mksh package</a>
 from Andreas “gecko2” Gockel.</li>
<li><a href="http://www.sourcemage.org/">SMGL</a> (Sourcemage GNU/Linux) has an
 <a href="http://distro.ibiblio.org/pub/linux/distributions/sourcemage/codex/test/shell-term-fm/mksh/">mksh
 spell</a> in their grimoire, developed by the MirOS Project together with
 Daniel “morfic” Goller.</li>
<li>In the <a href="https://www.freewrt.org/trac/">FreeWRT Embedded GNU/Linux
 Appliance Development Kit (meta distribution)</a>, the <a
 href="https://www.freewrt.org/svn/trunk/freewrt/package/mksh/">mksh
 package</a> is maintained by us. mksh is also the default shell in FreeWRT
 trunk (soon to be 1.1) and above.</li>
<li><a href="http://openwrt.org/">OpenWrt Embedded GNU/Linux Distribution</a>
 also <a href="https://dev.openwrt.org/browser/packages/utils/mksh">provides
 mksh</a> on ADSL/WLAN routers thanks to Felix “nbd” Fietkau.</li>
<li><a href="http://www.ubuntu.com/">Ubuntu GNU/Linux</a>, <a
 href="http://www.gnusolaris.org/gswiki">Nexenta OS</a> (GNU/Solaris), the <a
 href="http://grml.org/">grml</a> (and grml64) Live-CD, and other Debian
 derivates also have an mksh package; Knoppix, SIDUX, and grml-small do
 <em>not</em> contain or offer mksh. <em>Note</em>: We need URLs to the
 packages for these, can anyone provide any?</li>
<li><a href="http://www.archlinux.org/">Arch GNU/Linux</a> users can install
 an <a href="http://aur.archlinux.org/packages.php?do_Details=1&amp;ID=3431">mksh
 package</a> by Daniel “homsn” Hommel.</li>
<li><a href="http://www.freebsd.org/">FreeBSD®</a> Ports (for FreeBSD, very old
 <a href="http://www.dragonflybsd.org/">DragonFly BSD</a> versions and <a
 href="http://www.desktopbsd.net/">DesktopBSD</a>) also have a <a
 href="http://cvsweb.freebsd.org/ports/shells/mksh/">port</a> created by
 Andreas “ankon” Kohn and kept up to date by Martin “miwi” Wilke. It is
 unknown if this applies to <a href="http://www.pcbsd.org/">PC-BSD</a> too,
 but there’s no mksh PBI (yet?).</li>
<li><a href="http://www.midnightbsd.org/">MidnightBSD</a> uses <a
 href="http://cvsweb.midnightbsd.org/mports/shells/mksh/">mports</a>, a
 derivate of FreeBSD® ports. Naturally, they deliver mksh as well.
 MidnightBSD 0.2-CURRENT from 18th August 2007 onwards has mksh as both <a
 href="http://cvsweb.midnightbsd.org/src/contrib/mksh/"><tt>/bin/mksh</tt></a>
 and <a href="http://cvsweb.midnightbsd.org/src/bin/mksh/"><tt>/bin/ksh</tt></a>,
 i.e. it is the default Korn shell.</li>
<li><a href="http://www.pkgsrc.org/">NetBSD® pkgsrc®</a> (native also on recent
 DragonFly BSD; available for many other operating systems as well) has a <a
 href="http://cvsweb.netbsd.org/bsdweb.cgi/pkgsrc/shells/mksh/">package</a>
 created by the MirOS Project and kept up to date by Blair Sadewitz, a fan.
 And <a href="/MirOS/dist/mir/mksh/ports/mksh-pkgsrc.tgz">this source
 package</a> is provided by the MirOS project in case it’s more recent.</li>
<li>The MirPorts Framework brings mksh to OpenBSD, Mac OSX and Interix as
 well as older MirOS BSD versions, which have mksh as native Korn Shell.</li>
<li><a href="http://www.openbsd.org/">OpenBSD</a> ports do <em>not</em>
 package mksh, but an <a href="http://www.mirbsd.org/MirOS/dist/mir/mksh/ports/mksh-obsdport.tgz">inofficial
 port</a> is available.</li>
<li>ChinaLinux mirrors (and apparently packages) mksh.</li>
<li>Some US-American Apple Users’ Group (the <a
 href="http://www.hmug.org/pub/MacOS_X/BSD/Applications/Shells/mksh/">HMUG</a>)
 packages mksh for Darwin, too.</li>
<li>Frugalware Linux contains a broken mksh package; the build logs show
 the problem is on their side. (XXX Someone has any URL for us?)</li>
<li>There are probably many more, please drop us a note!</li>
<li><a href="http://linux.softpedia.com/get/System/Shells/MirBSD-Korn-Shell-24602.shtml">Softpedia</a>
 lists mksh, just like the FSF/UNESCO directory.</li>
</ul>
<p>These packages are not official and have not always been tested by mksh
 developers; please keep this in mind.</p>

<h2 id="contrib">Other Shells and more</h2>
<p>mksh is a successor of pdksh but not affiliated with the pdksh
 developers or contributors. mksh is not affiliated with the AT&amp;T
 Korn Shell, its past or present owners, other than that both attempt
 to implement the Korn Shell programming language.</p>
<p>mksh targets users who desire a compact, fast, reliable, secure
 shell not cut off modern extensions; a shell with Unicode support;
 an actively developed, current, and portable product; one with
 developers that listen to their users’ requests and implement them
 if they actually make sense.</p>
<p>mksh aims to replace pdksh in all but very rare use cases (such as
 support for checking the Unix mbox) and in all operating environments
 (thus including patches from pdksh on e.g. Debian).</p>

<h3 id="co-diffs">Differences</h3>
<p>mksh is a direct descendant from the OpenBSD <tt>/bin/ksh</tt> and
 contains all of its bug fixes and enhancements <strong>except</strong>
 the “GNU bash-like <tt>$PS1</tt>” changes. The DeliLinux developer who
 is responsible for packaging oksh for GNU/Linux should instead use mksh
 and port that diff over (be careful to not break the fixes to the command
 line editing modes, these are subtilely broken in OpenBSD). Even better,
 the OpenBSD people should not only commit a port of mksh but replace their
 ksh with it (optionally retaining that GNU bash-like $PS1 stuff). The
 <tt>set -o emacs-usemeta</tt> command is no longer needed because the
 emacs editing mode has been changed for Unicode/UTF-8 mode, which adds a
 new <tt>set -o utf8-hack</tt> mode. The <tt>set -o sh</tt> command has
 been completely removed, <tt>set -o posix</tt> merely turns off brace
 expansion as side effect. There is no limit (well, 2³¹ probably) on
 array sizes any more. Many bugs and security holes have been closed in
 mksh and are still in oksh and OpenBSD ksh. The user interface has much
 less bugs and surprises; emacs editing mode is enabled by default.
 In contrast to oksh, <tt>set -o arc4random</tt> can be used to control
 which generator for <tt>$RANDOM</tt> is used.</p>
<p>mksh is the heir of pdksh and contains all the latest fixes from upstream
 (so ca. 1995) and Debian, except a change which breaks (at least) BSD make
 due to different errorlevel (return/exit code) handling. See above for other
 differences. The code really has been cleaned up and no longer contains any
 material under licences more restrictive than the BSD licence.</p>
<p>AT&amp;T ksh88 and ksh93 compare to mksh substantially, but share no code;
 the user interface is slightly different especially for ksh88; many editing
 commands work (only slightly) differently as well. mksh implements many, but
 by far not all, ksh93 features, but most ksh88 features. No floating point.
 The last command of a pipeline is executed in a subshell.</p>
<p>mksh can do many things GNU bash can’t, for example better arrays, the
 ksh Co-processes, etc. but is much faster and smaller. In contrast to bash,
 mksh is still being actively developed (bash almost only receives small
 changes or weird stuff like programmable tab completion). GNU bash’s array
 initialiser syntax is not yet supported. We don’t aim at being fully bash
 compatible, but some of the surprises for converts will be removed.</p>
<p>The Z shell (zsh) isn’t even remotely ksh compatible in its “emulate ksh”
 operation mode, and we don’t compare to it.</p>
<p>mksh is <em>mostly</em> bourne shell compatible (but ^ as alias for | is
 not supported, like most modern shells). mksh is also POSIX sh compatible.
 Some constructs are not supported, for example<br />
 <tt>((foo; bar) 2>&amp;1 || baz)</tt><br />which has to be rewritten as<br />
 <tt>( (foo; bar) 2>&amp;1 || baz)</tt><br />because ((…)) is shell arithmetics;
 brace expansion is turned on by default; etc.</p>
<p>mksh R33 supports even more bash/ksh93/zsh constructs than its
 predecessors; sometimes, not all cases (e.g. applying string trimming
 on arrays) are supported, but you probably will not notice that.</p>

<h2 id="regress">Official Testing</h2>
<p>The MirOS Project has tested mksh on the following operating systems,
 asked people to test, and hunted mksh down in these packaging systems:</p>
<ul>
 <li style="list-style:none;">– tests by the project, using Makefile –</li>
 <li>MirOS #10 RC8 (i386 gcc3.4.6)</li>
 <li>MirOS #10 RC8 (sparc gcc3.4.6)</li>
 <li style="list-style:none;">– tests by the project, using Build.sh –</li>
 <li>MirOS #10 RC8 (i386 gcc3.4.6)</li>
 <li>MirOS #10 RC8 (i386 SUNcc5.9 Linux_i386 2007/05/03, GNU ld 2.13.90.0.2 20020802)</li>
 <li>MirOS #7-stable (sparc gcc2.95.3-078E)</li>
 <li>DragonFly 1.9-DEVELOPMENT Feb 17, 2007 (i386 gcc3.4.6)</li>
 <li>FreeBSD 6.2-RELEASE (i386 gcc3.4.6-20060305)</li>
 <li>MidnightBSD 0.2-CURRENT (i386 gcc3.4.6-20060305)</li>
 <li>NetBSD 3.0_STABLE (i386 gcc3.3.3_nb3_20040520)</li>
 <li>OpenBSD 4.3-beta GENERIC#201 (zaurus gcc3.3.5)</li>
 <li>Debian GNU/kFreeBSD 4.0 sid 6.2-1-686 (i386 gcc1:3.3.6-15)</li>
 <li>Debian GNU/kFreeBSD 4.0 sid 6.2-1-686 (i386 gcc3.4.6-6)</li>
 <li>Debian GNU/kFreeBSD 4.0 sid 6.2-1-686 (i386 gcc4.0.3-7)</li>
 <li>Debian GNU/kFreeBSD 4.0 sid 6.2-1-686 (i386 gcc4.1.2-19)</li>
 <li>Debian GNU/kFreeBSD 4.0 sid 6.2-1-686 (i386 gcc4.2.3-2)</li>
 <li>Debian GNU/kFreeBSD 4.0 sid 6.2-1-686 (i386 gcc4.3-20080227-1)</li>
 <li>AIX 5.3 (powerpc gcc4.0.0_powerpc-ibm-aix5.1.0.0, LD 1.65 04/06/2005)</li>
 <li>AIX 5.3 32-bit (powerpc xlC9.0 070428, LD 1.65 04/06/2005)</li>
 <li>AIX 5.3 64-bit (powerpc xlC9.0 070428, LD 1.65 04/06/2005)</li>
 <li>HP-UX 11i 11.11 B.11.11 U PA-RISC 9000/800 (hppa aCC HP92453-01 B.11.X.36086-36089-36092.GP, ld 92453-07 B.11.60 070209) <em>no regression test run</em></li>
 <li>HP-UX 11i v2 B.11.23 U ia64 (IA64 aCC B3910B A.06.10 [Mar 22 2006], ld 92453-07 B.12.45)</li>
 <li>HP-UX 11i v2 B.11.23 U ia64 (IA64 gcc3.4.3)</li>
 <li>HP-UX 11i v3 B.11.31 U PA-RISC 9000/800 (hppa aCC HP92453-01 B.11.X.36086-36089-36092.GP, ld 92453-07 B.11.60 070209)</li>
 <li>Mac OSX Leopard 10.5.2 Darwin 9.2.0 (i386 gcc4.0.1 Apple Inc. build 5465)</li>
 <li>Mac OSX Leopard 10.5.2 Darwin 9.2.0 (i386 gcc4.2.1 Apple Inc. build 5531)</li>
 <li>Mac OSX Leopard Server 10.5.2 Darwin 9.2.0 (macppc gcc4.0.1 Apple Inc. build 5465)</li>
 <li>Solaris 8 Generic_117350-41 (sparc,V8+ sun4u gcc3.4.3)</li>
 <li>Solaris 8 Generic_117350-41 (sparc64,V9 sun4u gcc3.4.3)</li>
 <li>Solaris 10 Generic_125100-04 (sparc,V8+ sun4u gcc3.4.6)</li>
 <li>Solaris 10 Generic_125100-04 (sparc64,V9 sun4u gcc3.4.6)</li>
 <li>Solaris 10 Generic_125100-04 (sparc,V8+ sun4u SUNcc5.9 124867-01, ld 5.10-1.486)</li>
 <li>Solaris 10 Generic_125100-04 (sparc64,V9 sun4u SUNcc5.9 124867-01, ld 5.10-1.486)</li>
 <li>Interix 3.5 SP-8.0.1969.1 (i386 gcc3.3 win2k) <em>with Perl from pkgsrc®</em></li>
 <li>Interix 3.5 SP-8.0.1969.1 (i386 msc CL.EXE 13.00.9466 (standard), LINK.EXE 7.00.9466)</li>
 <li>Interix 3.5 SP-8.0.1969.1 (i386 msc CL.EXE 14.00.50727.42 (optimising), LINK.EXE 8.00.50727.42)</li>
 <li>Debian GNU 4.0 sid GNU-Mach 1.3.99/Hurd-0.3 i686-AT386 (i386 gcc3.4.6-5)</li>
 <li>Debian GNU 4.0 sid GNU-Mach 1.3.99/Hurd-0.3 i686-AT386 (i386 gcc4.0.4-1)</li>
 <li>Debian GNU 4.0 sid GNU-Mach 1.3.99/Hurd-0.3 i686-AT386 (i386 gcc4.1.2-18)</li>
 <li>Debian GNU 4.0 sid GNU-Mach 1.3.99/Hurd-0.3 i686-AT386 (i386 gcc4.2.2-4)</li>
 <li>Cygwin 1.5.19(0.150/4/2) 2006-01-20 13:28 (i386 gcc3.4.4 win2k)</li>
 <li>Ångström GNU/Linux spitz 2.6.20.6 PREEMPT (armv5tel glibc2.5 gcc4.1.2)</li>
 <li>Debian GNU/Linux 4.0 etch 2.6.18-5-alpha-generic (alpha gcc1:3.3.6-15)</li>
 <li>Debian GNU/Linux 4.0 etch 2.6.18-5-alpha-generic (alpha gcc4.1.1-21)</li>
 <li>Debian GNU/Linux 4.0 etch 2.6.18-4-k7 (i386 tcc0.9.23) <em>FAIL to link executable</em></li>
 <li>Debian GNU/Linux 4.0 etch 2.6.18-4-k7 (i386 TenDRA-4.1.2)</li>
 <li>Debian GNU/Linux 4.0 testing 2.6.22-3-686 (i386 gcc3.4.6-6)</li>
 <li>Debian GNU/Linux 4.0 testing 2.6.22-3-686 (i386 gcc4.1.2-18</li>
 <li>Debian GNU/Linux 4.0 testing 2.6.22-3-686 (i386 gcc4.3-20080202-1/r132072)</li>
 <li>Debian GNU/Linux 4.0 sid 2.6.18-6-vserver-s390x (S/390 gcc4.2.3-1)</li>
 <li>Debian GNU/Linux 4.0 sid 2.6.18-6-vserver-s390x (S/390 gcc4.3-20080127-1/r131882)</li>
 <li>Debian GNU/Linux 4.0 sid 2.6.22-2-powerpc (macppc gcc4.2.2-3)</li>
 <li>ecce!GNU/Linux 1.00 2.0.38a (i386 libc5 gcc2.7.2.3)</li>
 <li>SuSE GNU/Linux SLES10 2.6.16.27-0.9-default (IA64 gcc4.1.0)</li>
 <li>SuSE GNU/Linux SLES10 2.6.16.27-0.9-default (IA64 icc9.1.046-20070111)</li>
 <li style="list-style:none;">– with arc4random.c add-on –</li>
 <li>Debian GNU/kFreeBSD 4.0 sid 6.2-1-686 (i386 gcc4.3-20080227-1)</li>
 <li>Solaris 10 Generic_125100-04 (sparc sun4u gcc3.4.6)</li>
 <li>Solaris 10 Generic_125100-04 (sparc sun4u SUNcc5.9 124867-01, ld 5.10-1.486)</li>
 <li>Debian GNU 4.0 sid GNU-Mach 1.3.99/Hurd-0.3 i686-AT386 (i386 gcc4.2.2-4)</li>
 <li style="list-style:none;">– older mksh versions –</li>
 <li>See <a href="@@RELPATH@@mksh_old.htm#regress">the old-mksh site</a></li>
 <li style="list-style:none;">– tests by third parties (Build.sh) –</li>
 <li>Jupp Schugt (the IceWM coffee pot maintainer) sometimes tests mksh with
  gcc on OSF/1 (Digital UNIX®); this has been done last for mksh R31c</li>
 <li style="list-style:none;">– other build system integration –</li>
 <li>See the <a href="#otheros">Inclusion</a> page for general information</li>
 <li>MirOS #10 RC8 (i386 gcc3.4.6) <em>via MirPorts Framework</em></li>
 <li>OpenBSD 4.3-beta GENERIC#201 (zaurus gcc3.3.5) <em>via MirOS provided OpenBSD port</em></li>
 <li>Debian GNU/kFreeBSD 4.0 sid 6.2-1-686 (i386 gcc4.2.3-2) <em>via MirOS provided Debian package</em></li>
 <li>Debian GNU/kFreeBSD 4.0 sid 6.2-1-686 (i386 gcc4.2.3-2) <em>via MirOS provided SRPM package</em></li>
 <li>Interix 3.5 SP-8.0.1969.1 (i386 gcc3.3 win2k) <em>via MirOS provided pkgsrc® source package</em></li>
 <li>Debian GNU/Linux 4.0 etch 2.6.18-4-k7 (i386 gcc4.1.1-21) <em>via MirOS provided Debian package</em></li>
 <li>Debian GNU/Linux 4.0 etch 2.6.18-4-k7 (i386 gcc4.1.1-21) <em>via MirOS provided SRPM package</em></li>
 <li>Debian GNU/Linux 4.0 testing 2.6.22-3-686 (i386 gcc4.2.3-1) <em>via MirOS provided Debian package</em></li>
 <li>Red Hat FC8 2.6.23.15-137.fc8 (i386 gcc4.1.2-33) <em>via MirOS provided SRPM package</em></li>
 <li>Red Hat FC8 2.6.23.15-137.fc8 (amd64 gcc4.1.2-33) <em>via MirOS provided SRPM package</em></li>
 <li style="list-style:none;">– tests by third parties (packagers) –</li>
 <li>Debian GNU/kFreeBSD 6.3-1-686 (i386 gcc4.2.3-2) <em>by himalia1 buildd via Debian’s package</em></li>
 <li>Debian GNU/kFreeBSD 6.3-1-amd64-k8 (amd64 gcc4.2.3-2) <em>by shockley buildd via Debian’s package</em></li>
 <li>Mac OSX Leopard 10.5.2 Darwin 9.2.0 (i386 gcc4.0.1 Apple Inc. build 5465) <em>by gecko2 via Fink package</em></li>
 <li>Debian GNU/Linux 2.6.22-3-vserver-amd64 (amd64 gcc4.2.3-2) <em>by excelsior buildd via Debian’s package</em></li>
 <li>Debian GNU/Linux 2.6.20 (armeb gcc4.2.3-1) <em>by europa buildd via Debian’s package</em></li>
 <li>Debian GNU/Linux 2.6.23-rc8-iop32x (armel gcc4.2.3-2) <em>by ALL6500 buildd via Debian’s package</em></li>
 <li>Debian GNU/Linux 2.6.22-14-hppa64 (hppa gcc4.2.3-2) <em>by bld-3 buildd via Debian’s package</em></li>
 <li>Debian GNU/Linux 2.6.24.1 (i386 gcc4.2.3-2) <em>by ninsei buildd via Debian’s package</em></li>
 <li>Debian GNU/Linux 2.6.18-dsa-mckinley (IA64 gcc4.2.3-1) <em>by mundy buildd via Debian’s package</em></li>
 <li>Debian GNU/Linux 2.6.24-1-mac (mac68k gcc4.2.3-1) <em>by poseidon buildd via Debian’s package</em></li>
 <li>Debian GNU/Linux 2.6.18-5-s390x (S/390 gcc4.2.3-2) <em>by debian-31 buildd via Debian’s package</em></li>
 <li>Debian GNU/Linux 2.6.23.16 (sparc64,V8 gcc4.2.3-2) <em>by lebrun buildd via Debian’s package</em></li>
 <li style="list-style:none;">– known to <strong>FAIL</strong> building</li>
 <li>Mac OSX Leopard Server 10.5.2 Darwin 9.2.0 (macppc gcc3.3 20030304 Apple Computer, Inc. build 1823, ld64-77)</li>
 <li>Fabrice Bellard’s tcc in combination with GNU libc often fails linking</li>
 <li>Some pcc versions mis-compile with -O enabled</li>
</ul>

<h2 id="vsn">Recommendations on version numbering</h2>
<p>mksh by default uses a version numbering scheme that uses full integers,
 prefixed by a capital letter R significing “Release”. If minor updates are
 required or requested, a lower-case letter from the standard latin alphabet
 will be appended, starting at ‘b’ and ending at ‘z’ (but usually way before
 or at ‘i’). If a packaging system cannot handle version numbers such as
 <tt>mksh-R29b</tt> (source) → <tt>mksh-R29b-1</tt>, <tt>mksh-R29bp1</tt>
 (binary), packagers OUGHT TO map this to a numerical system as follows:
 <tt>mksh-29.2-1</tt>, <tt>mksh-29.2.1</tt>, <tt>mksh-29.2nb0</tt>, depending
 on the packaging-system local policy for build numbers / patchlevels.</p>
<p>Schemes to AVOID are <tt>mirbsdksh-1.29b</tt>, <tt>mksh-2.9.2</tt>, or
 worse. Please adhere to our recommendations so that users are able to locate
 mksh in their operation environment of choice.</p>

<h3 id="editor">/bin/ed</h3>
<p>While we’re at it – recommendations for packagers – there is another set
 of do’s and dont’s: location of the UNIX® standard text editor. As outlined
 in traditional unixoid operating system standards, manifested into POSIX,
 and – for these three-letter words that aren’t Unix, no matter which of the
 kernels they use in their variety of so-called distributions – the <a
 href="http://www.pathname.com/fhs/pub/fhs-2.3.html#SPECIFICOPTIONS2">FHS</a>
 (FSSTND): ed lives in <tt>/bin/ed</tt>, period.</p>
<p>Patching mksh’s to look for ed in ANY other location is a MUST NOT.</p>

<h2 id="plans">Future Plans</h2><ul>
<li>bash-style multiline command line editing, as an option (the current
 horizontally scrolled one is finally (with R28) bug-free even with
 multiline and very long prompts optionally with embedded newlines,
 and more suitable for small terminals)</li>
<li>I’d like to switch the internal integer type to 64 bits
 signed (any takers?). This includes 2⁶⁴-1 (not 2³¹-1) as
 maximum valid array index; typeset -i&lt;number&gt; is unsigned
 (or probably not? stay signed in most places for compatibility)</li>
<li>Adding <tt>goto</tt> and <tt>label</tt> keywords/commands</li>
<li>Adding builtins <tt>realpath</tt>, <tt>fstat</tt>, <tt>lstat</tt>,
 <tt>traverse</tt></li>
<li>for a b in …; do (like make(1) does)</li>
<li>${foo:S/bar/baz/g} ${foo:C/bar/baz/x}</li>
<li>A sensible website</li>
<li>Build and actually work on more platforms – PW32, Minix 3,
 Plan 9, Syllable – debug these</li>
<li>Test ourselves on more platforms – OSF/1, Tru64, Ultrix</li>
<li>Build with more platforms’ native tools or other compilers
 – ACK, kencc, ICC/UWIN, egcs/UWIN, tcc</li>
</ul>

<h2 id="clog">Recent Changes</h2>
<p>Changes in the current (unreleased) development version:</p><ul>
 <li>Begin porting mksh to the <a href="http://9fans.net/">Plan 9</a>
  ANSI’n’POSIX Environment (not finished)</li>
 <li>Plan porting mksh to <a href="http://www.minix3.org/">Minix 3</a>
  (not finished yet)</li>
 <li>Port to <a href="http://www.syllable.org/">Syllable</a> (segfaults
  on startup @ Syllable Desktop; didn’t test Syllable Server yet)</li>
</ul>
<p>A release with many new features is mksh R33, look yourself:</p><ul>
 <li>Sync with OpenBSD ksh (no real functional changes)</li>
 <li>Enhance the <tt>print</tt> builtin with two new escape sequences:
  <tt>\x<b>AB</b></tt> parses the next up to two hexadecimal digits <b>AB</b>
  and outputs a raw octet (byte) whose ordinary value is <b>AB</b>;
  <tt>\u<b>ABCD</b></tt> parses up to four hexadecimal digits and outputs
  the UTF-8 (CESU-8) representation of the unicode codepoint U+<b>ABCD</b>
  from the BMP (Basic Multilingual Plane), not depending on the locale</li>
 <li>The <tt>.</tt> (“dot”) command (and its counterpart <tt>source</tt>)
  needs an argument (the script to source); from Debian pdksh package</li>
 <li>In the lexer, do not expand aliases if there is an opening parenthesis
  just after the token (from Debian pdksh). This fixes the namespace issue
  that caused a POSIX function definition <tt>stop() { … }</tt> to fail due
  to “stop” being a built-in Korn shell alias. Now, aliases are removed when
  a POSIX function with the same name is defined; Korn functions are still
  different: their definition does not fail, but the alias retains its
  precendence (unchanged behaviour)</li>
 <li>Accordingly, do not disable built-in aliases in POSIX mode any more</li>
 <li>Since POSIX mode now only turns off braceexpand mode (which can then
  be turned back on), do not handle being called as <tt>-sh</tt> or <tt>sh</tt>
  specially any longer</li>
 <li>Clean up the source code: make some constants private to the only file
  using it; optimise; comment some code; improve portability with regards to
  stupid tools in /usr/bin (or /usr/xpg4/bin) and foreign compilers</li>
 <li>Implement “here strings” (like ksh93 or zsh; GNU bash collapses white
  space if the string is not double-quoted): you can now replace <tt>print
  -r -- "$foo" | command</tt> with <tt>command &lt;&lt;&lt;"$foo"</tt> with
  the very same semantics as <tt>command &lt;&lt;EOF<br />$foo<br />EOF</tt>
  (stripping initial tabs is not possible)</li>
 <li>Implement string replacement <tt>${var/pattern/string}</tt> (where
  <em>pattern</em> is an extended glob pattern), like GNU bash; like with
  the substring accessor (<tt>${var: x: y}</tt>) mksh implements almost all
  corner cases (and double slash), but do not handle trimming arrays yet</li>
 <li><em>Side note:</em> You can now, as a consequence of the two items
  above, write, for instance, <tt>x=${x//foo*bar/baz}</tt> instead of the
  more complicated <tt>x=$(sed -e 's/foo.*bar/baz/g' &lt;&lt;&lt;"$x")</tt>
  or the mksh R32 and before idiom <tt>x=$(print -r -- "$x" | sed -e
  's/foo.*bar/baz/g')</tt> – be sure to check $KSH_VERSION first though</li>
 <li>Use the new <tt>&#36;Mdocdate&#36;</tt> RCS keyword in the manual page
  mksh(1) as well; since this is not portable in tmac.doc especially to GNU
  groff, prepend a seven-liner implementing it to the <tt>.Dd</tt> macro</li>
 <li>Fix a mistake in using the <tt>.Nm</tt> macro in the manual page</li>
 <li>Make <tt>Build.sh</tt> and the generated <tt>test.sh</tt> more chatty
  about what they’re doing and what versions (aids debugging build logs)</li>
 <li>Update the <tt>dot.mkshrc</tt> sample and make it more portable; it
 requires mksh R33 or above now though due to use of special functions</li>
 <li>Enhance the website, especially the section about official testing:
  now, the tests are split into tests done by us via Makefile (MirOS only),
  Build.sh (portably), porting frameworks, with arc4random.c added, tests by
  others via Build.sh, via packaging frameworks, failed tests; more links</li>
 <li>Note: the “vi” editing mode is code of historical value and, at the
  moment, unmaintained. It does not benefit from the fixes to the “emacs”
  editing mode (horizontal scrolling) or new features (bind keys that end
  their sequence with a tilde; UTF-8 support). Neither is it supported in
  either editing mode to bind keys that generate a sequence consisting of
  more than just a prefix (ESC, ^X, or ESC [), another octet and (“emacs”
  only) an optional tilde (but this might come in the future). This is
  explicitly mentioned here due to a user inquiry.</li>
</ul>
<p>Sported by mksh R32 are these changes:</p><ul>
 <li>Make checks for symbol declarations compile checks instead of link
  checks, as the binding may not succeed due to different symbol types,
  for instance on AIX, if the declaration does not match</li>
 <li>Widen the range of array indices to [0‥2³²-1], with negative values
  being mapped into the high-bit31 range for simplicity</li>
 <li>Fix the pipeline-as-coprocess internal error</li>
 <li>Do not require certain integer types to be defined any more</li>
 <li>Optimise the code and reduce its RAM usage</li>
</ul>
<p>Everyone should upgrade to mksh R31d with fixes for…</p><ul>
 <li>Support pcc (the ragge version of the Portable C Compiler)</li>
 <li>Add pushd/popd/dirs functions (csh) and precmd/chpwd hooks (zsh) to
  <tt>dot.mkshrc</tt> which now requires readlink(1) with <tt>-f</tt>;
  requested by many (e.g. some Gentoo users; XTaran of symlink.ch)</li>
 <li>Enable colour escapes in <tt>dot.mkshrc</tt> since almost nobody groks
  how to do it right from the manual</li>
 <li>Remove <tt>-DMKSH_NEED_MKNOD</tt> checks from <tt>Build.sh</tt>,
  people should use the <tt>HAVE_MKNOD</tt> environment variable</li>
 <li>Implement parallel make in <tt>Build.sh</tt></li>
 <li>Fix another busy-loop spinning problem introduced by an icc warning,
  thanks to spaetzle@freewrt.org for keeping to bug me to look for it, as
  it affected GNU/Linux most, followed by Solaris, rarely BSD</li>
 <li>Improve standard integer type detection in <tt>Build.sh</tt></li>
 <li>Cleanups in code, build script and manual page</li>
</ul>
<p>The mksh R31c (Solaris-only) upgrade for cnuke@ was caused by:</p><ul>
 <li>Clean up <tt>Build.sh</tt> and “test … -o …” doesn’t exist in Bourne</li>
 <li>Detect if the non-standard <tt>u_int32_t</tt> type, which was
  unfortunately used by the OpenBSD project in designing the standard
  arc4random(3) API, is present (which it isn’t on Solaris), and, if
  not, emulate it using the standard <tt>uint32_t</tt> (ISO C99) from
  &lt;stdint.h&gt;, which we fake as needed (if the standard integer
  types are not present, e.g. on PW32 and OSF/1); change mksh as well as <a
  href="http://cvs.mirbsd.de/contrib/code/Snippets/arc4random.c?rev=HEAD">the
  arc4random.c contribution</a> to not use these non-standard types</li>
 <li>Remove unused types from the faked &lt;stdint.h&gt; file</li>
</ul>
<p>A quick upgrade, mksh R31b with major bug fixes:</p><ul>
 <li>Fix typo (blsk → bksl) in <tt>check.t</tt> test naming</li>
 <li>Autoscan for <tt>uint32_t</tt>, <tt>u_int</tt> etc. presence</li>
 <li>Fix some memory leaks, mostly by NetBSD® via OpenBSD</li>
 <li>The “unset” builtin always returns zero, even if the variable
  was already unset, as per SUSv3 (reported by Arkadiusz Miskiewicz
  via pld-linux → oksh)</li>
 <li>In tab-completion, escape the question mark, reminded by
  cbiere@netbsd.org, via oksh</li>
 <li>Fix a busy-loop problem, Debian #296446 via oksh</li>
 <li>Fix a few display output problems in the build script</li>
 <li>Shut up some gcc warnings on Fedora; beautify some code</li>
 <li>Support OSF/1 with gcc2.8, thanks to Jupp Schugt</li>
 <li>Fix gcc4 detection of __attribute__() on non-SSP targets</li>
</ul>
<p>mksh R31 was released as part of MirOS #10 with these news:</p><ul>
 <li>Support the TenDRA compiler (possibly also Ten15, not tried)</li>
 <li>Begin supporting Fabrice Bellard’s Tiny C Compiler (tcc on Debian
  cannot link due to duplicate symbols in GNU libc, thus unfinished)</li>
 <li>Improve some mirtoconf checks (most notably, mknod(2) and macros)</li>
 <li>Add new emacs editing command “clear-screen” (<tt>ESC ^L</tt>)
  as requested by D. Adam Karim &lt;archite@midnightbsd.org&gt;</li>
 <li>Support building for MidnightBSD</li>
 <li>Add new shell alias “source”, semantics like the GNU bash builtin</li>
 <li>Add new shell option “set ±o arc4random”, controlling whether rand(3) or
  arc4random(3) is used for the $RANDOM value, use arc4random_pushb(3)</li>
 <li>Add new builtin “rename” (just calls rename(2) on its arguments)</li>
 <li>Fix the inofficial OpenBSD port, from D. Adam “Archite” Karim, 10x</li>
 <li>Disable the less(1) history file by default (privacy issues) in the sample
  <tt>dot.mkshrc</tt> file; mention other things in <tt>etc_profile</tt></li>
 <li>Fix a syntax error in Build.sh checking for TenDRA</li>
</ul>
<p>A milestone in development: mksh R30 can do this:</p><ul>
 <li>Build on and for Solaris, Linux and MirBSD with Sun’s C compiler</li>
 <li>No longer build a statically linked shell by default; do not try,
  do not provide any means; user has to use LDFLAGS instead</li>
 <li>Remove some probably dead mirtoconf checks</li>
 <li>Remove commented out <tt>-fwhole-program --combine</tt> check and
  still active <tt>-fno-tree-vrp</tt> bug workaround thing, the latter
  because the bug seems to only appear for functions that also exist as
  a builtin (which was declared with the nonnull attribute)</li>
 <li>Fix a long-standing typo, 10x moritz@obsd</li>
 <li>Prefer more common signal names (SIGCHLD) over uncommon ones (SIGCLD)</li>
 <li>Quieten gcc and support SUNpro 5.8 on Solaris 10 on sparc64</li>
 <li>Optimise signal handling and detection; enable compilers whose
  præprocessor doesn’t have <tt>-dD</tt> to generate list of signals</li>
 <li>Optimise mirtoconf meta-checks for persistent history etc.</li>
 <li>Fix a bug preventing manual page generation on Solaris</li>
 <li>Add support for the Intel® C Compiler and quieten it a little; fix a few
  minor buglets (mostly type conversion) its too verbose warnings show, as
  well as some errno ab-/mis-use</li>
 <li>Remove support for honouring the <tt>CPP</tt> environment variable;
  <tt>$CC -E -</tt> is simply used instead in the places where <tt>$CPP</tt>
  was used previously, because that was used in other places already, and
  to prevent it from behaving differently from the $CC used</li>
 <li>If a file called <tt>arc4random.c</tt> is lying around in the source
  directory at mirtoconf time, scan for <tt>&lt;sys/sysctl.h&gt;</tt> and
  use the file if arc4random(3) isn’t found otherwise. From Debian.</li>
 <li>If the basename of argv[0] starts with “sh”, activate FPOSIX
  early, preventing some typical ksh aliases from being defined</li>
 <li>If FPOSIX, don’t pre-define aliases (except integer and local) to benefit
  operating environments that never heard of the great Korn Shell…</li>
 <li>#if defined(MKSH_SMALL) || defined(MKSH_NOVI) disable the vi
  editing mode</li>
 <li>Don’t try to execute ELF, a.out, COFF, gzip or MZ binaries</li>
 <li>Can be built on HP-UX (PA-RISC and IA64) with gcc or HP C/aC++</li>
 <li>Support <tt>x=(a b c)</tt> bash-like array initialisation</li>
 <li>Support <tt>${foo:2:3}</tt> bash-like substring expansion</li>
 <li>Many mirtoconf improvements, fixes; speed-up; better portability</li>
 <li>Enable compilation using Microsoft C/C++ Standard Compiler</li>
 <li>Add UWIN build target using various compilers with the cc wrapper</li>
 <li>Fix struct padding mistakes uncovered by the Microsoft compiler</li>
 <li>Fix double initialisation / unused value assignment errors unveiled
  by Borland C++ Builder 5.5</li>
 <li>Fix superfluous code detected by gcc 4.2</li>
 <li>Fix large file support for OSes that require CPPFLAGS contains
  <tt>-D_FILE_OFFSET_BITS=64</tt> – it was detected but not actually
  used in the build; thanks to hondza for the problem report!</li>
 <li>Give the lexer a bigger state stack if !MKSH_SMALL</li>
 <li>Prepare for addition of make(1)-style search/replace operations;
  correct the code for other substitution expansion operations</li>
 <li>Default $CC to cc not gcc, this is no non-unix-ware ☺</li>
 <li>Support AIX with gcc and xlC; clean up code to warning-free</li>
 <li>Prefer well-known signal names to alphabetically earlier ones</li>
 <li>Fix a bug delivering ERR and EXIT pseudo-signals to traps combined
  with “set -e”, thanks Clint Pachl and Otto Moerbeek for the hint</li>
</ul>
<p><a href="mksh_old.htm#clog">older changes</a></p>
EOF
mws_putfooter
exit 0
