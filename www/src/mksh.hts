# This file is part of the website of The MirOS Project, which is
# copyrighted material, please read the LICENCE file for details.

mws_setname subprojects/mksh "mksh – the MirBSD Korn Shell"
mws_setrss "tag_mksh.rss"
mws_setheadline The MirBSD Korn Shell
mws_putheader '$MirOS: www/src/mksh.hts,v 1.500 2013/02/19 19:29:12 tg Exp $'
mws_content <<'EOF'
<h2 id="toc">Table of Contents</h2><ul>
 <li><a href="#prefetch">Introduction</a> and Licence</li>
 <li><a href="#irc">Documentation and Support</a> (IRC, manual page,
  mailing lists, RSS feeds, …)</li>
 <li><a href="#build">Installation</a></li>
 <li><a href="#upgrade">Upgrade</a> your packages from older mksh</li>
 <li><a href="#getcvs">Development version</a></li>
 <li>Inclusion in <a href="#otheros">operating systems</a></li>
 <li><a href="mksh_old.htm#contrib">comparison</a> with other shells</li>
 <li><a href="mksh_bld.htm">Testsuite Results</a> (regression tests)</li>
 <li><a href="mksh_old.htm#vsn">on version numbers</a> – for packagers</li>
 <li><a href="#plans">future plans</a> (<a href="mksh_old.htm#plans">older
  or unrealistic ones</a>)</li>
 <li><a href="#caveat">Upgrade Caveat</a> – for users</li>
 <li><a href="#clog">ChangeLog</a></li>
 <li>information about <a href="mksh_old.htm">old versions</a></li>
</ul>

<h2>mksh(1) R43</h2>

<p>This is the website of the MirBSD™ Korn Shell, an actively developed free
 implementation of the Korn Shell programming language and a successor to the
 Public Domain Korn Shell (pdksh).</p>

<p class="cr"><span class="fr" style="width:136px; height:128px;"><object
  type="image/svg+xml" data="@@RELPATH@@pics/mksh.svg"
  width="128" height="100"><img alt="mksh Logo"
  src="@@RELPATH@@pics/mksh128x100.png" /></object>
 </span>This page is always accessible via a redirection at <a
 href="http://mirbsd.de/mksh"><tt>http://mirbsd.de/mksh</tt></a>, which is
 the canonical homepage URI. There also is (most of the time) <a
 href="http://freecode.com/projects/mksh">mksh on Freshmeat</a> and an <a
 href="https://www.ohloh.net/p/mksh">mksh project page on ohlol</a>, a
 statistics site. mksh is <a href="https://launchpad.net/mksh">experimentally
 tracked at Launchpad</a>. Download the Logo as <a
 href="@@RELPATH@@pics/mksh.svg">SVG</a> if you want. There’s also a <a
 href="@@ABSPATH@@/TaC-mksh.txt">full licence terms</a> overview.</p>

<h2 class="cr" id="prefetch">Introduction</h2>
<p>The current version of mksh is <strong>mksh R43</strong> from
 <em>19 February 2013</em>.<br />In the stable bugfixing-only series, the
 current version is <em>mksh R41c</em> from <em>15 February 2013</em>.</p>
<p>Thanks to “Der Verein <a href="http://www.trash.net/verein/">trash.net</a>”
 for sponsoring access to a Solaris 8 box. Thanks to Julian “yofuh” Wiesener
 for just another account on a Sun E420 on Solaris 11β. Thanks to someone who
 prefers to stay anonymous due to tons of red tape for providing access to an
 AIX 5.3 system with gcc and xlC installed. (Both are now defunct.) Thanks to
 Jupp “cnuke” Söntgen for building on AIX in Dresden nowadays. Thanks to HP
 TestDrive/PvP/DSPP/CLOE, which helps in keeping mksh portable to several
 Unixes and compilers, and track down some architecture- or glibc-specific
 bugs. (These days, HP-UX/IA64 only, though.) Thanks to gnubber’s admin (Barry
 “bddebian” deFreese), as well as Samuel “youpi” Thibault, for providing shell
 access to a Debian GNU/Hurd system. Thanks to Lucas “laffer1” Holt for ssh
 access to the MidnightBSD server. Thanks to Waldemar “wbx” Brodkorb for
 dropping his unused Zaurus SL-C3200 to someone who can actually make use of
 it to test mksh on OpenBSD. Thanks to Andreas “gecko2” Gockel for access to
 a couple of Debian and Macintosh boxen and an iPhone 3G. Thanks to Martin
 Zobel-Helas for an account on an Alpha system. Thanks to Bastian “waldi”
 Blank for access to an S/390 system and uploading mksh packages to Debian
 for quite some time. Also thanks to Otavio Salvador and Patrick “aptituz”
 Schönfeld for uploading a couple of my Debian packages. The Debian GNU/k*BSD
 and Hurd developers were quite helpful in assisting and testing as well.
 Thanks to Thomas E. “TGEN” Spanjaard for access to both a NetBSD and a
 DragonFly system. Thanks to Josef “jupp” / “penpen” Schugt for testing mksh
 on a Digital Unix (OSF/1 V4.0) system from the Uni Bonn Physik CIP Pool.
 Thanks to DEChengst from #UnixNL for providing access to a HP/Compaq Tru64
 (OSF/1 V5.1B) system, an OSF/1 V2.0 system and an Ultrix 4.5 system. Thanks
 to Adam “replaced” Hoka for a BSDi BSD/OS 3.1 ISO9660 image and offering to
 help with HP-sUX testing (now that HP TestDrive went down) and initial
 porting to Haiku, which was continued at CLT 2010 with help from Stephan
 Aßmus. Thanks to André “naaina” Wösten for ssh on a QNX box. Thanks to
 Olivier Duchateau for testing on Slackware and Zenwalk GNU/Linux.
 Thanks to Winston W. for spotting musl, and thanks to maximilian attems
 and H. Peter Anvin for almost fixing klibc. Thanks to RT|Chatzilla,
 Chris “ir0nh34d” Sutcliffe, and others for Win32 platform assistance.
 (Did I miss anyone? Mail me if so. Some of these are past, anyway.)</p>
<p>What is mksh(1)? – Short answer: The MirBSD Korn Shell. Okay, but what
 exactly does it do, or why another shell? These questions will be answered
 <a href="mksh_old.htm#contrib">here</a> for the people interested. Right now, you only
 need to know that mksh is a <a href="http://www.debian.org/social_contract#guidelines">DFSG</a>-free
 and <a href="http://www.opensource.org/docs/osd">OSD</a>-compliant (and OSI
 approved)
 successor to pdksh, developed as part of <a href="http://mirbsd.de/">the
 MirOS Project</a> as native Bourne/POSIX/Korn shell for MirOS BSD, but also
 to be readily available under other UNIX®-like operating systems.</p>
<p id="lic">The source code for mksh is available at the MirOS Project mirrors
 as well as these of other operating system projects due to being <a
 href="#otheros">included</a> in these; however, we do not provide binaries.
 Find <a href="#build">instructions to build and install mksh</a> below, or
 ask your operating environment vendor to package and include mksh; we provide
 assistance for this task if asked. <em>Licencing</em> permits this as long
 as due credit is given to the authors and contributors and the copyright
 notices are not removed in their entirety; modifying is allowed (but if
 the result is still called mksh, it’s discouraged; talk with us if you
 feel you have to modify mksh). The individual licences used are the MirOS
 licence, and (for BSD compatibility on other operating systems) the 3-clause
 UCB licence and the ISC licence; <a href="@@ABSPATH@@/TaC-mksh.txt">full
 terms</a> are available. pdksh originally was public domain, with a few
 exceptions, but these files are not part of mksh R21 or up. The mksh(1) author
 (mirabilos) acknowledges the contributions of these people who dedicated pdksh
 and oksh to the public, and asserts a collective copyright on the code.
 All these licences are DFSG clean and conform to the OSD, and the MirOS
 Licence is listed on the pages of the ifrOSS licence centre as well as
 in the FSF/UNESCO Directory of Free Software. The MirBSD Korn Shell is <a
 href="@@RELPATH@@permalinks/news_e20081114-nn.htm">OSI Certified <img
 src="@@RELPATH@@pics/open_source_button.png" alt="Open Source Software™" />
 </a> and its <a href="@@ABSPATH@@/man/mksh.1">manual</a> is <a
 href="http://www.opendefinition.org/1.0">Open Knowledge</a>.</p>
<p>To compile mksh, you will need a Bourne or POSIX shell (Solaris
 <tt>/bin/sh</tt> is enough, the Z shell works), a C compiler, system and C
 library header files and the standard C runtime. You will also need a set of
 standard UNIX® tools on a supported operating system: any recent BSD; Darwin,
 Apple Mac OSX; Interix (Microsoft® Services for Unix 3.5, maybe Subsystem for
 Unix Applications on Win2003/Vista); GNU/Cygwin; UWIN; GNU/Linux (libc5,
 glibc, dietlibc, µClibc, some klibc systems are tested), Debian GNU/kFreeBSD,
 GNU/Hurd or GNU/Linux; Sun Solaris (8, 9, 10, 11), OpenSolaris; AIX; IRIX;
 HP-UX 11i; OSF/1; ULTRIX; Minix 3; NeXTstep (but not OpenStep 4.2); QNX;
 BeOS (with limitations) or Haiku; SCO OpenServer 5 (with limitations) or 6
 or SCO UnixWare; …<br />To run the regression test suite, you will need a not
 too antiquated Perl optimally with POSIX.pm or Errno.pm as well as <tt><a
 href="mksh_old.htm#editor">/bin</a>/ed</tt> (whose installation is
 strongly suggested anyway, because it’s the standard <tt>FCEDIT</tt> history
 editor and standard UNIX® text editor), as well as a controlling terminal,
 usually <tt>/dev/tty</tt> or provided from script(1) or GNU screen.</p>
<p>To use mksh, you only need the C runtime (and any supplemental libraries
 the binary was linked against) and, optionally, <tt>/bin/ed</tt> – for
 interactive use, a controlling terminal is highly recommended because job
 control does not work without one.</p>
<p>To make full use of mksh(1)’s interactive features, it is recommended to
 copy the <tt>dot.mkshrc</tt> file from the source distribution as
 <tt>~/.mkshrc</tt> into the user’s home directory and let the user adjust
 it to suit his needs. The sample file configures a few aliases and shell
 functions as well as a sensible prompt (<tt>$PS1</tt>) and some csh-like
 directory stack functions and zsh-like hooks. Full use of this file requires
 a few special UNIX® tools. Note that <tt>$ENV</tt> must not be set for
 mksh(1) to parse the <tt>~/.mkshrc</tt> file at startup.</p>

<h2 id="irc">Support</h2>
<p>We provide an online manual page in <a
 href="@@ABSPATH@@/man/mksh.1">HTML</a> and <a
 href="@@ABSPATH@@/MirOS/dist/mir/mksh/mksh.pdf">PDF</a> format.
 Reading books about Korn Shells in general is recommended as further help,
 but beware of the <a href="mksh_old.htm#contrib">differences</a> (ATTENTION
 outdated content behind that link) to other shells. Some
 ISBNs are listed at the end of the manual page.</p>
<p>The <a href="@@RELPATH@@tag_mksh.rss">RSS feed</a> collects news and wlog
 entries regarding mksh.</p>
<p>If you require additional assistance or want to discuss bugs, features
 or enhancements, write to the <a href="mailto:miros-mksh@mirbsd.org">mailing
 list</a> (or <a href="mailto:postmaster@mirbsd.org">subscribe</a> to it).
 The mailing list can be reached via the GMane archive using either <a
 href="nntp://news.gmane.org/gmane.os.miros.mksh">NNTP</a> or <a
 href="http://news.gmane.org/gmane.os.miros.mksh">HTTP</a>, or at <a
 href="http://www.mail-archive.com/miros-mksh@mirbsd.org/">The Mail
 Archive</a>, although not at MARC.
 Joining the IRC channel at <a href="http://freenode.net/">Freenode</a>
 (irc.freenode.net, SSL port 6697, insecure port 6667)
 <tt>#!/bin/mksh</tt> (no joke, this is really the channel’s name) and
 <tt>#ksh</tt> (where you must distinguish AT&amp;T ksh from mksh though)
 is recommended as well.</p>

<h2 id="build">Installation</h2>
<p>Skip to the section about being <a href="#otheros">included in operating
 environments</a> unless you really want to compile mksh from source yourself
 or create a package for your operating system of choice.</p>
<p>First off, you have to download the source code from any of the mirrors
 listed below, or any other mirror you know of. Alternatively, use the <a
 href="#getcvs">development version</a> from CVS. Official source code
 distributions are digitally signed with gzsig(1) using the MirOS Project’s <a
 href="/gzsigkey.cer">current signature key</a>. Please verify the signature
 <em>as well as</em> the hashes and/or checksums below, so you’re sure the
 content is intact and the version number on the archive is correct.</p>
<h3 id="mirrors">Known Mirrors</h3><ul>
 <li><a href="https://www.mirbsd.org/MirOS/dist/mir/mksh/mksh-R43.tgz">https://www.mirbsd.org/MirOS/dist/mir/mksh/mksh-R43.tgz</a></li>
 <li><a href="http://pub.allbsd.org/MirOS/dist/mir/mksh/mksh-R43.tgz">http://pub.allbsd.org/MirOS/dist/mir/mksh/mksh-R43.tgz</a></li>
 <li><a href="https://www.mirbsd.org/MirOS/dist/mir/mksh/mksh-R41c;.tgz">https://www.mirbsd.org/MirOS/dist/mir/mksh/mksh-R41c.tgz</a></li>
 <li><a href="http://pub.allbsd.org/MirOS/dist/mir/mksh/mksh-R41c.tgz">http://pub.allbsd.org/MirOS/dist/mir/mksh/mksh-R41c.tgz</a></li>
</ul>
<h3 id="hashes">Checksums and Hashes</h3><ul>
<!-- cd /MirOS/dist/mir/mksh; ls; read x; cksum -a rmd160 -a tiger $x; cksum $PWD/$x; md5 $x -->
  <li>RMD160 (mksh-R43.tgz) = 14acad71f87ea56710510fe2433e0145c347474b</li>
  <li>TIGER (mksh-R43.tgz) = a33234836c4a4e4283a3f8bd6c74aa8d9f99f920d319c0d3</li>
  <li>4208350226 346192 /MirOS/dist/mir/mksh/mksh-R43.tgz</li>
  <li>MD5 (mksh-R43.tgz) = d57433d86d860b351ee0572800038fe9</li>
 <li style="list-style:none;">↑ formal release │ stable bugfix series ↓</li>
  <li>RMD160 (mksh-R41c.tgz) = a7622e1e6dbacf9aaa601cbba2903ef256c2b3b0</li>
  <li>TIGER (mksh-R41c.tgz) = 153e3c992d74c66219e95f579e9f7ca6926f33639e3768d7</li>
  <li>1649994040 343671 /MirOS/dist/mir/mksh/mksh-R41c.tgz</li>
  <li>MD5 (mksh-R41c.tgz) = c3f670b1561514c51c5841a9b8000dab</li>
 <li style="list-style:none;">All official distfiles are gzsig(1)d. with our
  <a href="/gzsigkey.cer">current signature key</a>.</li>
</ul>

<h3 id="decomp">Decompression</h3>
<p>We’re using gzip(1)-compressed POSIX us<!-- -->tar(1) distfiles nowadays,
 so a simple <tt>tar xzf mksh-R43.tgz</tt> will work.</p>

<h3 id="vendorpatching">Patching</h3>
<p>If you’re a packager/vendor and need to patch mksh and deviate from the
 default behaviour for that version which is indicated from $KSH_VERSION,
 patch your shell to append a space plus a vendor-defined string (examples <a
 href="http://cvs.pld-linux.org/cgi-bin/viewvc.cgi/cvs/packages/mksh/mksh-distro.patch?view=co&amp;revision=1.1">PLD</a>,
 <a href="http://patch-tracker.debian.org/patch/misc/view/mksh/35.2-3/sh.h">Debian</a>)
 so they can be distinguished. I think this is a reasonable request.</p>

<h3 id="compile">Compilation</h3>
<p>Now you’re in the source code directory; <tt>Build.sh</tt> does all the
 magic for you. In theory, invoking the command<br />
 <tt>% /bin/sh ./Build.sh</tt><br />
 should work. Relative paths can be used too, for example, instead of cd(1)ing
 to the source directory, you could’ve done<br />
 <tt>% mkdir build; cd build; /bin/sh ../mksh/Build.sh</tt></p>
<p>It is optionally possible to place files, such as <tt>printf.c</tt>, into
 either the current or the source directory. It will need a compile option
 (see below) to be activated. <tt>printf.c</tt> is
 undesirable because it uses stdio, floating point and bloats.</p>
<p>The build script requires a Bourne shell (Solaris <tt>/bin/sh</tt>, the <a
 href="http://heirloom.sourceforge.net/sh.html">Heirloom sh</a>, DEC OSF/1
 V2.0 <tt>/bin/sh</tt>), Korn shell (ksh, ksh88, ksh93, pdksh, mksh, oksh,
 maybe the MKS ksh), POSIX shell (posh, <tt>/usr/xpg4/bin/sh</tt>, ash, dash),
 related shell (yash, J�rg Schilling’s bsh or sh, the Z Shell), or a Bourne
 or POSIX superset (such as GNU bash) to work; the ULTRIX <tt>/bin/sh</tt>
 or the C shell (csh, tcsh) or “bsh” or a scripting shell like the wish won’t.
 <br />Accepted arguments are:</p><ul>
<li><tt>-c</tt> <i>mode</i> – set compiler mode:<ul>
 <li><tt>combine</tt> to use “-fwhole-program --combine” (gcc4)</li>
 <li><tt>dragonegg</tt> to use the LLVM Dragonegg plugin with GCC</li>
 <li><tt>llvm</tt> to compile to bytecode, optimise there (see the
  <tt>-O</tt>/<tt>-o</tt> options) and link with LLVM tools</li>
 <li><tt>lto</tt> to use some kind of Link Time Optimisation with clang
  or gcc-4.5 and up; with fallback to <tt>combine</tt> if not found</li>
 </ul>(mksh R40 and up)</li>
<li><tt>-g</tt> – build with debug info, Valgrind and LLVM/Clang scan-build
 assertions, and <tt>-DDEBUG</tt> in place (mksh R40 and up)</li>
<li><tt>-j</tt> – parallel build (mksh R31d+); use LTO instead if you can</li>
<li><tt>-M</tt> – do not compile but create <tt>Makefrag.inc</tt> (R39b+)</li>
<li><tt>-O</tt> – (default) with “-c llvm” use “-std-compile-opts” (R40+)</li>
<li><tt>-o</tt> <i>opts</i> – with “-c llvm” use these optimisations (R40+)</li>
<li><tt>-Q</tt> – be (only) a little less verbose</li>
<li><tt>-r</tt> – don’t try to build a pre-formatted version
 of the manual page using nroff(1) if found – <em>recommended</em></li>
<li><tt>-v</tt> – display version and exit</li>
</ul>
<p>Note: “-c <i>somemode</i>”, “-j” and “-M” are mutually exclusive.
 The least preferred of the actually compiling flavours is <tt>-j</tt>,
 and the one we consider best is <tt>-c lto</tt> (since it achieves the best
 optimisations). It is sometimes possible to use <tt>-j</tt> together
 with <tt>-c llvm</tt> to parallelise LLVM Bytecode generation, though.</p>
<p>The <a href="@@ABSPATH@@/cvs.cgi/src/bin/mksh/Build.sh?rev=HEAD">build
 script</a> also honours some environment variables detailed at its end.</p>

<h4 id="oespec">Operating Environment specific notes</h4>

<h5 class="cr" id="oe_ack"><img width="71" height="64" alt="[Minix logo]"
 class="fr" src="@@RELPATH@@pics/logos/minix.png" />Compiler: ACK</h5>
<p>Support for <a href="http://www.cs.vu.nl/ack/">ACK on Minix 3</a> has
 been added in mksh R37c with a workaround a known ACK bug (the “const”
 bug); it is now perfectly usable.</p>
<p>Support for <a
 href="http://tack.sourceforge.net/">other ACK versions</a> or targets can
 be user-contributed. It currently lacks a sane frontend supporting things
 like “cc -E” (<tt>ack -E</tt> is ignored), at the least, and does not yet
 process system headers like &lt;sys/types.h&gt;.</p>

<h5 class="cr" id="oe_bcc">Compiler: Borland C++ Builder</h5>
<p>This compiler is somewhat supported in mksh R30 with UWIN’s cc wrapper.
 (We haven’t been able to produce a working executable though.)</p>

<h5 class="cr" id="oe_c68">Compiler: C68 (C386, etc.)</h5>
<p>The Walkers’ C89 compiler is not supported at the moment, but this
 is mostly due to difficulties in figuring it out. Any people who actually
 got it to compile anything, especially for both Linux and Minix, for both
 i386 and m68k, please contact us.</p>

<h5 class="cr" id="oe_decc">Compiler: DEC/Compaq/HP C for OSF/1 and Tru64</h5>
<p>This compiler is fully supported with mksh R33b (partial support did
 appear earlier).</p>
<p>The ucode based compiler, linker and loader for Digital UNIX (OSF/1)
 V2.0 on MIPS is supported since mksh R36. It may, however, be forced to
 link statically to work around a bug in the toolchain.</p>

<h5 class="cr" id="oe_dmc">Compiler: Digital Mars</h5>
<p>This compiler is somewhat supported in mksh R30 with UWIN’s cc wrapper
 and a few kludges. (We haven’t been able to produce a tested executable
 though, due to general stability issues with the UWIN platform.)</p>

<h5 class="cr" id="oe_gcc"><img width="54" height="64" alt="[GCC logo]"
 class="fr" src="@@RELPATH@@pics/logos/gcc.png" />Compiler: GCC</h5>
<p>The GNU C Compiler 1.42, 2.7.2.1, 2.7.2.3, egcs (gcc 2.95) and the GNU
 Compiler Collection (gcc 3.x, 4.x) are known to work, but not all versions
 work on all targets. Early 2.x versions (like 2.1) may make trouble.
 Specific C flags, known extensions, etc. are autoprobed; cross-compilation
 works fine. Use of gcc 4.x is discouraged because of several dangerous changes
 in how the optimiser works; it is possible to work around their trading off
 reliability for benchmark-only speed increases, but because mksh developers
 do not use gcc 4.x this will have to be user-contributed. On the other hand,
 gcc 3.x (in some cases 2.x) is the best choice for compiling mksh.</p>
<p>On BSDi BSD/OS, where gcc 1.42 and gcc 2.7.2.1 are available, the cc(1)
 manual page mentions that gcc 1.42 produces more reliable code, so we
 recommend to build mksh with <tt>CC=cc</tt> (gcc1) instead of <tt>CC=gcc</tt>
 or <tt>CC=gcc2</tt> there instead.</p>
<p>Since mksh uses ProPolice, the Stack-Smashing Protector, some GCC versions’
 compilates require additional shared libraries. To disable this, pass
 <tt>HAVE_CAN_FSTACKPROTECTORALL=0</tt> in the build environment.</p>
<p>GCC and Valgrind do not always play well together, hence the build option
 <tt>-valgrind</tt> adding <tt>-fno-builtin</tt> to avoid gcc producing code
 that can access memory past the end of the allocation.</p>

<h5 class="cr" id="oe_hpc"><img width="111" height="64" alt="[HP-UX logo]"
 class="fr" src="@@RELPATH@@pics/logos/hp-ux.png" />Compiler: HP C/aC++</h5>
<p>HP’s C compiler (/usr/bin/cc on HP-UX) is supported in mksh R30 and above;
 on IA64, only the LP64 model can be used; mksh used to segfault in the ILP32
 module (or rather, the system libraries did, I think), so it was default.
 PA-RISC too works fine, so this compiler is a primary choice.</p>
<p>In mksh R39b and up, you must set <tt>CFLAGS='+O2 +DD64'</tt> on IA64 to get
 the same behaviour as previous versions; the 32-bit mode is now the default.
 The HP-UX bundled compiler <tt>/usr/ccs/bin/cc</tt> works as well as HP aCC,
 except of course that it does not optimise. (GCC and C99 extensions aren’t
 actually used by mksh.)</p>

<h5 class="cr" id="oe_xlc">Compiler: IBM XL C/C++ / VisualAge</h5>
<p>IBM xlC 9.0 on AIX 5.3 is supported in mksh R30 and above.</p>
<p>IBM xlC 8.0 on Linux/POWER and IBM xlC 6.0β on MacOS X are on the TODO.</p>
<p>IBM xlC 7.0 on AIX 5.2 is supported in mksh R35c and above.</p>

<h5 class="cr" id="oe_icc">Compiler: Intel C/C++/Fortran</h5>
<p>ICC emulates GCC quite well (too well for my taste), is fully supported in
 mksh R30 and above on several platforms, but spits out <strong>lots</strong>
 (and I <em>mean</em> huge ugly lots) of bogus warnings during compile. We’re
 not going to work around these; let Intel fix their compiler instead. Some of
 these warnings were even responsible for bugs in mksh.</p>
<p>I could not get the Intel Compiler 10 for Windows® to work.</p>
<p>mksh enables the ICC stack protector option automaticaly. Compilates
 usually require the Intel shared libraries to be around.</p>

<h5 class="cr" id="oe_firm">Compiler: libFirm/cparse</h5>
<p>libFirm with the cparse front-end is indistinguishable from GCC and
 known to build mksh R41 just fine.</p>

<h5 class="cr" id="oe_llvm"><img width="64" height="64" alt="[LLVM logo]"
 class="fr" src="@@RELPATH@@pics/logos/llvm.png" />Compiler: LLVM</h5>
<p>Apple llvm-gcc from Xcode 3.1 had full success with mksh R34.</p>
<p>Vanilla <a href="http://llvm.org/">llvm-gcc</a> works fine as well.</p>
<p>Vanilla <a href="http://clang.llvm.org/">llvm-clang</a> starting at
 r58935 produces working code with mksh R36b and up.</p>

<h5 class="cr" id="oe_msc">Compiler: Microsoft® C/C++</h5>
<p>Support for the Microsoft® C Compiler on Interix and UWIN, with the
 respective <tt>/usr/bin/cc</tt> wrappers, appeared in mksh R30.
 The following product versions have been tested:</p>
<p><tt>CL.EXE: Microsoft (R) 32-bit C/C++ Standard Compiler Version 13.00.9466 for 80x86<br />
 LINK.EXE: Microsoft (R) Incremental Linker Version 7.00.9466</tt><br />
 (both are part of the .NET Common Language Runtime redistributable)</p>
<p><tt>CL.EXE: Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 14.00.50727.42 for 80x86<br />
 LINK.EXE: Microsoft (R) Incremental Linker Version 8.00.50727.42</tt><br />
 (both are part of Visual Studio 2005 C++ Expreß)<br />
 You’ll have to change Interix’ cc(1) wrapper though: replace <tt>/Op</tt>
 with <tt>/Gs-</tt> to disable the stack checks (missing support in libc
 for them, they used to be off by default) and remove <tt>/Ze</tt>.</p>
<p>On Interix (SFU 3.5), this compiler is maturely usable and a good choice.</p>
<p>On GNU/Cygwin, using <a href="http://interix-wgcc.sourceforge.net/">wgcc</a>
 it <em>might</em> be possible to use this compiler. I could not test that yet,
 though.</p>
<p>On UWIN, this is usable as well.</p>

<h5 class="cr" id="oe_mpp">Compiler: MIPSpro</h5>
<p>Support for SGI’s MIPSpro compiler on IRIX appeared in mksh R33b.</p>

<h5 class="cr" id="oe_nwcc"><img width="244" height="64" alt="[nwcc logo]"
 class="fr" src="@@RELPATH@@pics/logos/nwcc.png" />Compiler: nwcc</h5>
<p>Support for nwcc appeared in mksh R36b; it is recommended to use
 nwcc 0.8.1 with mksh R39c or newer. The stack protector is currently
 disabled because it introduces errors.</p>

<h5 class="cr" id="oe_pcc">Compiler: PCC (BSD)</h5>
<p>Support for the Caldera/SCO UNIX® based, BSD-licenced portable C compiler
 in the <a href="http://pcc.ludd.ltu.se/">ragge version</a> has been added
 with mksh R31d. Versions from end of April 2008 onwards are known to work
 reliably, even with -O enabled. Intermediate bugs that may have appeared
 are just as quickly fixed.</p>

<h5 class="cr" id="oe_sun">Compiler: SUNpro</h5>
<p>Support for the <a href="http://developers.sun.com/sunstudio/">SUN Studio
 12</a> compiler (cc 5.9) as well as cc 5.8 appeared in mksh R30; other
 versions might be supported as well. This compiler is a primary choice.</p>

<h6 id="oe_sunmir">Using SUNWcc on MirBSD/i386</h6>
<p>Preparation steps. We assume that Sun Studio is extracted under the
 <tt>/opt/SUNWcc</tt> directory and Linux emulation has been set up.
 From now on, <tt>$S</tt> is <tt>/opt/SUNWcc/sunstudio12.1</tt> (when
 using an older version, no “.1” at the end).</p>
<pre>$ cat $S/../MirBSD/ld                   # must be executable (0555)
#!/bin/mksh
set -A args -- "$@"
integer i=0
while (( i &lt; ${#args[*]} )); do
        [[ ${args[i]} = -dynamic-linker ]] &amp;&amp; args[i+1]=/usr/libexec/ld.so
        [[ ${args[i]} = -Y ]] &amp;&amp; args[i+1]=/usr/lib
        let ++i
done
exec /usr/bin/ld "${args[@]}"</pre>
<p>In <tt>$S/prod/include</tt> “mkdir MirBSD_orig” and “mv cc MirBSD_orig/”.
 In <tt>$S/prod/lib</tt> “mkdir MirBSD_orig” and “mv *.o MirBSD_orig/” then
 “mv MirBSD_orig/values-xa.o .” (we need this one).</p>
<p>Furthermore, run “make obj &amp;&amp; make depend &amp;&amp; make &amp;&amp;
 make sunstuff” in <tt>/usr/src/lib/csu/i386_elf</tt> then copy the three files
 obj/sun_crt{1,i,n}.o to <tt>$S/prod/lib/</tt>crt{1,i,n}.o (they are the MirBSD
 glue code / startup files).</p>
<p>For some versions, you may need to ensure <tt>/emul/linux/lib</tt> and
 <tt>/emul/linux/usr/lib</tt> do not contain any *.so or *.o files, except
 for libbfd, libopcodes, libstdc++ (but 12.1 uses the native linker).</p>
<p>In 12, -xO2 is broken; in 12.1 optimisation merely lets ir2hf run out
 of memory even with ulimit -d ulimit -dS 1572864, hence, -xipo cannot be
 used either. ☹</p>
<p><strong>Using SUNWcc on MirBSD to build mksh</strong></p>
<pre> $ S=/opt/SUNWcc/sunstudio12.1
 $ LD_LIBRARY_PATH=$S/prod/lib/sys:$S/prod/lib:$S/rtlibs CC=$S/prod/bin/cc \
   LDFLAGS="-Yl,$S/../MirBSD" mksh /usr/src/bin/mksh/Build.sh -r</pre>

<h5 class="cr" id="oe_tcc"><img width="100" height="60" alt="[tcc logo]"
 class="fr" src="@@RELPATH@@pics/logos/tcc.png" />Compiler: tcc (Tiny C)</h5>
<p>Support for Fabrice Bellard’s tcc appeared in mksh R31, although its
 unability to do ‘-E’ in older versions gave us some headache. The bounds
 checker is currently disabled as it causes segfaults. Some intermediate
 versions of tcc break every once in a while.</p>

<h5 class="cr" id="oe_t15">Compiler: TenDRA (maybe Ten15 too)</h5>
<p>Support for TenDRA appeared in mksh R31 and appears to be solid; mksh
 uses the ‘system’ profile for compiling by default. Users who wish to
 build mksh with a different profile are welcome to help to port it.</p>
<p>See <a href="#oe_bsu">ULTRIX</a> for an example of getting a ‘POSIX’
 profile to work.</p>

<h5 class="cr" id="oe_muc">Compiler: DEC ucode (MIPS CC)</h5>
<p>Since mksh R33c, ucode on Ultrix is fully supported.</p>

<h5 class="cr" id="oe_usl">Compiler: USL C</h5>
<p>This is the vendor compiler on SCO OpenServer and SCO UnixWare. It is
 recognised from R40f onwards.</p>

<h5 class="cr" id="oe_adk"><img width="112" height="64" alt="[FreeWRT logo]"
 class="fr" src="@@RELPATH@@pics/logos/freewrt.png" />Distribution: FreeWRT, OpenADK, OpenWrt</h5>
<p>These distributions provide the same support cross-platform,
 with µClibc and/or eglibc, and thus should behave the same on
 all supported targets.</p>

<h5 class="cr" id="oe_android">Platform: Android</h5>
<p>Supported with OpenADK (static eglibc) and NDK (although the build
 process is currently not feasible with an Android.mk file but possible
 if the CPPFLAGS and signames.inc are pregenerated; sys_signame[] has
 been pushed upstream and is in Android 1.6). Integration
 into both AOSP and the Google master, as <tt>/system/bin/sh</tt>, has
 been done and it can be enabled on a per-target basis at the moment;
 mksh is shipped with Android 3.0 and newer releases and the standard
 shell of non-emulator builds on Android 4.0 and newer.</p>

<h5 class="cr" id="oe_iphone">Platform: iPhone</h5>
<p>This is just <a href="#oe_osx">Mac OSX</a>, compile (natively, or
 cross via the SDK) and copy.</p>

<h5 class="cr" id="oe_maemo">Platform: Maemo</h5>
<p>This is like Debian, and packaging is available via the Garage and
 the Extras repository. Helpers (for GUI integration and actual on
 device testing) seeked.</p>

<h5 class="cr" id="oe_diet">Toolchain: dietlibc</h5>
<p>Fefe’s dietlibc works in mksh R34, although his opinion towards certain
 standards, such as <tt>caddr_t</tt>, strcasecmp(3), etc. are weird.</p>

<h5 class="cr" id="oe_klcc">Toolchain: klibc</h5>
<p>klibc needs <tt>-DMKSH_NO_LIMITS</tt> and can then use stock klcc as
 compiler wrapper (CC=klcc).</p>

<h5 class="cr" id="oe_musl">Toolchain: musl</h5>
<p>Appears to work just fine in R41b and up.</p>

<h5 class="cr" id="oe_bs3">OS: 386BSD</h5>
<p>This seems to work with mksh R41, although on 386BSD-0.0new (anything
 older than 386BSD-0.1) you need to patch the kernel against <a
 href="http://groups.google.com/group/comp.unix.bsd/browse_thread/thread/1c6397039f10e76b">a
 close-on-exec bug</a> and a bug when switching the terminal between <a
 href="http://groups.google.com/group/comp.unix.bsd/browse_thread/thread/cb899f7ccb81550b">cooked
 and raw mode</a> as well add an execve with support for <a
 href="http://www.dnull.com/bsd/oldnews/bsdnew1761.html">shebangs and
 long command liness</a>.</p>

<h5 class="cr" id="oe_aix">OS: AIX</h5>
<p>Support for AIX with xlC appeared in mksh R30.</p>

<h5 class="cr" id="oe_beos">OS: BeOS</h5>
<p>BeOS can, with limitations, be used with R40f and up. Job control is not
 working, and mksh must be rebuilt (once built) by running <tt>Build.sh</tt>
 with the same options again but using the just-built mksh as interpreter
 due to a severe pipe-related bug in the system sh. RT says that “BeOS
 5.1(Dano)/PhOS/Zeta” can be supported. He is also trying to figure out how
 to support BeOS 5.0 and how to distinguish it from 5.1…</p>

<h5 class="cr" id="oe_bsi">OS: BSDi BSD/OS</h5>
<p>BSD/OS 3.1 works fine with mksh R33.</p>

<h5 class="cr" id="oe_coh">OS: Coherent</h5>
<p>This is a somewhat experimental port in mksh R41. (More information
 will follow.) Set <tt>TARGET_OS=Coherent</tt> manually.</p>

<h5 class="cr" id="oe_cyg"><img width="48" height="48" alt="[Cygwin logo]"
 class="fr" src="@@RELPATH@@pics/logos/cygwin.png" />OS: GNU/Cygwin</h5>
<p>This operating environment is supported as much as it adheres to standard
 POSIX/SUSv3 conformant things. No workarounds for <tt>.exe</tt> suffixes or
 other platform-specific quirks have been or will be added.</p>

<h5 class="cr" id="oe_osx">OS: Darwin / Mac OSX</h5>
<p>Works pretty well.</p>

<h5 class="cr" id="oe_svr">OS: Dell UNIX 4.0 R2.2 (SVR4)</h5>
<p>This exot has been tested with R40f: gcc is absolutely unusable on this
 platform but the vendor compiler works.<br />
 Set <tt>TARGET_OS=_svr4</tt> manually.</p>

<h5 class="cr" id="oe_dos">OS: MS-DOS, DR DOS, FreeDOS</h5>
<p>DJGPP’s bash.exe fails to run Build.sh, thus this is currently not
 supported. (We tried!)</p>

<h5 class="cr" id="oe_dfl"><img width="56" height="60" alt="[DragonFly logo]"
 class="fr" src="@@RELPATH@@pics/logos/dfbsd.png" />OS: DragonFly BSD</h5>
<p>Perfect choice. Note <tt>/bin/sh</tt> compatibility needs a quirk.</p>

<h5 class="cr" id="oe_bsf"><img width="64" height="64" alt="[FreeBSD logo]"
 class="fr" src="@@RELPATH@@pics/logos/freebsd.png" />OS: FreeBSD</h5>
<p>Perfect choice. Note <tt>/bin/sh</tt> compatibility needs a quirk.</p>

<h5 class="cr" id="oe_hurd"><img width="64" height="64" alt="[Hurd logo]"
 class="fr" src="@@RELPATH@@pics/logos/hurd.png" />OS: GNU/Hurd</h5>
<p>This operating system is supported (on i386) since R29 but not well
 tested. mksh is part of Debian GNU/Hurd, so it is expected to work.</p>
<p>Starting with mksh R39b, there is no arbitrary limit on pathnames any
 more, as the operating system requires. (However, there are still other
 inherent limits in mksh, such as that of an interactive input line.)</p>

<h5 class="cr" id="oe_kbsd"><img width="64" height="64" alt="[Debian GNU/kFreeBSD logo]"
 class="fr" src="@@RELPATH@@pics/logos/kfreebsd.png" />OS: GNU/k*BSD</h5>
<p>This operating environment has been supported for quite a while as part
 of Debian and somewhat tested.</p>

<h5 class="cr" id="oe_linux"><img width="74" height="88" alt="[Linux logo]"
 class="fr" src="@@RELPATH@@pics/pinguin.png" />OS: GNU/Linux</h5>
<p>While POSIX does not apply to “GNU’s Not Unix”, the <a
 href="http://www.pathname.com/fhs/pub/fhs-2.3.html#SPECIFICOPTIONS2">FHS</a>
 (ex-FSSTND) does; please convince your distributor to move ed to /bin/ed if
 not already done. Manual page installation paths are not standardised in
 older distributions either.</p>
<p>Besides glibc (GNU libc), dietlibc (from Fefe), µClibc (embedded),
 klibc (for initramfs) and libc5 (on Linux 2.0.38) work, but locale
 detection is not automatic for some of them.</p>
<p>mksh can be used as /bin/sh on Debian and similarly strict distributions,
 which allow to use e.g. ash/dash there as well.</p>

<h5 class="cr" id="oe_haiku"><img width="236" height="64" alt="[Haiku logo]"
 class="fr" src="@@RELPATH@@pics/logos/haiku.png" />OS: Haiku</h5>
<p>Haiku can be used with mksh R39c and newer with a recent kernel from <a
 href="http://dev.haiku-os.org/ticket/5567">r35836 and newer, ca. mid-2010</a>
 due to a bugfix wrt. signal handling. gcc4hybrid might not work, gcc2hybrid
 might work well.</p>

<h5 class="cr" id="oe_hpux"><img width="111" height="64" alt="[HP-UX logo]"
 class="fr" src="@@RELPATH@@pics/logos/hp-ux.png" />OS: HP-UX</h5>
<p>Support for HP-UX with GCC appeared in mksh R29 and works with HP’s C
 compiler and is no longer experimental in mksh R30. Please use stty(1) to
 make the terminal sanely usable.</p>
<p>If passing custom CFLAGS, don’t forget <tt>-mlp64</tt> (GCC) or
 <tt>+DD64</tt> on Itanium.</p>

<h5 class="cr" id="oe_interix">OS: Interix</h5>
<p>We have only tested SFU 3.5 on Windows® 2000, not SUA on Windows® 2003 SR1
 or the version integrated into Vista. Windows 7’s works, gcc only though.</p>
<p>As the Unix Perl which comes with Interix is too old, and the ActiveState
 Perl has… other issues, to run the regression tests, please install Perl from
 <a href="http://www.pkgsrc.org/">NetBSD® pkgsrc®</a> instead.</p>
<p>As of mksh R30, the native compiler (cc(1)) is supported in addition
 to gcc, calling Microsoft C. Do not use the c89(1) wrapper.</p>
<p>If passing custom LIBS, don’t forget to add <tt>-lcrypt</tt> or any other
 library providing arc4random(3).</p>
<p>mksh can replace /bin/ksh and /bin/sh without any problems.</p>

<h5 class="cr" id="oe_sgi">OS: IRIX</h5>
<p>Support for IRIX64 6.5 appeared in mksh R33b.</p>

<h5 class="cr" id="oe_lynx">OS: LynxOS</h5>
<p>Although the promised evaluation version never arrived, someone managed
 to test mksh R40f on LynxOS 3.</p>

<h5 class="cr" id="oe_mnbsd"><img width="64" height="64" alt="[MidnightBSD logo]"
 class="fr" src="@@RELPATH@@pics/logos/mnbsd.png" />OS: MidnightBSD</h5>
<p>mksh is part of MidnightBSD 0.2-CURRENT and above and used as native
 /bin/ksh; it can be used as /bin/sh as well with a quirk.</p>
<p>MidnightBSD 0.3 uses mksh as <tt>/bin/sh</tt> indeed.</p>

<h5 class="cr" id="oe_minix"><img width="71" height="64" alt="[Minix logo]"
 class="fr" src="@@RELPATH@@pics/logos/minix.png" />OS: Minix 3</h5>
<p>Minix 3 is supported starting mksh R37b (gcc), R37c (ACK/adk cc).
 Minix 1 and Minix 2 will never be supported due to size constraints on
 16-bit platforms, unless a user contributes code. You will need:</p>
<pre># chmem =1048576 /usr/lib/em_cemcom.ansi
# chmem =262144 /usr/lib/i386/as</pre>
<p>Append the following line to main.c on Minix 3.1.2a or older:</p>
<pre>void _longjmp(jmp_buf env, int val) { longjmp(env, val); }</pre>
<h5>OS: Ninix 3</h5>
<p>Ninix 3 (Minix 3 with NetBSD® code) has first been working starting
 with mksh R40e (clang). More porting and tests are needed. <strong>This
 is different from “regular” Minix 3.</strong> Do be sure to set your
 <tt>TARGET_OS</tt> environment variable correctly.</p>
<h5>OS: Minix-386</h5>
<p>mksh R42 works on Minix-386 down to version 1.7.0 but not 1.5 due
 to OS limitations; you might have to compile on version 2.0 as the
 ACK bundled with 1.7 segfaults.</p>
<h5>OS: Minix-vmd</h5>
<p>mksh R42 works fine on Minix-vmd 1.7 with ACK.</p>

<h5 class="cr" id="oe_mnt">OS: MiNT / FreeMiNT</h5>
<p>Support appeared in mksh R40. Depending on the distribution you use,
 you must use pdksh with CC=gcc to run
 <tt>Build.sh</tt> – cc and bash are both too broken. Afterwards, you
 <strong>must</strong> use the just-built mksh (after moving it out of
 the build directory) to re-run <tt>Build.sh</tt> with the same flags,
 due to bugs in pdksh on MiNT as well.</p>
<p>Most things work. FD_CLOEXEC is broken, so filedescriptor privacy
 has POSIX level only. <tt>/dev/tty</tt> is usually unusable; it might
 help to symlink <tt>/dev/console</tt> there but break other things.</p>
<p>(At OpenRheinRuhr 2011, tg@ had access to a FreeMiNT distribution
 which did not seem to exhibit any of the mentioned problems. YMMV.)</p>

<h5 class="cr" id="oe_bsm"><img width="98" height="92" alt="[MirBSD logo]"
 class="fr" src="@@RELPATH@@pics/logosmw.png" />OS: MirBSD</h5>
<p>Perfect choice. This is where mksh comes from.</p>

<h5 class="cr" id="oe_msys">OS: MSYS</h5>
<p>mksh compiles on MSYS (that is something different from using MinGW for
 the nascent <a href="#oe_winapi">native WinAPI port</a>; it’s basically
 an old version of Cygwin wrapped) with few issues.</p>

<h5 class="cr" id="oe_bsn"><img width="80" height="60" alt="[NetBSD logo]"
 class="fr" src="@@RELPATH@@pics/logos/netbsd.png" />OS: NetBSD</h5>
<p>Perfect choice.</p>
<p>Starting with NetBSD 1.6, mksh can replace /bin/ksh and /bin/sh without
 any problems. On NetBSD 1.5, mksh can only replace /bin/ksh safely.</p>

<h5 class="cr" id="oe_nxs">OS: NeXTstep</h5>
<p>Except for OpenStep 4.2 which has a completely botched POSIX library
 (although rumours are there is a libposix.a in existence that can be
 copied onto it), it works with R40f onwards. (Binaries of NeXTstep 3.3
 can be copied onto OpenStep 4.2 and used there.) You need gawk.</p>

<h5 class="cr" id="oe_bso"><img width="70" height="64" alt="[OpenBSD logo]"
 class="fr" src="@@RELPATH@@pics/logos/openbsd.png" />OS: OpenBSD</h5>
<p>The setlocale(3) call in OpenBSD’s libc will always return the “C”
 locale and therefore has been disabled by default.</p>
<p>mksh can replace /bin/ksh and /bin/sh without any problems. mksh is
 supposed to be a superset of oksh (except GNU bash-style PS1, weird
 POSuX character classes, and an incompatible ulimit builtin change).</p>

<h5 class="cr" id="oe_osf1">OS: DEC/Compaq OSF/1, Compaq/HP Tru64</h5>
<p>Digital Unix is somewhat supported using gcc as of mksh R31b.
 With mksh R33b, many more versions and the native compiler work.
 In fact, gcc sometimes segfaults, so use the vendor compiler.</p>

<h5 class="cr" id="oe_plan9"><img width="50" height="64" alt="[Plan 9 mascot]"
 class="fr" src="@@RELPATH@@pics/logos/glenda.png" />OS: Plan 9</h5>
<p><strong>Needs retesting with mksh R40+</strong> (port unfinished)</p>
<p>Plan 9 is not supported yet – we were able to create an executable, but
 it did not return to the prompt after running a non-builtin command; this
 is job control issues, and patches are welcome. (Note this is for R37 and
 below; R37b might actually work, but someone would have to test this.)</p>
<p>Due to the unavailability of ttys, job control will never be supported.
 With <tt>-DMKSH_NOPROSPECTOFWORK</tt> it will probably work. (Note that
 this option produces a shell not supporting standard Korn Shell scripts.)</p>
<p>The APE (ANSI’n’POSIX Environment) is required to build mksh; I don’t
 remember which compiler I used, but I think it was GCC.</p>

<h5 class="cr" id="oe_pw32">OS: PW32 on Win2k</h5>
<p>PW32 is not supported yet – killpg(3) is missing, and it’s possible that
 PW32 needs job control disabled or worked around, since a workable binary
 can be made with <tt>-DMKSH_NOPROSPECTOFWORK</tt> (note that this option
 produces a shell not supporting standard Korn Shell scripts).
 Maybe peek at how ash/bash for PW32 do it. gcc works.</p>

<h5 class="cr" id="oe_qnx">OS: QNX/Neutrino</h5>
<p>QNX/Neutrino (Perl: “nto”) support appeared in mksh R36b.</p>
<p>The QNX ed(1) used to fail the regression tests due to being broken;
 compile the MirBSD ed and place it in <tt>/bin/</tt> to fix this, or
 get an updated ed from vendor.</p>

<h5 class="cr" id="oe_sco">OS: SCO OpenServer, SCO UnixWare</h5>
<p>SCO OpenServer 5 lacks job support, which SCO OpenServer 6 and SCO
 UnixWare 7.1.1 appear to have working.</p>

<h5 class="cr" id="oe_skyos">OS: SkyOS</h5>
<p>RT managed to build mksh on SkyOS. It somewhat works, and the testsuite
 failures are probably all bugs in their POSIX layer.</p>

<h5 class="cr" id="oe_solaris"><img width="68" height="64" alt="[OpenSolaris logo]"
 class="fr" src="@@RELPATH@@pics/logos/sunos.png" />OS: Solaris</h5>
<p>Solaris is full supported since “forever” with gcc, and since mksh R30
 with Sun’s C compiler. Both 32-bit and 64-bit modes work; 64-bit mode is
 not enabled by default by <tt>Build.sh</tt>, you must do that manually by
 passing CFLAGS of <tt>-O2 -m64</tt> or <tt>-xO2 -xarch=generic64</tt>.</p>
<p>Solaris does not come with Berkeley mdoc macros for nroff, so using
 the HTML or PDF versions of the manual pages or pregenerating a catman
 page on another OS is required.</p>

<h5 class="cr" id="oe_sunos">OS: SunOS</h5>
<p>On mksh R42, add <tt>-DMKSH_TYPEDEF_SIG_ATOMIC_T=int</tt> and
 <tt>-DMKSH_TYPEDEF_SSIZE_T=int</tt> in addition to <tt>-DMKSH_UNEMPLOYED</tt>
 <tt>-DUSE_REALLOC_MALLOC=0</tt> and SunOS 4.1.1 with GCC 2.7.2.3 will work.</p>

<h5 class="cr" id="oe_syll"><img width="186" height="64" alt="[Syllable logo]"
 class="fr" src="@@RELPATH@@pics/logos/syllable.png" />OS: Syllable Desktop</h5>
<p><strong>Needs retesting with mksh R40+</strong> (port unfinished)</p>
<p>This OE is <a href="http://forum.syllable.org/viewtopic.php?p=8171">suffering
 from bugs</a>, although R41 works better than ever before. When deactivating
 any and all job handling with <tt>-DMKSH_NOPROSPECTOFWORK</tt> it works a bit
 better. (Note that this option produces a shell not supporting standard Korn
 Shell scripts.)</p>
<p>Syllable Server will work, as it is, <em>at the moment</em>, “just” a
 GNU/Linux distribution with a different GUI. This may change though.</p>

<h5 class="cr" id="oe_bsu">OS: ULTRIX</h5>
<p>Even on ULTRIX 4.5, mksh R33c works fine. The system ksh must be used
 for running the <tt>Build.sh</tt> script, though.</p>
<p>I could not get networking on ULTRIX 4.0 (SIMH) to work, so I could
 not test it there.</p>
<p>You however must pass the <tt>-YPOSIX</tt> option to the ucode compiler,
 as the default <tt>-YBSD</tt> profile produces a broken executable (spins
 instead of starting up), and the <tt>-YSYSTEM_FIVE</tt> profile does not
 even compile. See <a href="#oe_t15">TenDRA</a> for another OE which has
 issues with different OE profiles. (<tt>Build.sh</tt> takes care of this
 automatically.)</p>

<h5 class="cr" id="oe_uwin">OS: UWIN-NT</h5>
<p>Compilation of mksh R30 on UWIN works with several compilers (bcc, dmc,
 msc – I could not get gcc-egcs, gcc-2.95, gcc-mingw, icc to work) but the
 platform itself is very flakey, and even some regression tests crash, due
 to target limitations apparently. Within these limits, mksh is usable.</p>

<h5 class="cr" id="oe_winapi">OS: Windows</h5>
<p>Michael Langguth, partially under work sponsored by his employer <a
 href="http://www.scalaris.com/">Scalaris AG</a>, is currently working
 on porting mksh to native Win32 (WinAPI) to complete the GNU utilities
 for Win32 with a native shell to have a free interoperability solution
 for scripting. Progress is promising, but still a long way to go. The
 result will probably not be part of mksh itself, but a separate product;
 some core patches will however end up in core mksh.</p>

<h5 class="cr" id="oe_xenix">OS: Xenix</h5>
<p>SCO Xenix 386 2.3.4a lacks too much functionality to be an mksh target.
 (RT tried!)</p>


<h3 id="postbuild">After compiling</h3>
<p>The <tt>Build.sh</tt> script generates an executable (“mksh”, except on
 GNU/Cygwin, where it is called “mksh.exe”), a shell script to use the newly
 built mksh to run the regression test suite (“test.sh”), and (unless the
 <tt>-r</tt> option was given) a pre-formatted manual page (“mksh.cat1”).
 It also lists installation instructions unless <tt>-Q</tt> was provided.
 Now it’s the time to run<br /><tt>% ./test.sh -v -f</tt><br />
 in order to see if the shell works. The regression testsuite will exit
 with errorlevel 1 if any tests failed that are not marked as allowed to
 fail (e.g. OS dependent) or expected to fail, 0 otherwise. Omit the ‘-f’
 option if you do not have a fast (say 1½ GHz Pentium-M) machine.</p>
<p>The regression tests need a controlling tty. Please ensure you have one,
 even for bulk/dæmonised builds; you can use GNU screen or script(1) to
 provide one by running the testsuite inside it (see the Debian and OpenSuSE
 Buildservive packaging for examples of how to do it). If, however, you
 absolutely cannot get the necessary utilities and devices installed in
 the build chroot, run: <tt>./test.sh -v -C regress:no-ctty</tt></p>
<p>To actually install mksh, copy the binary to some place in $PATH, i.e.
 /bin/mksh, $HOME/.bin/mksh, /usr/local/bin/mksh, or whatever your packaging
 system wants; strip it and run chmod 555 on it. (This can easily be achieved
 with install(1) – on Solaris, this is /usr/ucb/install not /usr/bin/install –
 with the arguments -c, -s, -m 755¹, and -o/-g. ① with 555, strip(1) cannot
 write the file any more, chmod 555 afterwards.) Also append its installation
 path to <tt>/etc/shells</tt>, install the <tt>dot.mkshrc</tt> file (usually
 alongside with the copyright file and other documentation), copy it to
 <tt>/etc/skel/.mkshrc</tt> if your operating environment has this means to
 include default dotfiles; install either the catman page (mksh.cat1) to,
 for example, /usr/share/man/cat1/mksh.0, or the mdoc page (mksh.1) to the
 standard location (/usr/share/man/man1/ or /usr/man/man1/ or whatever your
 operating environment requires). The manual page requires the Berkeley mdoc
 macros (either the BSD or the GNU groff version) to be installed during
 formatting time.</p>
<p>Note that a <tt>~/.mkshrc</tt> file will <em>not</em> be executed if
 <tt>$ENV</tt> is set and not empty, nor is there an <tt>/etc/mkshrc</tt>.</p>

<h2 id="upgrade">For packagers: Upgrades</h2>
<p><strong>Note:</strong> This is <em>not</em> <a href="#clog">the
 ChangeLog</a>, these are the packager-visible upgrade notes regarding
 changes in the build system (<tt>Build.sh</tt> and friends, compiler
 support, packaging conventions, bad examples, etc). This is also <em>not</em>
 <a href="#caveat">the users' upgrade caveat list</a>.<br />Packagers also
 please note: it’s <tt>mksh</tt> or “The MirBSD Korn Shell” (“MidnightBSD
 Korn Shell” is also appropriate), but <em>never</em> <del>Mksh</del> or
 somesuch!</p>
<!--
<p id="pcur"><i>current</i>: <i>(unfinished…)</i></p>
-->
<p id="p43">R43: Unbreaks detection of <tt>sys_siglist[]</tt> and friends’
 definitions. The Makefrag.inc generation shows the check categories.</p>
<p id="p42b">R42b: Dear packagers, please consider subscribing to our <a
 href="@@RELPATH@@rss.htm">miros-mksh mailing list</a> or use the RSS feed.
 The testsuite is now run verbosely by default; use ‘-Q’ to quieten it.</p>
<p id="p42">R42: <tt>MKSH_DISABLE_EXPERIMENTAL</tt> was made a no-op again
 for this release, like <tt>MKSH_DISABLE_DEPRECATED</tt> was for R41. There
 is a new option <tt>DEBUG_LEAKS</tt> which is implied by <tt>DEBUG</tt>,
 which, in turn, you should never enable in production. Handling of time.h
 vs. sys/time.h and sys_errlist[] changed. The default <tt>dot.mkshrc</tt>
 now uses <tt>${ foo;}</tt> constructs ipv <tt>$(foo)</tt> to save a fork(2)
 at the cost of using a file in $TMPDIR; adjust if you really need.</p>
<p id="p41c">R41c: Dear packagers, please consider subscribing to our <a
 href="@@RELPATH@@rss.htm">miros-mksh mailing list</a> or use the RSS feed.</p>
<p id="p41b">R41b: Some bugfixes in Build.sh and the code; GCC now adds
 <tt>-fno-asynchronous-unwind-tables</tt>.</p>
<p id="p41">R41: We’re using POSIX ustar archives now. Honours
 <tt>LDSTATIC</tt> (which is appended to <tt>LDFLAGS</tt> and, if not empty
 (e.g. consists of whitespace), adds more mksh-local code to to the build to
 avoid pulling in more libc code and improving LTO effect. The
 <tt>-long-options</tt> for <tt>Build.sh</tt> are gone. <tt>MKSH_SMALL</tt>
 no longer implies <tt>-fno-inline</tt>. A “legacy ksh” can now be built.
 <a href="http://gcc.gnu.org/bugzilla/show_bug.cgi?id=55009">A GCC bug</a>
 may lead to assertion failures at <tt>Build.sh</tt> check time; in that
 case, you <em>may</em> use a workaround <strong>only if you ensure that
 a run-time test succeeds</strong> (i.e. must not cross-compile except if
 the result is manually checked afterwards): <tt>arith-mandatory</tt> in
 <tt>check.t</tt> <strong>must</strong> pass if <tt>-DMKSH_GCC55009</tt>
 is given (the Debian and OpenSuSE Buildservice packages do the same test
 without using the Perl testsuite).</p>
<p><strong>Warning!</strong> The current <tt>Build.sh</tt> interface
 <em>will</em> change in the future. With run-time checks, mandatory
 testsuite parts, etc. it’s already at its limit, and we’ll be needing
 a host compiler some time later, which will see it revamped. Do read
 the upgrade notes!</p>
<p id="p40f">R40f: Honours <tt>AWK</tt>. Is a lot more anal wrt. using
 cached Makefile includes. Persistent history support may show up.</p>
<p id="p40e">R40e: No longer tries to use GCC and C99 extensions. It has
 a run-time check in Build.sh which may trigger a core dump; <strong>when
 cross-compiling, preseed with HAVE_SILENT_IDIVWRAPV=0 in the environment
 to skip the check and always compile in the safety code</strong>; the check
 is for removing the safety code if it is not needed on the target machine
 (which obviously cannot be checked when cross-compiling) and segfaults if
 it is needed (by design). Support for various OSes has improved.</p>
<p id="p40d">mksh R40d has several new options: <tt>test.sh</tt> ‘-f’ to
 enable running tests that need a fast machine; the preprocessor flag
 <tt>MKSH_DISABLE_DEPRECATED</tt> to disable code that is deprecated and
 scheduled for removal in the next version; updated <tt>dot.mkshrc</tt>.</p>
<p id="p40c">mksh R40c got better support for OPENSTEP, Interix, kFreeBSD,
 MSYS, Hurd. No packaging changes worth mentioning, though.</p>
<p id="p40b">mksh R40b changed <tt>dot.mkshrc</tt> and has a new option for
 disabling special handling the cat(1) builtin. The system and suid profile
 have moved to <tt>/system/etc/</tt> for Android. Build failures (e.g. broken
 system includes abusing <tt>inline</tt> vs. broken GCC <tt>--combine</tt>) may
 now be caught earlier, so <tt>Rebuild.sh</tt> may not be available yet.</p>
<p id="p40">mksh R40 has substantially changed <tt>Build.sh</tt> options,
 CPPFLAGS, etc. and the testsuite now exits with an error code if tests fail.
 Please do review your packaging; contact us if necessary. Specifically for
 embedded systems (do not do this on desktops etc.), the <tt>~/.mkshrc</tt>
 location can be changed at compile time. Several more operating systems are
 supported. <tt>setmode.c</tt> is gone and HAVE_MKNOD defaults to 0 now but
 can be explicitly enabled, provided your OS has setmode(3) and getmode(3),
 or it is provided in $LIBS. <tt>arc4random.c</tt> is no longer used, unless
 specifically called for by <tt>-DMKSH_A4PB</tt> (e.g. on Cygwin). Upgrade
 <tt>printf.c</tt> to the latest version if you use it. First release to
 officially support Android; quell aliasing “stop” and “suspend” there.
 MKSH_SMALL doesn’t imply HAVE_REVOKE=0 any longer.</p>
<p><a href="mksh_old.htm#upgrade">older entries</a></p>

<h2 id="getcvs">Download the development version via CVS</h2>
<p>You can use cvs(GNU) to download the development version of mksh(1),
 commonly called HEAD (or “trunk” to some). Beware of bugs though we
 strive to make it installable (at least on MirBSD ☺) at all times.</p>
<pre>% env CVS_RSH=ssh cvs -qd _anoncvs@anoncvs.mirbsd.org:/cvs co -PA mksh</pre>
<p>You might also want to get the <tt>printf.c</tt> builtin, but this is
 optional, strongly discouraged and use it only if you really must:</p>
<pre>% env CVS_RSH=ssh cvs -qd _anoncvs@anoncvs.mirbsd.org:/cvs co src/usr.bin/printf</pre>
<p>Installation instructions as <a href="#compile">above</a>, although
 the <tt>Build.sh</tt> options, CPPFLAGS, etc. might have changed a
 little in the meantime. In general, you want the following:</p>
<pre>% cd mksh
% sh Build.sh -r -c lto</pre>
<p>Optionally set CC and other variables, as usual.</p>

<h2 id="otheros">Inclusion in other operating systems</h2><ul>
<li class="cr"><img class="fr" width="52" height="64" alt="[Debian logo]"
 src="@@RELPATH@@pics/logos/debian.png" /><a
 href="http://www.debian.org/">Debian</a> GNU/Linux, GNU/Hurd and
 GNU/kFreeBSD have an <a href="http://packages.debian.org/mksh">mksh package</a>
 maintained us.</li>
<li class="cr"><img class="fr" width="61" height="64" alt="[Gentoo logo]"
 src="@@RELPATH@@pics/logos/gentoo.png" /><a
 href="http://www.gentoo.org/">Gentoo GNU/Linux</a> has an mksh <a
 href="http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/app-shells/mksh/">ebuild</a>
 created by <a href="http://www.hboeck.de/">Hanno Böck</a> and kept up
 to date by bonsaikitten.</li>
<li class="cr"><img class="fr" width="64" height="64" alt="[Fedora logo]"
 src="@@RELPATH@@pics/logos/fedora.png" /><a
 href="http://fedoraproject.org/">Fedora</a> GNU/Linux 14, 15 and 16,
 and <a href="http://www.redhat.com/rhel/">RHEL</a> 4, 5 and 6 (via EPEL) now
 officially contain <a
 href="http://fedoraproject.org/wiki/Packages/mksh">an mksh package</a> (<a
 href="http://pkgs.fedoraproject.org/cgit/mksh.git/"><!-- I hate cgit, can't
 you just use gitweb? -->git pkg repo</a>). There are some <a
 href="http://fedoraproject.org/wiki/EPEL/FAQ#How_can_I_install_the_packages_from_the_EPEL_software_repository.3F">Instructions</a>
 for activating EPEL (RHEL only), then just type <tt>yum install mksh</tt>.</li>
<li>Red Hat Enterprise Linux (RHEL 6) will ship mksh for their customers
 to use with their ksh88 and pdksh scripts, as well as an optional shell.</li>
<li class="cr"><img class="fr" width="105" height="64" alt="[SuSE logo]"
 src="@@RELPATH@@pics/logos/suse.png" />The <a
 href="http://en.opensuse.org/Build_Service">OpenSuSE Build
 Service</a> provides an mksh package inside the <a
 href="http://download.opensuse.org/repositories/shells/SLE_11_SP2/src/">shells
 repo</a>, thanks to Pascal “loki” Bleser and Marcus “darix” Rückert; the
 RPMs are available as SRPM (source RPM) as well as for <a
 href="http://download.opensuse.org/repositories/shells/">various
 distributions</a>.
 The inofficial <em>portable</em> SRPM has been retired; the OBS SRPM
 has been changed to be buildable on Debian and MirBSD as well as include
 the contributed <tt>arc4random.c</tt> file. There are <a
 href="http://download.opensuse.org/repositories/home:/mirabile/Mandriva_2010/src/">more
 downloads</a> available, just browse a little.<br />Basically, go to <a
 href="http://download.opensuse.org/repositories/home:/mirabile/">mirabilos’
 home project</a>, find the subdirectory most closely matching your GNU/Linux
 distribution and proceed to the binaries. The SRPMs (source RPM in the
 <tt>*/src/</tt> subdirectories) should be all the same.</li>
<li class="cr"><img class="fr" width="129" height="64" alt="[Fink logo]"
 src="@@RELPATH@@pics/logos/fink.png" /><a
 href="http://finkproject.org/">Fink</a> delivers an <a
 href="http://pdb.finkproject.org/pdb/package.php/mksh">mksh package</a>
 from Andreas “gecko2” Gockel with broken package versioning.</li>
<li class="cr"><img class="fr" width="122" height="64" alt="[SourceMage logo]"
 src="@@RELPATH@@pics/logos/smgl.png" /><a
 href="http://www.sourcemage.org/">SMGL</a> (Sourcemage GNU/Linux) has an
 <a href="http://www.sourcemage.org/projects/grimoire/repository/show/shell-term-fm/mksh/">mksh
 spell</a> in their grimoire, developed by the MirOS Project together with
 Daniel “morfic” Goller, updated by Thomas “sobukus” Orgis and Vlad
 “Stealth” Glagolev.</li>
<li class="cr"><img class="fr" width="112" height="64" alt="[FreeWRT logo]"
 src="@@RELPATH@@pics/logos/freewrt.png" />In the <a
 href="https://www.freewrt.org/trac/">FreeWRT Embedded GNU/Linux
 Appliance Development Kit (meta distribution)</a>, the <a
 href="https://www.freewrt.org/svn/trunk/freewrt/package/mksh/">mksh
 package</a> is maintained by us. mksh is also the default shell in FreeWRT
 trunk (soon to be 1.1) and above. <a href="http://openadk.org/">OpenADK</a>
 (a FreeWRT 1.0 fork) also contains mksh as an optional package.</li>
<li><a href="http://openwrt.org/">OpenWrt Embedded GNU/Linux Distribution</a>
 also <a href="https://dev.openwrt.org/browser/packages/utils/mksh">provides
 mksh</a> (rarely updated) on ADSL/WLAN routers thanks to Felix “nbd” Fietkau.</li>
<li class="cr"><img class="fr" width="60" height="60" alt="[Android-x86 logo]"
 src="@@RELPATH@@pics/logos/andr_x86.png" />The <a
 href="http://www.android-x86.org/">Android-x86 Project</a> has
 mksh as <tt>/bin/sh</tt> since 2010-02-25. AOSP and the Google
 master build mksh and ash since 2010-08-24/25, and it can be
 enabled as <tt>/system/bin/sh</tt> on a per-target basis or the
 default can be switched from ash, which is done for 3.0 and up.
 It’s hard to get updates in there, though.</li>
<li class="cr"><img class="fr" width="66" height="62" alt="[Grml logo]"
 src="@@RELPATH@@pics/logos/grml.png" /><a
 href="http://www.ubuntu.com/">Ubuntu GNU/Linux</a>, the <a
 href="http://grml.org/">grml</a> (and grml64) Live-CD, and other Debian
 derivates also have an mksh package; Knoppix, SIDUX and <a
 href="http://www.nexenta.org/os">Nexenta OS</a> (GNU/Solaris)
 do <em>not</em> contain or offer mksh. <em>Note</em>: We need
 URLs to the packages for these, can anyone provide any?</li>
<li class="cr"><img class="fr" width="68" height="64" alt="[Arch logo]"
 src="@@RELPATH@@pics/logos/arch.png" /><a
 href="http://www.archlinux.org/">Arch GNU/Linux</a> users can install
 an <a href="https://www.archlinux.org/packages/?q=mksh">mksh
 package</a> by Daniel “homsn” Hommel, promoted by Thorsten “Atsutane”
 Töpper, since the Arch Hurd guys were faster.</li>
<li class="cr"><img class="fr" width="58" height="48" alt="[T2 logo]"
 src="@@RELPATH@@pics/logos/t2.png" /><a
 href="http://t2-project.org/">T2 SDE</a> (ROCK Linux) contains a <a
 href="http://t2-project.org/packages/mksh.html">package</a> as well.</li>
<li class="cr"><img class="fr" width="64" height="64" alt="[FreeBSD logo]"
 src="@@RELPATH@@pics/logos/freebsd.png" /><a
 href="http://www.freebsd.org/">FreeBSD®</a> Ports (for FreeBSD, very old
 <a href="http://www.dragonflybsd.org/">DragonFly BSD</a> versions and <a
 href="http://www.desktopbsd.net/">DesktopBSD</a>) also have a <a
 href="http://svnweb.freebsd.org/ports/head/shells/mksh/">port</a> created by
 Andreas “ankon” Kohn and kept up to date by Martin “miwi” Wilke and
 Olivier Duchateau. It is
 unknown if this applies to <a href="http://www.pcbsd.org/">PC-BSD</a> too,
 but there’s no mksh PBI (yet?).</li>
<li class="cr"><img class="fr" width="64" height="64" alt="[MidnightBSD logo]"
 src="@@RELPATH@@pics/logos/mnbsd.png" /><a
 href="http://www.midnightbsd.org/">MidnightBSD</a> uses <a
 href="http://www.midnightbsd.org/cgi-bin/cvsweb.cgi/mports/shells/mksh/">mports</a>, a
 derivate of FreeBSD® ports. Naturally, they deliver mksh as well.
 MidnightBSD 0.2-CURRENT from 18th August 2007 onwards has mksh as both <a
 href="http://www.midnightbsd.org/cgi-bin/cvsweb.cgi/src/contrib/mksh/"><tt>/bin/mksh</tt></a>
 and <a href="http://www.midnightbsd.org/cgi-bin/cvsweb.cgi/src/bin/mksh/"><tt>/bin/ksh</tt></a>,
 i.e. it is the default MidnightBSD Korn shell. From 29 March 2009 onwards, <a
 href="http://www.midnightbsd.org/pipermail/midnightbsd-cvs/2009-March/008099.html">it
 is also the default</a> <tt>/bin/sh</tt> (since MidnightBSD 0.3).</li>
<li class="cr"><img class="fr" width="211" height="64" alt="[pkgsrc logo]"
 src="@@RELPATH@@pics/logos/pkgsrc.png" /><a
 href="http://www.pkgsrc.org/">NetBSD® pkgsrc®</a> (native also on recent
 DragonFly BSD; available for many other operating systems as well) has a <a
 href="http://cvsweb.netbsd.org/bsdweb.cgi/pkgsrc/shells/mksh/">package</a>
 created by us and kept up to date by Blair Sadewitz and our very own Ádám
 “replaced” Hóka and Dr. Benny “benz” Siegert.</li>
<li class="cr"><img class="fr" width="80" height="60" alt="[NetBSD logo]"
 src="@@RELPATH@@pics/logos/netbsd.png" />The <a
 href="http://wiki.netbsd.se/Desktop_Project">Desktop NetBSD
 project</a> also contains mksh; see the source of their <a
 href="http://cvsweb.netbsd.org/bsdweb.cgi/pkgsrc/meta-pkgs/desktop-gnome/Makefile">meta
 package</a>. This will provide their users with a modern, fast, secure,
 featureful shell and enhance the experience.</li>
<li><a href="http://beastiebox.sourceforge.net/">Beastiebox</a> also comes
 with mksh as <a
 href="http://beastiebox.cvs.sourceforge.net/viewvc/beastiebox/beastiebox/beastiebin/mksh/">an
 option</a>. It’s NetBSD® based, mostly.</li>
<li class="cr"><img class="fr" width="85" height="92" alt="[MirPorts quilt]"
 src="@@RELPATH@@pics/quilt.png" />The MirPorts Framework brings mksh to
 OpenBSD, Mac OSX and Interix as well as older MirOS BSD versions, which
 have mksh as native Korn Shell.</li>
<li class="cr"><img class="fr" width="70" height="64" alt="[OpenBSD logo]"
 src="@@RELPATH@@pics/logos/openbsd.png" />An <a
 href="http://thread.gmane.org/gmane.os.openbsd.ports/41322">inofficial
 port</a> for <a href="http://www.openbsd.org/">OpenBSD</a> is available.
 Nobody dares commit it though, so it only gets updated on request.</li>
<li class="cr">ChinaLinux mirrors (and apparently packages) mksh.</li>
<li class="cr"><img class="fr" width="96" height="64" alt="[HMUG logo]"
 src="@@RELPATH@@pics/logos/hmug.png" />The <a
 href="http://www.hmug.org/pub/MacOS_X/BSD/Applications/Shells/mksh/">HMUG</a>,
 some US-American Apple Users’ Group packages mksh for Darwin, too.</li>
<li class="cr">Frugalware Linux contains an orphaned and extremely old mksh <a
 href="http://www.frugalware.org/packages/107405">package</a> looking for a new
 maintainer.</li>
<li class="cr">Olivier Duchateau used to provide Slackware/Zenwalk GNU/Linux
 packages, but <a href="http://slackbuilds.org/repository/13.37/system/mksh/">a
 SlackBuild for mksh</a> is also available now</li>
<li class="cr"><img class="fr" width="262" height="60" alt="[GreenViolet logo]"
 src="@@RELPATH@@pics/logos/lewellyn.png" />(Open)Solaris <a
 href="http://www.greenviolet.net/projects/general-open-source/mksh.gv">packages</a>
 exist courtesy of Matt “lewellyn” Lewandowsky</li>
<li class="cr"><img class="fr" width="109" height="64" alt="[OpenPKG logo]"
 src="@@RELPATH@@pics/logos/openpkg.png" />Apparently, there was an <a
 href="http://www.openpkg.org/product/packages/?package=mksh">OpenPKG
 package</a> as well… before OpenPKG went down the commercial drain</li>
<li class="cr">Dag Wieërs had an RPMforge package, based on Fedora’s</li>
<li class="cr"><img class="fr" width="96" height="64" alt="[PLD Linux logo]"
 src="@@RELPATH@@pics/logos/pld.png" />The <a
 href="http://cvs.pld-linux.org/cgi-bin/viewvc.cgi/cvs/packages/mksh/">PLD
 Linux Distribution</a> also has a very actively maintained one by
 Kacper “draenog” Kornet and Arkadiusz “arekm” Miśkiewicz</li>
<li class="cr"><a href="http://sisyphus.ru/en/srpm/mksh">Alt Linux Sisyphus</a>
 updated their package to the R40 series by now, thanks!</li>
<li class="cr">There are probably many more, please drop us a note!</li>
<li><a href="http://linux.softpedia.com/get/System/Shells/MirBSD-Korn-Shell-24602.shtml">Softpedia</a>
 lists mksh, just like the <a href="http://directory.fsf.org/mksh.html">FSF/UNESCO
 directory of Free Software</a>.</li>
<li><strong>Missing packaging:</strong> SuSE native (use OBS for now), MacPorts
 (none at all), Mandriva/Mageia (use OBS; being worked on), OpenEmbedded
 (being worked on), iPhoneOS (compile yourself; being worked on), Knoppix and
 SIDUX (just add them), Nexenta (need a contact person), Arch native (use
 Community), PC-BSD (use pkgsrc® or so; need a contact person for PBI), OpenSolaris
 (being worked on), OpenBSD (use unofficial port), BeOS (maybe broken) / Haiku,
 Slackware native (use SlackBuild), MPE/iX (no response from the volunteers ☹),
 LynxOS (never got the 30-day eval version they promised me ☹),
 Plan 9 (slightly broken), Syllable Desktop (broken, kernel issue, may have
 been fixed in the meantime), Pardus (maybe being worked on?), NetBSD base
 system (under discussion; pkgsrc® has it), Maemo/MeeGo, Palm WebOS, ...</li>
</ul>
<p>These packages are not official and have not always been tested by mksh
 developers; please keep this in mind.</p>

<h2 id="caveat">Users' Upgrade Caveat</h2>
<p>This does not necessarily list new features, only these which users
 should be aware of for existing scripts.</p>
<!--
<p id="ccur"><i>current</i>: … <i>(unfinished…)</i></p>
-->
<p id="c43">R43: <tt>$'…'</tt> is only allowed where strings are.</p>
<p id="c42b">R42b: Sorry for the “set -e” breakage.</p>
<p id="c42">R42: <tt>${ foo;}</tt> constructs now handle <tt>local</tt>,
 <tt>return</tt> and <tt>exit</tt> like functions do; <tt>dot.mksh</tt>
 makes use of them to avoid fork(2)s. <tt>$'…'</tt> works in more places;
 here strings now use the full recursive parser.</p>
<p id="c41c">R41c: Sorry for the “set -e” breakage.</p>
<p id="c41b">R41b: The ERR and EXIT traps are called correctly; in “set -e”
 mode, functions correctly cause the shell to exit if they return nonzero,
 even if they contain a list.</p>
<p id="c41">R41: Deprecated features (set ±o arc4random; beginning an input
 line with ‘!’ instead of ‘r’+space) are gone. Numbers beginning with 0 are
 no longer interpreted as octal (except in lksh). Several fixes may have
 user-visible impact on the language.</p>
<p>For mksh R41 and up, being a feature superset of OpenBSD ksh (except the
 broken (GNU bash-style) <tt>PS1</tt> and mail support) is demoted, no longer
 a primary but a secondary release criterium. This was changed to facilitate
 faster releases, especially when OpenBSD changes are not usable as-is.</p>
<p id="c40f">R40f: Support for persistent history (which is still discouraged)
 may show up on platforms previously without it.</p>
<p id="c40e">R40e: Interpreting "010" as octal number will now emit a warning
 at run-time. Several bugfixes lead to slightly changed behaviour to conform
 better to the standards. The worst offending bugs in the persistent history
 code have been fixed, but its use is still discouraged. THIS VERSION IS
 BROKEN WITHOUT A HOTFIX which your packager probably added. Tab completion
 may now shrink the current input line, but still follows the docs.</p>
<p id="c40d">R40d: Interpreting "010" as octal number is now deprecated
 and <em>will</em> be removed soon. You can now use “local” and “set -A”
 together to create function-local arrays. The test(1) built-in command
 behaves POSIX conformant. The ^O Emacs mode command now works as it used
 to when editing the fetched lines. Arithmetic expressions have certain
 guarantees that are detailed more explicitly in the manpage.</p>
<p id="c40c">R40c: The hack for when an interactive command begins
 with ‘!’ to substitute that with “fc -e -” is now deprecated and
 will be removed with R41 (or R42, we’ll see) despite objection.
 Write ‘r ’ (letter err plus a space) instead, it’s exactly the
 same. On the other hand, GNU bash-style array assignments are now
 a standard feature: <tt>x=(a [3]=b); x+=(c [6]=d)</tt> now works
 even in <tt>-DMKSH_SMALL</tt>. The <tt>-DMKSH_BINSHREDUCED</tt>
 fix for <tt>${foo%\?}</tt> needed another fix, same for the
 recursive parser introduced in R40.</p>
<p id="c40b">R40b: There is a new built-in special command “global”
 which does the same as “local” except localise every parameter it
 touches; in short, it does what “typeset” would’ve been supposed
 to be had it not to double as “local”. Tab completion will now work
 better. The shell handles bogus environment variable imports more
 gracefully and doesn’t let the terminal crash hard under some corner
 cases. ^Cing out of the built-in cat utility is possible.</p>
<p id="c40">R40: “set ±o arc4random” is deprecated and will not exist
 in the next version (R41) any more – the shell uses an LCG internally
 which is seeded from ASLR. Several POSIX fixes may change behaviour
 of builtins, substitutions, etc. and some differ now depending on the
 “set ±o sh” flag. New builtin “cat” (although, if called with a flag,
 the external cat utility is invoked) and “sleep” (if select(2) could
 be linked). <tt>dot.mkshrc</tt> no longer exports <tt>$PS1</tt>. GNU
 bash localised strings ($"…") are handled, but (of course❣) untranslated.
 “foo=&lt;&lt;EOF” cat(1)lessly assigns a here document to a parameter. New
 KSHEGID, KSHGID, KSHUID variables and PIPESTATUS array. Completely new
 read built-in command with several new options. Parse command substitutions
 – $(…) – recursively. HP-UX “test -H” is back, “test -t” (without the “fd”
 argument) is gone. “set -x” is now inherited by called functions. The x+=y
 and x+=(y z) notations for appending to variables and (!MKSH_SMALL) arrays
 are now supported, as are “;&amp;” and “;|” (“;&amp;&amp;” !MKSH_SMALL too)
 case fall-through without/with re-examination.</p>
<p><a href="mksh_old.htm#caveat">older entries</a></p>

<h2 id="clog">Recent Changes</h2>
<p>Changes in the current (unreleased) development version:</p><ul>
 <!-- li>Begin porting mksh to the <a href="http://9fans.net/">Plan 9</a>
  ANSI’n’POSIX Environment (not finished)</li -->
 <!-- li>Port to <a href="http://www.syllable.org/">Syllable Desktop</a>
  (not finished, but maybe the rest is a kernel bug?)</li -->
 <!-- li>Import the GNU bash- and zsh-style ability to get and set multiple
  limits in a single invocation from oksh (thanks millert) -->
 <li>[tg] "$@" always generates words; bug spotted by engla in IRC</li>
 <li>[tg] Optimise print_columns display to use the screen space better</li>
</ul>
<p id="r43">Please upgrade to mksh R43 (or stick on R41c) because of…</p><ul>
 <li>[tg] Do not permit <tt>$'…'</tt> and <tt>$"…"</tt> in anything that
  looks like a string, as old scripts, like ncurses’, depend on behaviour
  not guaranteed by POSIX regarding unescaped dollar signs there</li>
 <li>[dalias] Make detection of function prototypes more reliable</li>
 <li>[tg] Quote setenv arguments for eval properly in <tt>dot.mkshrc</tt></li>
 <li>[tg] Validate parameter names for typeset, export, etc.</li>
 <li>[tg] Provide a classic BSD echo builtin for /bin/sh on MidnightBSD</li>
 <li>[tg] When generating Makefrag.inc put list of check_categories inside</li>
 <li>[tg] Actually test all echo(1) flavours and MidnightBSD /bin/sh hacks</li>
</ul>
<p id="r42b">mksh R42b and <span id="r41c">R41c</span> fix regressions:</p><ul>
 <li>[tg] Correctly initialise memory (Debian #700604)</li>
 <li>[tg] LP#1104543 fix was too strict (Debian #700526)</li>
</ul>
<p id="r42">mksh R42 brings back the release\ {early,often} scheme:</p><ul>
 <li>[tg] Make <tt>-DMKSH_DISABLE_EXPERIMENTAL</tt> a nop again</li>
 <li>[tg] Quell some LLVM+Clang warnings; overhaul scan-build assert(3)s</li>
 <li>[tg, RT] Bunch of portability and build system fixes</li>
 <li>[tg] Re-enable <tt>${ precmd;}</tt> in <tt>dot.mkshrc</tt> and fix it
  to retain the errorlevel</li>
 <li>[RT] Port to Minix-vmd, QNX 4, Watcom C; begin porting to SunOS 4.1.1,
  Xenix, ISC (Interactive) Unix</li>
 <li>[tg] Prefer const-clean <tt>sys_errlist[]</tt> to strerror(3)</li>
 <li>[tg] Permit <tt>$"…"</tt> and <tt>$'…'</tt> everywhere except in the
  body of here documents that are not here strings</li>
 <li>[tg] Use full recursive parser for double-quoted here strings, and
  reuse code between here strings and here documents</li>
 <li>[tg] #ifdef DEBUG_LEAKS free all fds and memory on exit (LP#1106116)</li>
 <li>[tg] Don’t close stdout/stderr with redirections, dup /dev/null
  instead, always, both in dot.mkshrc and the testsuite, it does break!</li>
 <li>[tg] Handle <tt>${ …;}</tt> like functions in that <tt>local</tt> and
  <tt>return</tt> DWIW; use it for the big chunk in $PS1 to avoid fork(2)ing
  (at cost of tempfiles; dot.mkshrc is a sample, adjust to your needs)</li>
 <li>[tg] Document invalid ${a/b/c} patterns in manpage (Debian #698678)</li>
</ul>
<p id="r41b">mksh R41b is a bugfix-only release off a stable branch:</p><ul>
 <li>[tg] Fix gettimeofday(2) detection at build time (warning)</li>
 <li>[RT, tg] <tt>Build.sh</tt>: catch non-working dash printf builtin</li>
 <li>[chris2, dalias, tg] Remove musl libc workaround and use _GNU_SOURCE
  which they kindly aliased to _ALL_SOURCE, which is implemented now</li>
 <li>[tg] Fix getn and some cases of possible array bounds trespasses</li>
 <li>[chris2, dalias, tg] Use -fno-asynchronous-unwind-tables with GCC</li>
 <li>[tg] Fix a few warnings from libFirm/cparser (mostly -Wsign-compare)</li>
 <li>[tg] Correct mistake when doing hashtable lookup collision resolution</li>
 <li>[tg] Fix running the <tt>ERR</tt> and <tt>EXIT</tt> traps in situations
  with <tt>set -e</tt> and/or <tt>eval</tt> (also closes Debian #696823)</li>
 <li>[tg] Fix “command shift”, reported by «ormaaj:#!/bin/mksh»</li>
 <li>[Torsten Sillke] Unbreak linking on AIX (remove <tt>-qextchk</tt>)</li>
 <li>[tg] Fix regression wrt lists in functions and “set -e” (LP#1104543)</li>
</ul>
<p id="r41">mksh R41 brings a number of bugfixes and new features:</p><ul>
 <li>[tg] Drop “set ±o arc4random” (deprecated in R40)</li>
 <li>[tg] Drop old <tt>Build.sh</tt> -long-options (deprecated in R40)</li>
 <li>[tg] Change the internal hash algorithm from Bob Jenkins’ one-at-a-time
  to its NUL-counting, always-changing, better-avalanching MirOS variant <a
  href="@@ABSPATH@@/cvs.cgi/src/kern/include/nzat.h">NZAAT</a> (with feedback
  from ciruZ; 75% fill level is reasonable; names tbd in Mirkev/MirJSON)</li>
 <li>[tg] Use <tt>$'…'</tt> for non-ASCII parameters for re-entry printing</li>
 <li>[tg] Use sane spelling of “read-only” consistently</li>
 <li>[tg] Improve tree <tt>-DDEBUG</tt> functions (internal/developer use)</li>
 <li>[tg] Reduce stack usage a bit; speed up hash tables at size cost</li>
 <li>[tg] <tt>MKSH_SMALL</tt> no longer implies <tt>-fno-inline</tt></li>
 <li>[tg] Support optional seed in <tt>${parameter@#seed}</tt> for security</li>
 <li>[tg] New <tt>Build.sh</tt> environment configurable: LDSTATIC (empty)</li>
 <li>[tg] Improve LTO effect by always adding our copies of distributed utility
  function sources when linking statically (i.e. LDSTATIC is not empty)</li>
 <li>[tg] Drop deprecated hack for lines beginning with an exclamation mark</li>
 <li>[tg] No longer interpret numbers beginning with a 0 digit as octal</li>
 <li>[tg] Attempt to use <tt>-fwrapv</tt> on more compilers</li>
 <li>[tg, RT] Better portability to 386BSD, Debian 0.91, ancient Unicēs</li>
 <li>[tg] No longer use mkstemp(3) or tempnam(3) functions, do our own</li>
 <li>[tg] Fix some bugs in the manual page and <tt>Build.sh</tt></li>
 <li>[tg] Add MKSH_NO_CMDLINE_EDITING, MKSH_DISABLE_TTY_WARNING</li>
 <li>[RT] Port to Coherent UNIX</li>
 <li>[tg] Enable some options by default for some ports, for instance, since
  BeOS can never have a controlling tty, the option disabling that warning</li>
 <li>[tg] Some bugfixes, prompted by RT and Valgrind</li>
 <li>[RT] Disable sigsuspend(2) on Syllable Desktop</li>
 <li>[tg] Fix several issues with typeset -p (LP: #993847)</li>
 <li>[RT] Detect lcc and apply inline fix, e.g. for use with libc5</li>
 <li>[tg] If klibc, set -DMKSH_NO_LIMITS and check for sigsuspend fix</li>
 <li>[tg] Fix some issues found by Coverity and some found while fixing</li>
 <li>[tg] <tt>Build.sh</tt> options: <tt>-t</tt> <i>target-filename</i> (instead
  of <tt>mksh</tt>); <tt>-L</tt> to build a legacy mksh, current changes:<ul>
   <li>different <tt>$KSH_VERSION</tt> “LEGACY KSH” instead of “MIRBSD KSH”</li>
   <li>purely for running ksh88 and pdksh scripts; no command line editing</li>
   <li>use traditional “set -- $(getopt …); echo $?” mode always</li>
   <li>do not keep file descriptors private</li>
   <li>parse leading-zero-digit numbers as octal</li>
   <li>no mksh extension <tt>-T</tt></li>
   <li>use “long”, not “int32_t”, for arithmetics</li>
  </ul></li>
 <li>[tg] fix trimming with positional parameters (Debian #48453)</li>
 <li>[tg] ensure that case end tokens are not mixed up (Debian #220272)</li>
 <li>[tg] make alias definitions in mksh -c work (Debian #517009), hack</li>
 <li>[tg] Apply speed improvements and add <tt>MKSH_SMALL_BUT_FAST</tt></li>
 <li>[tg] Fix <tt>CONSERVATIVE_FDS</tt> use-before-definition bug</li>
 <li>[tg] Correct two regressions when tab-completing (LP: #1025843) and fix
  bugs in the same code wrt. completion display and other expansions</li>
 <li>[tg] Make quoted output of “typeset -p” AT&amp;T ksh93 compatible</li>
 <li>[tg] Implement <tt>${foo@Q}</tt> like <tt>${foo:Q}</tt> in make(1)</li>
 <li>[tg] Remove some unused code; more int → bool conversion</li>
 <li>[tg] Fix using here documents in COMSUB etc. (LP: #1030581)</li>
 <li>[tg] Fix ulimit builtin usage to match what limits we actually know</li>
 <li>[tg] Allow overriding /etc location, experts only (LP: #1039713)</li>
 <li>[tg] Update to Unicode 6.1.0</li>
 <li>[tg, Todd Miller] Avoid changing ps(1) output by accident</li>
 <li>[tg, ft, Christian Neukirchen] Detect zsh 2.5.02/NeXTstep for Build.sh</li>
 <li>[tg] Detect <tt>musl-gcc</tt> wrapper, define <tt>_BSD_SOURCE</tt> there,
  which is totally bogus, but musl, just like dietlibc, gets it wrong</li>
 <li>[tg] Improve compile-time assertions</li>
 <li>[tg] Repair <tt>select</tt> builtin without any choices given</li>
 <li>[tg] Add <tt>-DMKSH_GCC55009</tt> hack to avoid some compile-time
  assertions and introduce <tt>arith-mandatory</tt> in <tt>check.t</tt>
  to substitute for missing that compile-time check; will change</li>
 <li>[tg] Rewrite lots of code to not rely on <tt>-fwrapv</tt> so much</li>
 <li>[tg] <tt>Build.sh</tt>: Fix flock(2) detection on GNU/Linux</li>
 <li>[Andrew Kudryashov] Manpage: fix default for <tt>HISTSIZE</tt></li>
 <li>[tg] Add debugging aid (split-screen mechanism using GNU screen)</li>
 <li>[Andrew Kudryashov] Manpage, Website: point out correct mailing list</li>
 <li>[tg, Andrew Kudryashov] Fix <tt>~/nonexistant</tt> tab completion</li>
 <li>[tg] Optimise sh -c “[^]\t\n"-$&amp;-*;-?[\\`|]*” to exec, inspired by
  Jilles Tjoelker (<tt>-DMKSH_DISABLE_EXPERIMENTAL</tt> to ostracise)</li>
 <li>[tg] Fix <tt>$?</tt> inside <tt>eval</tt> (RedHat BZ#865121)</li>
 <li>[tg] Implement ksh93 feature <tt>${ foo;}</tt> (using tempfiles this
  time; exclude with <tt>-DMKSH_DISABLE_EXPERIMENTAL</tt> in R41)</li>
 <li>[tg] Run SIGINT check more reliably in the cat builtin (LP#1058815)</li>
 <li>[tg] Handle ^C in here documents, COMSUB, arithmetics (LP#1069428)</li>
 <li>[tg] Make <tt>dot.mkshrc</tt> usable with “set -o nounset” / “set -u”</li>
 <li>[tg, Clint Adams] Clean up and optimise the error handling code</li>
 <li>[tg] Fix and add some checks in the testsuite</li>
 <li>[tg] Sort list of variables in the source code when possible</li>
 <li>[tg] Add <tt>$BASHPID</tt> (for ormaaj) and <tt>$EPOCHREALTIME</tt></li>
 <li>[tg] Improve documentation, <tt>#ksh</tt> IRC channel homepage</li>
 <li>[tg, RT] Minix 2 also doesn’t have gettimeofday(2) ⇒ check for it</li>
 <li>[tg] Fix an input command line editing display redrawing issue</li>
 <li>[tg] Track the tty to keep <tt>$COLUMNS</tt> and <tt>$LINES</tt>
  up-to-date after a <tt>SIGWINCH</tt> even in scripts</li>
</ul>
<p id="r40f">mksh R40f fixes a critical bug as well as this:</p><ul>
 <li>[tg, RT] Implement fcntl(2)-based advisory locking as an alternative
  iff flock(2) is not found (LP: #912691); keep trying in the face of EINTR</li>
 <li>[tg] Fix severe regression wrt. initialising tty(4) states</li>
 <li>[tg] Improve testsuite, build-time checks and debugging output</li>
 <li>[tg, RT, winstonw] Improve portability to BeOS (works), Cygwin (good),
  Dell UNIX (works somewhat, but not with gcc), LynxOS (works somewhat),
  NeXTstep (works but not OpenStep 4.2), USL C compiler, SCO OpenServer (good),
  SCO UnixWare (good), Plan 9 (still broken), Syllable Desktop (broken?)</li>
 <li>[tg] <tt>rlim_t</tt> is supposed to be unsigned</li>
 <li>[tg] Some code, warning and spelling cleanup</li>
 <li>[tg] New <tt>Build.sh</tt> environment configurable: AWK (= awk)</li>
 <li>[tg, DONG-DONG YANG] Add safety net in the Emacs line editing code</li>
 <li>[tg] No longer rely on env(1), id(1), printf(1) in the testsuite, and
  strcasecmp(3), strcasestr(3), strncasecmp(3) in the code</li>
 <li>[tg, stsc, RT] Reduce system requirements of <tt>check.pl</tt> further</li>
</ul>
<p id="r40e">mksh R40e is another must-have bugfix update:</p><ul>
 <li>[tg, Jilles Tjoelker] skip readonly check in unevaluated ternary twig</li>
 <li>[tg, anonymous] fix all remaining <tt>ifs.sh</tt> testcases</li>
 <li>[tg] No longer try to build with GCC and C99 extensions</li>
 <li>[tg, Jilles Tjoelker] Do not expand aliases in COMSUB twice</li>
 <li>[tg] Honour UTF-8 multi-byte character boundaries when doing partial
  tab-completion insertions (LP: #909025) to fix RedHat BZ#745702</li>
 <li>[tg] Fix R40 (BZ#496791) regression with IOACT in TIF (LP: #907224)</li>
 <li>[tg, ft] Darn persistent history code worst offenders (LP: #906914)</li>
 <li>[tg] Fix some gc-sections, GCC and Clang/scan-build warnings/issues</li>
 <li>[tg, 28C3] dot.mkshrc hash functions: partially address LP: #909818</li>
 <li>[tg] Only compile divmod(0x80000000, -1) code in when not unneeded</li>
 <li>[tg, RT] Move mirtoconf checks and <tt>INCLUDES_ONLY</tt> parts of
  <tt>sh.h</tt> around to ensure prerequisites are always available</li>
 <li>[tg, RT, ir0nh34d] Pass mksh.exe to testsuite, if such thing is generated,
  and deal with Cygwin passing just “mksh” in argv[0] in such cases</li>
 <li>[tg] Imply -DMKSH_ASSUME_UTF8=0 on MSYS; optimise checks</li>
 <li>[tg, Jb_boin] Fix regression introduced in R35b by jaredy’s security
  patch where TTIME trashed a non-TCOM string argument (e.g. in TFOR)</li>
 <li>[tg] Better support for tcc; fix GCCism that accidentally crept in</li>
 <li>[tg] Deal with UTF-8 when reporting jobs’ commands</li>
 <li>[RT] Add SkyOS to known OS list</li>
 <li>[tg, RT] Support Minix in its variants Minix 3 and Ninix 3 better</li>
 <li>[tg] Drop some Android-specific unused code (lsmod builtin)</li>
 <li>[tg, RT, lewellyn] Support QNX and various versions of BSD/OS better</li>
 <li>[tg] More code cleanup and new developer-only debugging functions</li>
 <li>[tg, Andrew Kudryashov] Fix some tab completion related escaping bugs</li>
 <li>[tg, draenog] Honour COLUMNS and LINES from the environment in scripts</li>
 <li>[tg, winstonw] The sleep built-in utility now blocks more signals</li>
 <li>[tg] Warn when using another deprecated function that will be removed</li>
</ul>
<p id="r40d">mksh R40d is a must-have bugfix update:</p><ul>
 <li>[tg] New <tt>test.sh</tt> ‘-f’ option (same as ‘-C fastbox’)</li>
 <li>[tg] Drop using <tt>set -o noglob</tt> inside pushd/popd/dirs</li>
 <li>[tg] Use += more in <tt>dot.mkshrc</tt> and keep strings shorter</li>
 <li>[tg] Correct interworking between <tt>local</tt> and <tt>set -A</tt></li>
 <li>[tg] Fix out-of-bounds memory access on strings of 32 KiB length</li>
 <li>[tg] <tt>MKSH_DISABLE_DEPRECATED</tt> (for integrators)</li>
 <li>[tg, Jilles Tjoelker] test(1) built-in behaves exactly as POSIX says</li>
 <li>[tg] Move compile-time assertions to Build.sh from misc.c#ifdef DEBUG</li>
 <li>[tg] Invocation documentation is at the bottom of Build.sh</li>
 <li>[tg] <tt>test.sh</tt>: verbosely look for perl(1) interpreter to use</li>
 <li>[tg] New tests for integers (base 1‥36, base unspecified, base OOB)</li>
 <li>[tg] Correct error paths for <tt>typeset -n</tt> global state</li>
 <li>[tg] Deprecate interpreting "010" as octal number, <em>will</em> go</li>
 <li>[tg] Improvements re. integer handling; more explicit manpage text</li>
 <li>[tg] Do not use <tt>caddr_t</tt> on Linux, so dietlibc stops bitching</li>
 <li>[tg, Jilles Tjoelker] Catch division/modulo overflow 0x80000000/-1</li>
 <li>[tg] Emacs mode ^O regression fix when the fetched lines are edited</li>
</ul>
<p id="r40c">mksh R40c collects stable development, mostly fixes:</p><ul>
 <li>[tg, Wouter Verhelst] Fix <tt>${foo%\?}</tt> in <tt>-o sh</tt></li>
 <li>[jonthn, Snader_LB] Fix spelling mistakes</li>
 <li>[cnuke] Fix bugs spotted during porting to OPENSTEP</li>
 <li>[tg, jg71] Unbreak building stristr with MKSH_ASSUME_UTF8 defined</li>
 <li>[tg] Fix most of the issues Jerker Bäck encountered on Interix</li>
 <li>[tg] Wrap access(2) as it may return false positive for X_OK on root</li>
 <li>[OpenBSD] Upper bound Emacs mode command repeat by input line length</li>
 <li>[tg] Improve <tt>CPPFLAGS</tt> mangling in <tt>Build.sh</tt></li>
 <li>[Snader_LB] Several comment, documentation and website fixes/updates</li>
 <li>[tg] Avoid identifiers and cpp(1) macros with two underscores in a row,
  and those with a trailing underscore; they are reserved for the OS</li>
 <li>[tg] Fix accidental behavioural change wrt some built-in parameters</li>
 <li>[RT, Chris “ir0nh34d” Sutcliffe] Port to MSYS</li>
 <li>[tg, Markus Duft, Bruno Haible] Interix select(2) bug workaround</li>
 <li>[tg] Manpage fixes</li>
 <li>[tg] Deprecate the “command line begins with ‘!’ for fc -e -” wbx hack</li>
 <li>[tg] Promote <tt>x=(a b); x+=(c d)</tt> to a core mksh(1) feature</li>
 <li>[tg] Testsuite fixes for Hurd, MSYS; warning fixes for dietlibc</li>
 <li>[tg] Fix R40 regression misparsing <tt>$(case x in (x) :; esac)</tt></li>
</ul>
<p id="r40b">mksh R40b introduces several <em>desired</em> fixes:</p><ul>
 <li>[tg] Don’t busy-loop on <tt>nameref ARY=ARY</tt> (LHS = RHS)</li>
 <li>[tg, yofuh] Tabcomplete <tt>~foo</tt> like <tt>$FOO</tt> (LP: #710539)</li>
 <li>[tg] Code cleanup, style, and minor assorted fixes</li>
 <li>[tg] Tabcomplete <tt>~foo/M↹</tt> (with slash) economically</li>
 <li>[tg] Add new <del>experimental</del> <tt>global</tt> builtin, doing
  the same as <tt>local</tt> (<tt>typeset</tt>, really – but that doesn’t
  deserve its name) does, except localising all parameters it touches</li>
 <li>[tg] Better error messages with non-integral environment imports</li>
 <li>[tg] <tt>$RANDOM</tt> environment import accepts any string now</li>
 <li>[tg, Lucas Holt] Add <tt>setenv</tt> cshism to <tt>dot.mkshrc</tt></li>
 <li>[tg, Johannes] Allow ^C to interrupt the built-in cat(1)</li>
 <li>[tg, Arkadiusz Miśkiewicz, Kacper Kornet] Fix mksh taking down the entire
  terminal, hard, when scripts use <tt>$COLUMNS</tt> and fork off utilities;
  regression introduced in mksh R37 (sorry, no regression test possible)</li>
 <li>[tg, Arkadiusz Miśkiewicz] Properly mark need-ctty regression tests</li>
 <li>[tg] MKSH_NO_EXTERNAL_CAT – Quell the external cat(1) calls magic</li>
 <li>[tg, Arkadiusz Miśkiewicz] Yes, “echo” is not portable, document</li>
 <li>[tg] Improve content and look of the manual page</li>
 <li>[tg] Move /etc/{,suid_}profile to /system/etc/ on Android</li>
 <li>[tg] Prevent more compiler warnings; catch build errors earlier</li>
</ul>
<p id="r40">mksh R40 is a major everything release:</p><ul>
 <li>[tg] Correct small mistakes in manpage and build script</li>
 <li>[ahoka, tg, stippi, bonefish, cnuke] Port to <a
  href="http://www.haiku-os.org/">Haiku</a> (and probably, implicitly,
  BeOS; this is not tested though)</li>
 <li>[tg, stippi] Add Haiku specific RLIMIT_NOVMON as ‘V’ to ulimit builtin</li>
 <li>[tg] Let Build.sh cope with dirname(1) unavailability</li>
 <li>[tg] In the Emacs editing mode, hi-bit7 octets are now considered
  “motion characters” for word boundaries – Esc+b, Esc+f, ^W, …</li>
 <li>[tg] Make EXECSHELL default configurable at compile time (embedded)</li>
 <li>[tg] If MKSH_SMALL do not compile in “set -o bgnice” by default</li>
 <li>[tg] Rework how RLIMIT_{AS,RSS,VMEM} map to ‘m’ and ‘v’ ulimits</li>
 <li>[tg] Add some more OS specific limits seen in zsh</li>
 <li>[tg] SUSv4 ${v=a\ b} and "${v=a\ b}" and ${v-a\ b} compliance, tests</li>
 <li>[tg] Make "~/.mkshrc" path configurable at compile time (embedded)</li>
 <li>[tg] Fix SUNWcc 12.1 error message scan in build phase=u</li>
 <li>[tg, Johannes Sixt, Geoff Clare] Fix variable assignment scope during
  command execution (expansion vs. assignment execution environment);
  [Herbert Xu, Geoff Clare] Add more regression tests for this</li>
 <li>[tg] Fix single quotes in "${foo#bar}" (differs from "${foo-bar}")</li>
 <li>[oksh] Fix mknod(8) usage message: b|c are <em>not</em> optional</li>
 <li>[tg, oksh] Fix "${x#?}" expansion when quoted (quotes, space)</li>
 <li>[tg] Make default temporary directory configurable at compile time</li>
 <li>[tg] Fix performance deficiencies in the built-in realpath function</li>
 <li>[tg] Deprecate Build.sh <tt>-longoptions</tt> in favour of short ones:
  <tt>-valgrind</tt> becomes <tt>-g</tt> (like debug), <tt>-combine</tt> and
  <tt>-llvm</tt> become <tt>-c {combine,llvm}</tt> and the LLVM optimiser
  flags are passed via <tt>-O</tt> = <tt>-o -std-compile-opts</tt></li>
 <li>[tg] New Build.sh options <tt>-c dragonegg</tt> (for using the LLVM <a
  href="http://dragonegg.llvm.org/">plugin</a> to GCC 4.5 with inter-module
  optimisation), <tt>-v</tt> (version)</li>
 <li>[tg] Document another way to get a coloured PS1 in the manpage</li>
 <li>[tg] Disallow some more kinds to trim a vector; Debian #581867</li>
 <li>[oksh] Simplify some code; RCSID and comment sync with OpenBSD ksh</li>
 <li>[oksh] Apply diff from manuel giraud to keep track of LINENO in a trap</li>
 <li>[tg] Remove arc4random(3) functionality; seed an LCG depending on the
  OS doing Address Space Layout Randomisation; speed up (we will use either
  arc4random_pushb_fast(3) if it exists or arc4random_pushb(3) if forced by
  the user with <tt>-DMKSH_A4PB</tt> e.g. on Cygwin)</li>
 <li>[tg] Fix spelling mistakes in <tt>dot.mkshrc</tt></li>
 <li>[tg] Implement “live” window resize for the Emacs editing mode</li>
 <li>[tg] More fixes for bugs found by Valgrind and LLVM+Clang scan-build</li>
 <li>[tg] For script compatibility support “set ±o arc4random” during a
  transition period until R40 is out (but issue a warning to stderr)</li>
 <li>[oksh] Add <tt>(</tt>, <tt>)</tt>, <tt>((</tt> to reserved words in
  the manual page and fix some formatting errors with GNU groff’s mdoc</li>
 <li>[tg] Make printf.c.1.15 use mksh’s shf_* routines instead of stdio</li>
 <li>[tg] Fix <tt>-Wc++-compat</tt> except implicit casts from/to "void *"</li>
 <li>[tg] Correct shf buffer I/O routines to avoid a memory corruption bug
  discovered by Waldemar Brodkorb and other bad effects</li>
 <li>[tg] Fix NULL pointer dereference during iteration loop when checking
  for alias recursion; discovered by Michal Hlavinka</li>
 <li>[tg] More int → bool conversion, whitespace and general code cleanup</li>
 <li>[tg] Fix window size not being checked during runtime of external
  programmes by not relying on SIGWINCH so much but instead checking
  before every interactive editing of a command line</li>
 <li>[tg] Improve mksh(1) manpage coverage, remove mentions of not-mksh</li>
 <li>[tg] Use wcwidth() from system on MirBSD</li>
 <li>[tg] u_int32_t is no longer needed (only for OpenBSD’s pre-ISO-C99
  arc4random API, which we no longer call), so don’t provide it from
  <tt>Build.sh</tt> any longer</li>
 <li>[tg, tonnerre] Scan for <tt>uint8_t</tt> and provide if not found</li>
 <li>[tg] Fix realpath builtin for “/file/” arguments wrt. POSIX</li>
 <li>[tg] Do not generate &lt;stdint.h&gt; from Build.sh as file any more
  if it is missing; rather let sh.h define the types appropriately and fix
  related compiler warnings</li>
 <li>[tg] Add “cat” builtin (defers to external if options are given)</li>
 <li>[tg] Reduce size by improved string pooling, improving struct packing,
  lowering size of some allocation chunks, and better code</li>
 <li>[tg] Document 「x=$(eval $(cat)) &lt;&lt;'EOF'」 workaround for the <a
  href="https://bugzilla.redhat.com/show_bug.cgi?id=496791">$(…)
  parsing bug</a> in the mksh(1) manual page and on the Red Hat Bugzilla</li>
 <li>[tg] Add support for handling a “--” argument to more builtins</li>
 <li>[tg] Correct some error messages and typos</li>
 <li>[Jeff Hamilton] Don’t alias stop, suspend on Android (system specific
  conflict for stop; suspend just joined the boat)</li>
 <li>[tg] Address what few concerns Chris Palmer (Android security team) had:
  check all multiplications and some additions for integer overflows, mostly
  in allocation context, and check setres{u,g}id/setuid for EAGAIN iff the
  target OS is known to be returning it (Linux only, right now)</li>
 <li>[OpenBSD] Some small manpage fixes</li>
 <li>[tg] Clean up mirtoconf and build warnings with some compilers</li>
 <li>[tg] Fix <tt>\c?</tt> vs. <tt>\c~</tt> mis-documentation in mksh(1)</li>
 <li>[tg] Remove the somewhat-portable <tt>setmode.c</tt> from the mksh
  source distribution and demote mknod(8) to an optional builtin, disabled
  by default, manually re-enabled in the installer only on MirBSD</li>
 <li>[tg] Regenerate wcwidth table from Unicode 6.0.0</li>
 <li>[tg] Change behaviour of argument-less exit in traps to match SUSv4,
  original patch from Jonathan Nieder (Debian #599484)</li>
 <li>[tg] <tt>dot.mkshrc</tt> no longer <tt>export</tt>s <tt>$PS1</tt>,
  as recommended by Frank Terbeck, to avoid confusing other shells</li>
 <li>[tg] The character width table is now in sync with Unicode 6.0.0</li>
 <li>[tg] MKSH_SMALL doesn’t imply HAVE_REVOKE=0 any longer</li>
 <li>[tg] Ignore a ‘$’ preceding ‘"…"’ (like bash, ksh93)</li>
 <li>[tg] Make “foo=&lt;&lt;EOF” a direct assignment of here document (or
  here string) to string variable</li>
 <li>[tg] Add KSHEGID, KSHGID, KSHUID variables (idea from Richard K.)</li>
 <li>[tg] Option -d to read specifies a delimiter, like ksh93 (10x dgk)</li>
 <li>[tg] Extension ${foo@#} expands to hash of $foo (mksh specific)</li>
 <li>[tg, Jörg-Volker Peetz] Emacs prev-hist-word resets the counter if other
  editing commands were run in between; repeat calling works, even together
  with arguments, now; arguments are 0-based (Debian #603801)</li>
 <li>[tg] Introduce MKSH_NOPROSPECTOFWORK which implies MKSH_UNEMPLOYED
  and additionally disables job signals, |&amp;, sigprocmask(2), etc.</li>
 <li>[tg] POSIX: <tt>trap 'echo foo' UNKNOWN</tt> is not a syntax error</li>
 <li>[tg] Do not use <tt>&lt;sys/file.h&gt;</tt> unless it exists</li>
 <li>[tg] <tt>dot.mkshrc</tt>: When we set a UTF-8 locale (e.g. for the
  GNU OS), we must also <tt>set -o utf8-mode</tt> to match it</li>
 <li>[tg] Don’t append a space after tab-completing a parameter
  substitution that doesn’t contain a glob/extglob (LP: #710539)</li>
 <li>[tg] Limit history file size to 1 GiB for sanity</li>
 <li>[tg] Add <tt>smores</tt>, a more(1)-like pager, as shell function
  to <tt>dot.mkshrc</tt> (not control character safe but tty aware)</li>
 <li>[tg] Make builtins directly callable; <tt>utf8-mode</tt> is determined
  by LC_ALL/LC_CTYPE/LANG environment variables in that case</li>
 <li>[tg] If the interactive shell uses setlocale(3)/nl_langinfo(3) to divine
  <tt>utf8-mode</tt>, fall back to environment variables unless success</li>
 <li>[tg] From a direct builtin call, echo(1) behaves POSIXish</li>
 <li>[tg] Replace some MirBSD utilities with links to mksh(1) and ensure
  some integration to keep compatibility</li>
 <li>[tg] Add a microsecond capable sleep(1) builtin [updated 20110213]</li>
 <li>[tg] If the built-in cat is invoked from a direct builtin call, it
  now properly handles the POSIXly demanded ‘-u’ option (as a no-op)</li>
 <li>[tg] Support the <tt>PIPESTATUS</tt> array (like GNU bash)</li>
 <li>[tg] Port to MiNT / FreeMiNT (Atari m68k operating system)</li>
 <li>[tg] Do not close filedescriptor #3 (controlling tty) on UWIN</li>
 <li>[tg] Make the tree printing code safe for re-entrancy of output</li>
 <li>[tg] Implement recursive parser for $(…) to fix RedHat BZ#496791</li>
 <li>[tg] Use the existing state machine, a recursive parser and retracing
  the input stream for correct <tt>x=(…$((…$(…)…))…)</tt> parsing</li>
 <li>[tg, Jb_boin] complain about <tt>${x:1:2:3}</tt> instead of crashing</li>
 <li>[tg, Jb_boin] make optional printf(1) builtin __CRAZY=Yes clean and
  prevent it from crashing by reading past end of (invalid) format strings</li>
 <li>[tg] abort(3) on rogue pointers <tt>#ifdef DEBUG</tt></li>
 <li>[tg] Correct some documentation, code commentary, etc.</li>
 <li>[tg] Handle the UTF-8 Byte Order Mark in <tt>$(…)</tt> expressions</li>
 <li>[tg] Speed up reading input by checking for the BOM only once</li>
 <li>[tg] Fix mis-detection of gcc format attribute (false negative)</li>
 <li>[tg] Include some Android specific hacks (no change on other OEs)</li>
 <li>[tg, Jb_boin] In <tt>${foo/bar/baz}</tt> expressions, when adjourning
  empty patterns to avoid running into a busy-wait loop, remember to skip
  the anchor characters (‘#’ or ‘%’) at the beginning, yet keep the special
  meaning replacing a string begin or end with a string has</li>
 <li>[tg] Write a pattern optimiser that is run internally before calls to
  the pattern matching code always (currently, replaces <tt>a@(b@(c)d)e</tt>
  with <tt>abcde</tt> but keeps <tt>@(a|a)</tt>, then (in a second pass)
  collapses adjacent asterisk (‘*’) wildcards into a single one; this fixes
  some of the symptoms of severe performance issues our pattern matching code
  has to the extent that it can prevent busy-looping (found by Jb_boin)</li>
 <li>[tg, Chris “ironhead” Sutcliffe, Chet Ramey, Eric Blake, David Korn]
  Handle pathnames with exactly two leading slashes well (SUSv4 3.266)</li>
 <li>[tg, Wayne Pollock, Bart Schaefer] Fix here documents, add testcases</li>
 <li>[tg] Fix corner case <tt>${##1}</tt>, add tests for that and
  <tt>${##}</tt> and <tt>${#?}</tt></li>
 <li>[tg] Bring back “test -H” ifdef S_ISCDF (for HP-UX) from pdksh</li>
 <li>[tg] Align read-only variable behaviour with (future) POSIX</li>
 <li>[tg] Permit <tt>${foo%(*}</tt> on FSH (Debian #619947)</li>
 <li>[tg, rsc] Allow skipping testcases that need a controlling tty</li>
 <li>[tg] Correct skipping the UTF-8 BOM when identifying a file</li>
 <li>[tg] Do not use <tt>&lt;stdbool.h&gt;</tt> any longer</li>
 <li>[tg] Use double-underscore-framed <tt>__attribute__</tt>s</li>
 <li>[tg] Always catch <tt>SIGALRM</tt> (for the sleep builtin)</li>
 <li>[tg, wbx] Functions now inherit a global <tt>set -x</tt></li>
 <li>[tg] Do not explicitly initialise static globals to 0/NULL</li>
 <li>[tg] Eliminate some dead code (functions, globals)</li>
 <li>[tg] Correct more tree handling bugs and merge similar code</li>
 <li>[tg] Add “+=” to concatenate scalars and append to arrays</li>
 <li>[tg] Support empty here document delimiters</li>
 <li>[Robert Luberda] Fix the four-argument form of test(1)</li>
 <li>[tg] Drop the pre-POSIX ability to “test -t” without specifying “fd”</li>
 <li>[tg] Defer dropping an alias in favour of a POSIX function to when the
  function is actually defined and check for the closing parenthesis too</li>
 <li>[tg, Kacper Kornet] Implement a new regression test attribute
  <tt>need-pass: {yes|no}</tt> and exit 1 if unexpected fails occur</li>
 <li>[tg] Add <tt>;&amp;</tt> and <tt>;|</tt> for <tt>case</tt></li>
 <li>[tg] Rewrite the <tt>read</tt> builtin and its documentation;
  adding <tt>-A</tt> (read IFS words into array), <tt>-a</tt> (read
  octets/wide characters into array), <tt>-N</tt>/<tt>-n</tt> (read
  only / up to <i>z</i> bytes), <tt>-t</tt> (read with timeout)</li>
 <li>[tg] Add <tt>-e</tt> option to <tt>cd -P</tt> (POSIX 2011)</li>
 <li>[tg] Update <tt>dot.mkshrc</tt> to use the new features</li>
 <li>[tg] Fix gsf’s ifs.sh tests of the <tt>read</tt> builtin</li>
 <li>[tg, cnuke] Improve support for AIX, Cygwin, IBM XL C</li>
 <li>[tg] Add tests for <tt>x+=(y z)</tt> and <tt>;;&amp;</tt> extensions</li>
 <li>[tg, hondza] Fix regression in tab completion result display</li>
 <li>[tg, Frank Terbeck] Fix parsing <tt>x=(…)</tt> expressions</li>
 <li>[tg, Jb_boin] Increase hash table limit; don’t crash when reaching
  the limit; work around bug in GCC 4.1 on Debian Etch</li>
 <li>[tg] New <tt>-c lto</tt> option to use Link Time Optimisation (GCC)
  with automatic fallback to <tt>-c combine</tt> if unavailable</li>
 <li>[tg] Improvements for <tt>-c dragonegg</tt>, <tt>-c llvm</tt> (with
  gcc+dragonegg, or llvm-gcc and clang, respectively), and TenDRA</li>
 <li>[tg] Let code samples in <tt>check.t</tt> and <tt>dot.mkshrc</tt>
  take care of the new features; fix some longstanding bugs in them</li>
 <li>[tg] Add missing flush in rewritten read builtin for prompting</li>
 <li>[tg] Minix builds now automatically disable the ulimit builtin</li>
</ul>
<p><a href="mksh_old.htm#clog">older changes</a></p>

<h2 id="plans">Future Plans</h2><ul>
<li>bind keys of dynamic length ‣ begun in a branch</li>
<li>dynamic input LINE length, instead of a hardcoded value at compile time</li>
<li>cache optimised extglobs (especially for ${foo/bar/baz})</li>
<li>typed variables; using ${var@?} more (JSON!)</li>
<li>make arrays use hashtables internally ipv linear linked lists</li>
<li>associative, multidimensional arrays</li>
<li>Build with more platforms’ native tools or other compilers
 – ACK, kencc, ICC/UWIN, egcs/UWIN</li>
<li>Build and actually work on more platforms – DJGPP, PW32,
 Plan 9, Syllable – debug these</li>
<li>Bugfix for suspending <tt>a &amp;&amp; b</tt> chain</li>
<li>“process substitution” echo diff &lt;(echo 1) &lt;(echo 2) <a
 href="http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=606821">#606821</a>
 ‣ pretty hard, it turns out (parsing concept is done in tg@’s head)</li>
<li>whence -p -a foo</li>
<li>read -e (or something): use the edit.c stuff for inputting</li>
<li>Allow trimming arrays (e.g. <tt>${foo[*]@Q}</tt>)</li>
<li><a href="mksh_old.htm#plans">older/unrealistic plans</a></li>
<li>… such as a better website, more clearly arranged, etc…</li>
<li>Although there is <em>definite</em> need, eventually, to have
 64-bit arithmetics, possibly using a long typeset flag and something
 similar to <tt>$((#x))</tt> for unsigned arithmetics</li>
</ul>
EOF
mws_putfooter
exit 0
