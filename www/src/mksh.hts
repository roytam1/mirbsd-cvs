# This file is part of the website of The MirOS Project, which is
# copyrighted material, please read the LICENCE file for details.

mws_setname subprojects/mksh "mksh — the MirBSD Korn Shell"
mws_setrss "tag_mksh.rss"
mws_setheadline The MirBSD Korn Shell
mws_putheader '$MirOS: www/src/mksh.hts,v 1.634 2016/11/12 01:16:12 tg Exp $'
mws_content <<'EOF'
<h2 id="toc">Table of Contents</h2><ul>
 <li><a href="#prefetch">Introduction</a> and Licence</li>
 <li><a href="#irc">Documentation and Support</a> (IRC, manual page,
  mailing lists, RSS feeds, …)</li>
 <li><a href="#build">Installation</a></li>
 <li><a href="#upgrade">Upgrade</a> your packages from older mksh</li>
 <li><a href="#getcvs">Development version</a></li>
 <li>Inclusion in <a href="#otheros">operating systems</a></li>
 <li><a href="mksh_old.htm#contrib">comparison</a> with other shells</li>
 <li><a href="mksh_bld.htm">Testsuite Results</a> (regression tests)</li>
 <li><a href="mksh_old.htm#vsn">on version numbers</a> — for packagers</li>
 <li><a href="#plans">future plans</a> (<a href="mksh_old.htm#plans">older
  or unrealistic ones</a>)</li>
 <li><a href="#caveat">Upgrade Caveat</a> — for users</li>
 <li><a href="#clog">ChangeLog</a></li>
 <li>information about <a href="mksh_old.htm">old versions</a></li>
</ul>

<h2>mksh(1) R54</h2>

<p>This is the website of the MirBSD™ Korn Shell, an actively developed free
 implementation of the Korn Shell programming language and a successor to the
 Public Domain Korn Shell (pdksh).</p>

<p class="cr"><span class="fr" style="width:128px; height:100px;"><object
  type="image/svg+xml" data="@@RELPATH@@pics/mksh.svg"
  width="128" height="100"><img alt="mksh Logo"
  src="@@RELPATH@@pics/mksh128x100.png" /></object>
 </span>This page is always accessible via a redirection at <a
 href="http://mirbsd.de/mksh"><tt>http://mirbsd.de/mksh</tt></a>, which is
 the canonical homepage URI. There also is (most of the time) <a
 href="http://freecode.com/projects/mksh">mksh on Freshmeat</a> and an <a
 href="https://www.ohloh.net/p/mksh">mksh project page on ohlol</a>, a
 statistics site. mksh is <a href="https://launchpad.net/mksh">experimentally
 tracked at Launchpad</a>. Download the Logo as <a
 href="@@RELPATH@@pics/mksh.svg">SVG</a> if you want. There’s also a <a
 href="@@RELPATH@@TaC-mksh.txt">full licence terms</a> overview.</p>

<p>mksh <em>must</em> always be written either “mksh” (all-lowercase) or
 “MirBSD Korn Shell” — there is no other spelling. It’s usually pronounced
 by spelling out the four letters m, k, s and h individually, or by saying
 “MirBSD Korn Shell”.</p>

<h2 class="cr" id="prefetch">Introduction</h2>
<p>The current version of mksh is <strong>mksh R54</strong> from
 <em>12 November 2016</em>.<br />In the oldstable bugfixing-only series, the
 current version is <em>mksh R50f</em> from <em>19 April 2015</em>.</p>
<p>Thanks to “Der Verein <a href="http://www.trash.net/verein/">trash.net</a>”
 for sponsoring access to a Solaris 8 box. Thanks to Julian “yofuh” Wiesener
 for just another account on a Sun E420 on Solaris 11β. Thanks to someone who
 prefers to stay anonymous due to tons of red tape for providing access to an
 AIX 5.3 system with gcc and xlC installed. (Both are now defunct.) Thanks to
 Jupp “cnuke” Söntgen for building on AIX in Dresden nowadays. Thanks to HP
 TestDrive/PvP/DSPP/CLOE, which helps in keeping mksh portable to several
 Unixes and compilers, and track down some architecture- or glibc-specific
 bugs. (These days, HP-UX/IA64 only, though.) Thanks to gnubber’s admin (Barry
 “bddebian” deFreese), as well as Samuel “youpi” Thibault, for providing shell
 access to a Debian GNU/Hurd system. Thanks to Lucas “laffer1” Holt for ssh
 access to the MidnightBSD server. Thanks to Waldemar “wbx” Brodkorb for
 dropping his unused Zaurus SL-C3200 to someone who can actually make use of
 it to test mksh on OpenBSD. Thanks to Andreas “gecko2” Gockel for access to
 a couple of Debian and Macintosh boxen and an iPhone 3G. Thanks to Martin
 Zobel-Helas for an account on an Alpha system. Thanks to Bastian “waldi”
 Blank for access to an S/390 system and uploading mksh packages to Debian
 for quite some time. Also thanks to Otavio Salvador and Patrick “aptituz”
 Schönfeld for uploading a couple of my Debian packages. The Debian GNU/k*BSD
 and Hurd developers were quite helpful in assisting and testing as well.
 Thanks to Thomas E. “TGEN” Spanjaard for access to both a NetBSD and a
 DragonFly system. Thanks to Josef “jupp” / “penpen” Schugt for testing mksh
 on a Digital Unix (OSF/1 V4.0) system from the Uni Bonn Physik CIP Pool.
 Thanks to DEChengst from #UnixNL for providing access to a HP/Compaq Tru64
 (OSF/1 V5.1B) system, an OSF/1 V2.0 system and an Ultrix 4.5 system. Thanks
 to Adam “replaced” Hoka for a BSDi BSD/OS 3.1 ISO9660 image and offering to
 help with HP-sUX testing (now that HP TestDrive went down) and initial
 porting to Haiku, which was continued at CLT 2010 with help from Stephan
 Aßmus. Thanks to André “naaina” Wösten for ssh on a QNX box. Thanks to
 Olivier Duchateau for testing on Slackware and Zenwalk GNU/Linux.
 Thanks to Winston W. for spotting musl, and thanks to maximilian attems
 and H. Peter Anvin for almost fixing klibc. Thanks to RT|Chatzilla,
 Chris “ir0nh34d” Sutcliffe, and others for Win32 platform assistance.
 Thanks to Brian Callahan from the Rensselaer Polytechnic Institute for
 running test builds on AIX 5.1L with the xlC 5.0.2.0 and gcc-2.9, and on
 Solaris 8 with Forte Developer 7 C 5.4 and gcc 2.95.2 and 3.4.6 compilers.
 No thanks to Intel for not including mksh in their programme analysing code.
 (Did I miss anyone? Mail me if so. Some of these are past, anyway.)</p>
<p>What is mksh(1)? — Short answer: The MirBSD Korn Shell. Okay, but what
 exactly does it do, or why another shell? These questions will be answered
 <a href="mksh_old.htm#contrib">here</a> for the people interested. Right now, you only
 need to know that mksh is a <a href="http://www.debian.org/social_contract#guidelines">DFSG</a>-free
 and <a href="http://www.opensource.org/docs/osd">OSD</a>-compliant (and OSI
 approved)
 successor to pdksh, developed as part of <a href="http://mirbsd.de/">the
 MirOS Project</a> as native Bourne/POSIX/Korn shell for MirOS BSD, but also
 to be readily available under other UNIX®-like operating systems.</p>
<p id="lic">The source code for mksh is available at the MirOS Project mirrors
 as well as these of other operating system projects due to being <a
 href="#otheros">included</a> in these; however, we do not provide binaries.
 Find <a href="#build">instructions to build and install mksh</a> below, or
 ask your operating environment vendor to package and include mksh; we provide
 assistance for this task if asked. <em>Licencing</em> permits this as long
 as due credit is given to the authors and contributors and the copyright
 notices are not removed in their entirety; modifying is allowed (but if
 the result is still called mksh, it’s discouraged; talk with us if you
 feel you have to modify mksh). The individual licences used are the MirOS
 licence, and (for BSD compatibility on other operating systems) the 3-clause
 UCB licence and the ISC licence; <a href="@@RELPATH@@TaC-mksh.txt">full
 terms</a> are available. pdksh originally was public domain, with a few
 exceptions, but these files are not part of mksh R21 or up. The mksh(1) author
 (mirabilos) acknowledges the contributions of these people who dedicated pdksh
 and oksh to the public, and asserts a collective copyright on the code.
 All these licences are DFSG clean and conform to the OSD, and the MirOS
 Licence is listed on the pages of the ifrOSS licence centre as well as
 in the FSF/UNESCO Directory of Free Software. The MirBSD Korn Shell is <a
 href="@@RELPATH@@permalinks/news_e20081114-nn.htm">OSI Certified <img
 src="@@RELPATH@@pics/open_source_button.png" alt="Open Source Software™" />
 </a> and its <a href="@@ABSPATH@@/man/mksh.1">manual</a> is <a
 href="http://www.opendefinition.org/1.0">Open Knowledge</a>.</p>
<p>To compile mksh, you will need a Bourne or POSIX shell (Solaris
 <tt>/bin/sh</tt> is enough, the Z shell works), a C compiler, system and C
 library header files and the standard C runtime. You will also need a set of
 standard UNIX® tools on a supported operating system: any recent BSD; Darwin,
 Apple Mac OSX; Interix (Microsoft® Services for Unix 3.5, maybe Subsystem for
 Unix Applications on Win2003/Vista); GNU/Cygwin; UWIN; GNU/Linux (libc5,
 glibc, dietlibc, µClibc, some klibc systems are tested), Debian GNU/kFreeBSD,
 GNU/Hurd or GNU/Linux; Sun Solaris (8, 9, 10, 11), OpenSolaris; AIX; IRIX;
 HP-UX 11i; OSF/1; ULTRIX; Minix 3; NeXTstep (but not OpenStep 4.2); QNX;
 BeOS (with limitations) or Haiku; SCO OpenServer 5 (with limitations) or 6
 or SCO UnixWare; …<br />To run the regression test suite, you will need a not
 too antiquated Perl optimally with POSIX.pm or Errno.pm as well as <tt><a
 href="mksh_old.htm#editor">/bin</a>/ed</tt> (whose installation is
 strongly suggested anyway, because it’s the standard <tt>FCEDIT</tt> history
 editor and standard UNIX® text editor), as well as a controlling terminal,
 usually <tt>/dev/tty</tt> or provided from script(1) or GNU screen.</p>
<p>To use mksh, you only need the C runtime (and any supplemental libraries
 the binary was linked against) and, optionally, <tt>/bin/ed</tt> — for
 interactive use, a controlling terminal is highly recommended because job
 control does not work without one.</p>
<p>To make full use of mksh(1)’s interactive features, it is recommended to
 copy the <tt>dot.mkshrc</tt> file from the source distribution as
 <tt>~/.mkshrc</tt> into the user’s home directory and let the user adjust
 it to suit his needs. The sample file configures a few aliases and shell
 functions as well as a sensible prompt (<tt>$PS1</tt>) and some csh-like
 directory stack functions and zsh-like hooks. Full use of this file requires
 a few special UNIX® tools. Note that <tt>$ENV</tt> must not be set for
 mksh(1) to parse the <tt>~/.mkshrc</tt> file at startup.</p>

<h2 id="irc">Support</h2>
<p>We provide an online manual page in <a
 href="@@ABSPATH@@/man/mksh.1">HTML</a> and <a
 href="@@ABSPATH@@/MirOS/dist/mir/mksh/mksh.pdf">PDF</a> format.
 Reading books about Korn Shells in general is recommended as further help,
 but beware of the <a href="mksh_old.htm#contrib">differences</a> (ATTENTION
 outdated content behind that link) to other shells. Some
 ISBNs are listed at the end of the manual page.</p>
<p>The <a href="@@RELPATH@@tag_mksh.rss">RSS feed</a> collects news and wlog
 entries regarding mksh.</p>
<p>If you require additional assistance or want to discuss bugs, features
 or enhancements, write to the <a href="mailto:miros-mksh@mirbsd.org">mailing
 list</a> (or subscribe to it by sending an eMail to the <a
 href="mailto:postmaster@mirbsd.org">postmaster</a> telling which address
 to subscribe to which list(s) — in your case, the miros-mksh list, but we
 have <a href="@@RELPATH@@rss.htm#lists">more mailing lists</a>).
 The mailing list can be reached via the GMane archive using either <a
 href="nntp://news.gmane.org/gmane.os.miros.mksh">NNTP</a> or <a
 href="http://news.gmane.org/gmane.os.miros.mksh">HTTP</a>, or at <a
 href="http://www.mail-archive.com/miros-mksh@mirbsd.org/">The Mail
 Archive</a>, although not at MARC.
 Joining the IRC channel at <a href="http://freenode.net/">Freenode</a>
 (irc.freenode.net, SSL port 6697, insecure port 6667)
 <tt>#!/bin/mksh</tt> (no joke, this is really the channel’s name) and
 <tt>#ksh</tt> (where you must distinguish AT&amp;T ksh from mksh though)
 is recommended as well.</p>

<h2 id="build">Installation</h2>
<p>Skip to the section about being <a href="#otheros">included in operating
 environments</a> unless you really want to compile mksh from source yourself
 or create a package for your operating system of choice.</p>
<p>First off, you have to download the source code from any of the mirrors
 listed below, or any other mirror you know of. Alternatively, use the <a
 href="#getcvs">development version</a> from CVS. Official source code
 distributions are digitally signed with gzsig(1) using the MirOS Project’s <a
 href="/gzsigkey.cer">current signature key</a>. Please verify the signature
 <em>as well as</em> the hashes and/or checksums below, so you’re sure the
 content is intact and the version number on the archive is correct.</p>
<h3 id="mirrors">Known Mirrors</h3><ul>
 <li><a href="https://www.mirbsd.org/MirOS/dist/mir/mksh/mksh-R54.tgz">https://www.mirbsd.org/MirOS/dist/mir/mksh/mksh-R54.tgz</a></li>
 <li><a href="http://pub.allbsd.org/MirOS/dist/mir/mksh/mksh-R54.tgz">http://pub.allbsd.org/MirOS/dist/mir/mksh/mksh-R54.tgz</a></li>
 <li><a href="https://www.mirbsd.org/MirOS/dist/mir/mksh/mksh-R50f.tgz">https://www.mirbsd.org/MirOS/dist/mir/mksh/mksh-R50f.tgz</a></li>
 <li><a href="http://pub.allbsd.org/MirOS/dist/mir/mksh/mksh-R50f.tgz">http://pub.allbsd.org/MirOS/dist/mir/mksh/mksh-R50f.tgz</a></li>
</ul>
<h3 id="hashes">Checksums and Hashes</h3><ul>
<!-- cd /MirOS/dist/mir/mksh; ls; read x; cksum -a rmd160 -a tiger $x; cksum $PWD/$x; md5 $x -->
  <li>RMD160 (mksh-R54.tgz) = 3b3435b60dc040995b1a63289c7169a08175dd95</li>
  <li>TIGER (mksh-R54.tgz) = 82815a629764443896b46f03931a8d1bde102d72a30d645c</li>
  <li>1161958218 395538 /MirOS/dist/mir/mksh/mksh-R54.tgz</li>
  <li>MD5 (mksh-R54.tgz) = be0a6fb93b4a5f927bcc1893bb6692f8</li>
 <li style="list-style:none;">↑ formal release │ stable bugfix series ↓</li>
  <li>RMD160 (mksh-R50f.tgz) = e0de1dd07e6ca02830407b9db43de8f5c98d800f</li>
  <li>TIGER (mksh-R50f.tgz) = db437ce08d7c6a8449c5ba5827a9742cbaca7c16be261971</li>
  <li>571627567 377797 /MirOS/dist/mir/mksh/mksh-R50f.tgz</li>
  <li>MD5 (mksh-R50f.tgz) = c3bdd668992e7369165910f0902fa854</li>
 <li style="list-style:none;">All official distfiles are gzsig(1)d. with our
  <a href="/gzsigkey.cer">current signature key</a>.</li>
</ul>
<h3 id="cats">Preformatted Documentation</h3><ul>
 <li><a href="@@ABSPATH@@/MirOS/cats/mir/mksh/mksh-R54.cat1.gz">catman</a></li>
 <li><a href="@@ABSPATH@@/MirOS/cats/mir/mksh/mksh-R54.htm.gz">XHTML</a></li>
 <li><a href="@@ABSPATH@@/MirOS/cats/mir/mksh/mksh-R54.pdf">PDF</a></li>
 <li><a href="@@ABSPATH@@/MirOS/cats/mir/mksh/mksh-R54.txt.gz">plaintext</a></li>
</ul>

<h3 id="decomp">Decompression</h3>
<p>We’re using gzip(1)-compressed POSIX us<!-- -->tar(1) distfiles nowadays,
 so a simple <tt>tar -xzf mksh-R54.tgz</tt> will work. It will create all
 files in a subdirectory <tt>./mksh/</tt>.</p>

<h3 id="vendorpatching">Patching</h3>
<p>If you’re a packager/vendor and need to patch mksh and deviate from the
 default behaviour for that version which is indicated from $KSH_VERSION,
 patch your shell to append a space plus a vendor-defined string (examples <a
 href="http://cvs.pld-linux.org/cgi-bin/viewvc.cgi/cvs/packages/mksh/mksh-distro.patch?view=co&amp;revision=1.1">PLD</a>,
 <a href="http://patch-tracker.debian.org/patch/misc/view/mksh/35.2-3/sh.h">Debian</a>)
 so they can be distinguished. I think this is a reasonable request.</p>

<h3 id="compile">Compilation</h3>
<p>Now you’re in the source code directory; <tt>Build.sh</tt> does all the
 magic for you. In theory, invoking the command<br />
 <tt>% /bin/sh ./Build.sh</tt><br />
 should work. Relative paths can be used too, for example, instead of cd(1)ing
 to the source directory, you could’ve done<br />
 <tt>% mkdir build; cd build; /bin/sh ../mksh/Build.sh</tt></p>
<p>It is optionally possible to place files, such as <tt>printf.c</tt>, into
 either the current or the source directory. It will need a compile option
 (see below) to be activated. <tt>printf.c</tt> is
 undesirable because it uses stdio, floating point and bloats.</p>
<p>The build script requires a Bourne shell (Solaris <tt>/bin/sh</tt>, the <a
 href="http://heirloom.sourceforge.net/sh.html">Heirloom sh</a>, DEC OSF/1
 V2.0 <tt>/bin/sh</tt>), Korn shell (ksh, ksh88, ksh93, pdksh, mksh, oksh,
 maybe the MKS ksh), POSIX shell (posh, <tt>/usr/xpg4/bin/sh</tt>, ash, dash,
 yash), a related shell (J�rg/Jvrg/Joerg/Jörg Schilling’s bosh or sh, or the
 Z Shell), or a Bourne or POSIX superset (such as GNU bash) to work; the
 ULTRIX <tt>/bin/sh</tt> or the C shell (csh, tcsh) or “bsh” or a scripting
 shell like the wish won’t.<br />Accepted arguments are:</p><ul>
<li><tt>-c</tt> <i>mode</i> — set compiler mode:<ul>
 <li><tt>combine</tt> to use “-fwhole-program --combine” (gcc4)</li>
 <li><tt>dragonegg</tt> to use the LLVM Dragonegg plugin with GCC</li>
 <li><tt>llvm</tt> to compile to bytecode, optimise there (see the
  <tt>-O</tt>/<tt>-o</tt> options) and link with LLVM tools</li>
 <li><tt>lto</tt> to use some kind of Link Time Optimisation with clang
  or gcc-4.5 and up; with fallback to <tt>combine</tt> if not found</li>
 </ul></li>
<li><tt>-g</tt> — build with debug info, Valgrind and LLVM/Clang scan-build
 assertions, and <tt>-DDEBUG</tt> in place</li>
<li><tt>-j</tt> — parallel build; use LTO instead if you can</li>
<li><tt>-M</tt> — do not compile but create <tt>Makefrag.inc</tt></li>
<li><tt>-O</tt> — (default) with “-c llvm” use “-std-compile-opts”</li>
<li><tt>-o</tt> <i>opts</i> — with “-c llvm” use these optimisations</li>
<li><tt>-Q</tt> — be (only) a little less verbose</li>
<li><tt>-r</tt> — don’t try to build a pre-formatted version
 of the manual page using nroff(1) if found — <em>recommended</em></li>
<li><tt>-v</tt> — display version and exit</li>
</ul>
<p>Note: “-c <i>somemode</i>”, “-j” and “-M” are mutually exclusive.
 The least preferred of the actually compiling flavours is <tt>-j</tt>,
 and the one we consider best is <tt>-c lto</tt> (since it achieves the best
 optimisations). It is sometimes possible to use <tt>-j</tt> together
 with <tt>-c llvm</tt> to parallelise LLVM Bytecode generation, though.</p>
<p>Note: LTO is brittle (GCC developers like to break it once every few
 releases); LLVM has not been used for a long time.</p>
<p>The <a href="@@RELPATH@@cvs.cgi/src/bin/mksh/Build.sh?rev=HEAD">build
 script</a> also honours some environment variables detailed at its end.</p>
<p>Install this binary as <tt>/bin/mksh</tt> and its manual page; you may
 want to also install <tt>dot.mkshrc</tt>, either directly into the skeleton
 directory, or with <a
 href="http://anonscm.debian.org/cgit/collab-maint/mksh.git/plain/debian/.mkshrc">a
 wrapper <tt>/etc/skel/.mkshrc</tt> file</a> that reads <tt>/etc/mkshrc</tt>,
 especially if packaging for a GNU distribution.</p>

<h5 id="compile_lksh">Building lksh</h5>

<p>Add the <tt>-L</tt> flag to the <tt>Build.sh</tt> to create lksh(1),
 a variant of the shell that uses POSIX-compliant arithmetics with the
 host “long” data type, instead of mksh’s guaranteed-reliable 32-bit
 arithmetics. You probably want to add <tt>-DMKSH_BINSHPOSIX</tt> and,
 possibly, <tt>-DMKSH_BINSHREDUCED</tt> to the command line and install
 the <tt>lksh</tt> binary as your system <tt>/bin/sh</tt> if you go that
 route. (This shell is not intended to be used interactively. Its purpose
 is to run legacy sh scripts (especially with the <tt>MKSH_BINSHREDUCED</tt>
 option) and POSIX sh scripts, including Debian maintainer scripts.)</p>
<p>Install this binary as <tt>/bin/lksh</tt> and its companion manpage,
 but remember that it does not come stand-alone and to always ship the
 full proper mksh shell alongside it.</p>

<h4 id="oespec">Operating Environment specific notes</h4>

<h5 class="cr" id="oe_ack"><img width="71" height="64" alt="[Minix logo]"
 class="fr" src="@@RELPATH@@pics/logos/minix.png" />Compiler: ACK</h5>
<p>Support for <a href="http://www.cs.vu.nl/ack/">ACK on Minix 3</a> has
 been added in mksh R37c with a workaround a known ACK bug (the “const”
 bug); it is now perfectly usable.</p>
<p>Support for <a
 href="http://tack.sourceforge.net/">other ACK versions</a> or targets can
 be user-contributed. It currently lacks a sane frontend supporting things
 like “cc -E” (<tt>ack -E</tt> is ignored), at the least, and does not yet
 process system headers like &lt;sys/types.h&gt;.</p>

<h5 class="cr" id="oe_bcc">Compiler: Borland C++ Builder</h5>
<p>This compiler is somewhat supported in mksh R30 with UWIN’s cc wrapper.
 (We haven’t been able to produce a working executable though.)</p>

<h5 class="cr" id="oe_c68">Compiler: C68 (C386, etc.)</h5>
<p>The Walkers’ C89 compiler is not supported at the moment, but this
 is mostly due to difficulties in figuring it out. Any people who actually
 got it to compile anything, especially for both Linux and Minix, for both
 i386 and m68k, please contact us.</p>

<h5 class="cr" id="oe_decc">Compiler: DEC/Compaq/HP C for OSF/1 and Tru64</h5>
<p>This compiler is fully supported with mksh R33b (partial support did
 appear earlier).</p>
<p>The ucode based compiler, linker and loader for Digital UNIX (OSF/1)
 V2.0 on MIPS is supported since mksh R36. It may, however, be forced to
 link statically to work around a bug in the toolchain.</p>

<h5 class="cr" id="oe_dmc">Compiler: Digital Mars</h5>
<p>This compiler is somewhat supported in mksh R30 with UWIN’s cc wrapper
 and a few kludges. (We haven’t been able to produce a tested executable
 though, due to general stability issues with the UWIN platform.)</p>

<h5 class="cr" id="oe_gcc"><img width="54" height="64" alt="[GCC logo]"
 class="fr" src="@@RELPATH@@pics/logos/gcc.png" />Compiler: GCC</h5>
<p>The GNU C Compiler 1.42, 2.7.2.1, 2.7.2.3, egcs (gcc 2.95) and the GNU
 Compiler Collection (gcc 3.x, 4.x) are known to work, but not all versions
 work on all targets. Early 2.x versions (like 2.1) may make trouble.
 Specific C flags, known extensions, etc. are autoprobed; cross-compilation
 works fine. Use of gcc 4.x is discouraged because of several dangerous changes
 in how the optimiser works; it is possible to work around their trading off
 reliability for benchmark-only speed increases, but because mksh developers
 do not use gcc 4.x this will have to be user-contributed. On the other hand,
 gcc 3.x (in some cases 2.x) is the best choice for compiling mksh.</p>
<p>On BSDi BSD/OS, where gcc 1.42 and gcc 2.7.2.1 are available, the cc(1)
 manual page mentions that gcc 1.42 produces more reliable code, so we
 recommend to build mksh with <tt>CC=cc</tt> (gcc1) instead of <tt>CC=gcc</tt>
 or <tt>CC=gcc2</tt> there instead.</p>
<p>Since mksh uses ProPolice, the Stack-Smashing Protector, some GCC versions’
 compilates require additional shared libraries. To disable this, pass
 <tt>HAVE_CAN_FSTACKPROTECTORALL=0</tt> in the build environment.</p>
<p>GCC and Valgrind do not always play well together, hence the build option
 <tt>-valgrind</tt> adding <tt>-fno-builtin</tt> to avoid gcc producing code
 that can access memory past the end of the allocation.</p>

<h5 class="cr" id="oe_hpc"><img width="111" height="64" alt="[HP-UX logo]"
 class="fr" src="@@RELPATH@@pics/logos/hp-ux.png" />Compiler: HP C/aC++</h5>
<p>HP’s C compiler (/usr/bin/cc on HP-UX) is supported in mksh R30 and above;
 on IA64, only the LP64 model can be used; mksh used to segfault in the ILP32
 module (or rather, the system libraries did, I think), so it was default.
 PA-RISC too works fine, so this compiler is a primary choice.</p>
<p>In mksh R39b and up, you must set <tt>CFLAGS='+O2 +DD64'</tt> on IA64 to get
 the same behaviour as previous versions; the 32-bit mode is now the default.
 The HP-UX bundled compiler <tt>/usr/ccs/bin/cc</tt> works as well as HP aCC,
 except of course that it does not optimise. (GCC and C99 extensions aren’t
 actually used by mksh.)</p>

<h5 class="cr" id="oe_xlc">Compiler: IBM XL C/C++ / VisualAge</h5>
<p>IBM xlC 9.0 on AIX 5.3 is supported in mksh R30 and above.</p>
<p>IBM xlC 8.0 on Linux/POWER and IBM xlC 6.0β on MacOS X are on the TODO.</p>
<p>IBM xlC 7.0 on AIX 5.2 is supported in mksh R35c and above.</p>
<p>IBM xlC 5.0 on AIX 5.1L also works.</p>

<h5 class="cr" id="oe_icc">Compiler: Intel C/C++/Fortran</h5>
<p>ICC emulates GCC quite well (too well for my taste), is fully supported in
 mksh R30 and above on several platforms, but spits out <strong>lots</strong>
 (and I <em>mean</em> huge ugly lots) of bogus warnings during compile. We’re
 not going to work around these; let Intel fix their compiler instead. Some of
 these warnings were even responsible for bugs in mksh.</p>
<p>I could not get the Intel Compiler 10 for Windows® to work.</p>
<p>mksh enables the ICC stack protector option automaticaly. Compilates
 usually require the Intel shared libraries to be around.</p>

<h5 class="cr" id="oe_firm">Compiler: libFirm/cparse</h5>
<p>libFirm with the cparse front-end is indistinguishable from GCC and
 known to build mksh R41 just fine.</p>

<h5 class="cr" id="oe_llvm"><img width="64" height="64" alt="[LLVM logo]"
 class="fr" src="@@RELPATH@@pics/logos/llvm.png" />Compiler: LLVM</h5>
<p>Apple llvm-gcc from Xcode 3.1 had full success with mksh R34.</p>
<p>Vanilla <a href="http://llvm.org/">llvm-gcc</a> works fine as well.</p>
<p>Vanilla <a href="http://clang.llvm.org/">llvm-clang</a> starting at
 r58935 produces working code with mksh R36b and up.</p>

<h5 class="cr" id="oe_msc">Compiler: Microsoft® C/C++</h5>
<p>Support for the Microsoft® C Compiler on Interix and UWIN, with the
 respective <tt>/usr/bin/cc</tt> wrappers, appeared in mksh R30.
 The following product versions have been tested:</p>
<p><tt>CL.EXE: Microsoft (R) 32-bit C/C++ Standard Compiler Version 13.00.9466 for 80x86<br />
 LINK.EXE: Microsoft (R) Incremental Linker Version 7.00.9466</tt><br />
 (both are part of the .NET Common Language Runtime redistributable)</p>
<p><tt>CL.EXE: Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 14.00.50727.42 for 80x86<br />
 LINK.EXE: Microsoft (R) Incremental Linker Version 8.00.50727.42</tt><br />
 (both are part of Visual Studio 2005 C++ Expreß)<br />
 You’ll have to change Interix’ cc(1) wrapper though: replace <tt>/Op</tt>
 with <tt>/Gs-</tt> to disable the stack checks (missing support in libc
 for them, they used to be off by default) and remove <tt>/Ze</tt>.</p>
<p>On Interix (SFU 3.5), this compiler is maturely usable and a good choice.</p>
<p>On GNU/Cygwin, using <a href="http://interix-wgcc.sourceforge.net/">wgcc</a>
 it <em>might</em> be possible to use this compiler. I could not test that yet,
 though.</p>
<p>On UWIN, this is usable as well.</p>

<h5 class="cr" id="oe_mpp">Compiler: MIPSpro</h5>
<p>Support for SGI’s MIPSpro compiler on IRIX appeared in mksh R33b.</p>

<h5 class="cr" id="oe_nwcc"><img width="244" height="64" alt="[nwcc logo]"
 class="fr" src="@@RELPATH@@pics/logos/nwcc.png" />Compiler: nwcc</h5>
<p>Support for nwcc appeared in mksh R36b; it is recommended to use
 nwcc 0.8.1 with mksh R39c or newer. The stack protector is currently
 disabled because it introduces errors.</p>

<h5 class="cr" id="oe_pcc">Compiler: PCC (BSD)</h5>
<p>Support for the Caldera/SCO UNIX® based, BSD-licenced portable C compiler
 in the <a href="http://pcc.ludd.ltu.se/">ragge version</a> has been added
 with mksh R31d. Versions from end of April 2008 onwards are known to work
 reliably, even with -O enabled. Intermediate bugs that may have appeared
 are just as quickly fixed.</p>

<h5 class="cr" id="oe_sun">Compiler: SUNpro</h5>
<p>Support for the <a href="http://developers.sun.com/sunstudio/">SUN Studio
 12</a> compiler (cc 5.9) as well as cc 5.8 appeared in mksh R30; other
 versions might be supported as well. This compiler is a primary choice.</p>
<p>Sun Forte Developer 7 C 5.4 2002/03/09 also works.</p>

<h6 id="oe_sunmir">Using SUNWcc on MirBSD/i386</h6>
<p>Preparation steps. We assume that Sun Studio is extracted under the
 <tt>/opt/SUNWcc</tt> directory and Linux emulation has been set up.
 From now on, <tt>$S</tt> is <tt>/opt/SUNWcc/sunstudio12.1</tt> (when
 using an older version, no “.1” at the end).</p>
<pre>$ cat $S/../MirBSD/ld                   # must be executable (0555)
#!/bin/mksh
set -A args -- "$@"
integer i=0
while (( i &lt; ${#args[*]} )); do
        [[ ${args[i]} = -dynamic-linker ]] &amp;&amp; args[i+1]=/usr/libexec/ld.so
        [[ ${args[i]} = -Y ]] &amp;&amp; args[i+1]=/usr/lib
        let ++i
done
exec /usr/bin/ld "${args[@]}"</pre>
<p>In <tt>$S/prod/include</tt> “mkdir MirBSD_orig” and “mv cc MirBSD_orig/”.
 In <tt>$S/prod/lib</tt> “mkdir MirBSD_orig” and “mv *.o MirBSD_orig/” then
 “mv MirBSD_orig/values-xa.o .” (we need this one).</p>
<p>Furthermore, run “make obj &amp;&amp; make depend &amp;&amp; make &amp;&amp;
 make sunstuff” in <tt>/usr/src/lib/csu/i386_elf</tt> then copy the three files
 obj/sun_crt{1,i,n}.o to <tt>$S/prod/lib/</tt>crt{1,i,n}.o (they are the MirBSD
 glue code / startup files).</p>
<p>For some versions, you may need to ensure <tt>/emul/linux/lib</tt> and
 <tt>/emul/linux/usr/lib</tt> do not contain any *.so or *.o files, except
 for libbfd, libopcodes, libstdc++ (but 12.1 uses the native linker).</p>
<p>In 12, -xO2 is broken; in 12.1 optimisation merely lets ir2hf run out
 of memory even with ulimit -d ulimit -dS 1572864, hence, -xipo cannot be
 used either. ☹</p>
<p><strong>Using SUNWcc on MirBSD to build mksh</strong></p>
<pre> $ S=/opt/SUNWcc/sunstudio12.1
 $ LD_LIBRARY_PATH=$S/prod/lib/sys:$S/prod/lib:$S/rtlibs CC=$S/prod/bin/cc \
   LDFLAGS="-Yl,$S/../MirBSD" mksh /usr/src/bin/mksh/Build.sh -r</pre>

<h5 class="cr" id="oe_tcc"><img width="100" height="60" alt="[tcc logo]"
 class="fr" src="@@RELPATH@@pics/logos/tcc.png" />Compiler: tcc (Tiny C)</h5>
<p>Support for Fabrice Bellard’s tcc appeared in mksh R31, although its
 unability to do ‘-E’ in older versions gave us some headache. The bounds
 checker is currently disabled as it causes segfaults. Some intermediate
 versions of tcc break every once in a while.</p>

<h5 class="cr" id="oe_t15">Compiler: TenDRA (maybe Ten15 too)</h5>
<p>Support for TenDRA appeared in mksh R31 and appears to be solid; mksh
 uses the ‘system’ profile for compiling by default. Users who wish to
 build mksh with a different profile are welcome to help to port it.</p>
<p>See <a href="#oe_bsu">ULTRIX</a> for an example of getting a ‘POSIX’
 profile to work.</p>

<h5 class="cr" id="oe_muc">Compiler: DEC ucode (MIPS CC)</h5>
<p>Since mksh R33c, ucode on Ultrix is fully supported.</p>

<h5 class="cr" id="oe_usl">Compiler: USL C</h5>
<p>This is the vendor compiler on SCO OpenServer and SCO UnixWare. It is
 recognised from R40f onwards.</p>

<h5 class="cr" id="oe_adk">Distribution: OpenADK</h5>
<p>This development kit provide the same support cross-platform,
 with µClibc, musl and/or glibc, and thus should behave the same on
 all supported targets.</p>

<h5 class="cr" id="oe_wrt">Distribution: OpenWrt</h5>
<p>This distribution provides the same support cross-platform,
 with µClibc and/or glibc, and thus should behave the same on
 all supported targets.</p>

<h5 class="cr" id="oe_android">Platform: Android</h5>
<p>Supported with OpenADK (static) and NDK (although the build
 process is currently not feasible with an Android.mk file but possible
 if the CPPFLAGS and signames.inc are pregenerated; sys_signame[] has
 been pushed upstream and is in Android 1.6). Integration
 into both AOSP and the Google master, as <tt>/system/bin/sh</tt>, has
 been done and it can be enabled on a per-target basis at the moment;
 mksh is shipped with Android 3.0 and newer releases and the standard
 shell of non-emulator builds on Android 4.0 and newer.</p>

<h5 class="cr" id="oe_iphone">Platform: iPhone</h5>
<p>This is just <a href="#oe_osx">Mac OSX</a>, compile (natively, or
 cross via the SDK) and copy.</p>

<h5 class="cr" id="oe_maemo">Platform: Maemo</h5>
<p>This is like Debian, and packaging is available via the Garage and
 the Extras repository. Helpers (for GUI integration and actual on
 device testing) seeked.</p>

<h5 class="cr" id="oe_diet">Toolchain: dietlibc</h5>
<p>Fefe’s dietlibc works in mksh R34, although his opinion towards certain
 standards, such as <tt>caddr_t</tt>, strcasecmp(3), etc. are weird.</p>

<h5 class="cr" id="oe_klcc">Toolchain: klibc</h5>
<p>klibc needs <tt>-DMKSH_NO_LIMITS</tt> and can then use stock klcc as
 compiler wrapper (CC=klcc).</p>

<h5 class="cr" id="oe_musl">Toolchain: musl</h5>
<p>Appears to work just fine in R41b and up.</p>

<h5 class="cr" id="oe_bs3">OS: 386BSD</h5>
<p>This seems to work with mksh R41, although on 386BSD-0.0new (anything
 older than 386BSD-0.1) you need to patch the kernel against <a
 href="http://groups.google.com/group/comp.unix.bsd/browse_thread/thread/1c6397039f10e76b">a
 close-on-exec bug</a> and a bug when switching the terminal between <a
 href="http://groups.google.com/group/comp.unix.bsd/browse_thread/thread/cb899f7ccb81550b">cooked
 and raw mode</a> as well add an execve with support for <a
 href="http://www.dnull.com/bsd/oldnews/bsdnew1761.html">shebangs and
 long command liness</a>.</p>

<h5 class="cr" id="oe_aix">OS: AIX</h5>
<p>Support for AIX with xlC appeared in mksh R30.</p>

<h5 class="cr" id="oe_beos">OS: BeOS</h5>
<p>BeOS can, with limitations, be used with R40f and up. Job control is not
 working, and mksh must be rebuilt (once built) by running <tt>Build.sh</tt>
 with the same options again but using the just-built mksh as interpreter
 due to a severe pipe-related bug in the system sh. RT says that “BeOS
 5.1(Dano)/PhOS/Zeta” can be supported. He is also trying to figure out how
 to support BeOS 5.0 and how to distinguish it from 5.1…</p>

<h5 class="cr" id="oe_bsi">OS: BSDi BSD/OS</h5>
<p>BSD/OS 3.1 works fine with mksh R33.</p>

<h5 class="cr" id="oe_coh">OS: Coherent</h5>
<p>This is a somewhat experimental port in mksh R41. (More information
 will follow.) Set <tt>TARGET_OS=Coherent</tt> manually.</p>

<h5 class="cr" id="oe_cyg"><img width="48" height="48" alt="[Cygwin logo]"
 class="fr" src="@@RELPATH@@pics/logos/cygwin.png" />OS: GNU/Cygwin</h5>
<p>This operating environment is supported as much as it adheres to standard
 POSIX/SUSv3 conformant things. No workarounds for <tt>.exe</tt> suffixes or
 other platform-specific quirks have been or will be added.</p>

<h5 class="cr" id="oe_osx">OS: Darwin / Mac OSX</h5>
<p>Works pretty well.</p>

<h5 class="cr" id="oe_svr">OS: Dell UNIX 4.0 R2.2 (SVR4)</h5>
<p>This exot has been tested with R40f: gcc is absolutely unusable on this
 platform but the vendor compiler works.<br />
 Set <tt>TARGET_OS=_svr4</tt> manually.</p>

<h5 class="cr" id="oe_dos">OS: MS-DOS, DR DOS, FreeDOS</h5>
<p>DJGPP’s bash.exe fails to run Build.sh, thus this is currently not
 supported. (We tried!)</p>

<h5 class="cr" id="oe_dfl"><img width="56" height="60" alt="[DragonFly logo]"
 class="fr" src="@@RELPATH@@pics/logos/dfbsd.png" />OS: DragonFly BSD</h5>
<p>Perfect choice. Note <tt>/bin/sh</tt> compatibility needs a quirk.</p>

<h5 class="cr" id="oe_bsf"><img width="64" height="64" alt="[FreeBSD logo]"
 class="fr" src="@@RELPATH@@pics/logos/freebsd.png" />OS: FreeBSD</h5>
<p>Perfect choice. Note <tt>/bin/sh</tt> compatibility needs a quirk.</p>

<h5 class="cr" id="oe_hurd"><img width="64" height="64" alt="[Hurd logo]"
 class="fr" src="@@RELPATH@@pics/logos/hurd.png" />OS: GNU/Hurd</h5>
<p>This operating system is supported (on i386) since R29 but not well
 tested. mksh is part of Debian GNU/Hurd, so it is expected to work.</p>
<p>Starting with mksh R39b, there is no arbitrary limit on pathnames any
 more, as the operating system requires. (However, there are still other
 inherent limits in mksh, such as that of an interactive input line.)</p>

<h5 class="cr" id="oe_kbsd"><img width="64" height="64" alt="[Debian GNU/kFreeBSD logo]"
 class="fr" src="@@RELPATH@@pics/logos/kfreebsd.png" />OS: GNU/k*BSD</h5>
<p>This operating environment has been supported for quite a while as part
 of Debian and somewhat tested.</p>

<h5 class="cr" id="oe_linux"><img width="74" height="88" alt="[Linux logo]"
 class="fr" src="@@RELPATH@@pics/pinguin.png" />OS: GNU/Linux</h5>
<p>While POSIX does not apply to “GNU’s Not Unix”, the <a
 href="http://www.pathname.com/fhs/pub/fhs-2.3.html#SPECIFICOPTIONS2">FHS</a>
 (ex-FSSTND) does; please convince your distributor to move ed to /bin/ed if
 not already done. Manual page installation paths are not standardised in
 older distributions either.</p>
<p>Besides glibc (GNU libc), dietlibc (from Fefe), µClibc (embedded),
 klibc (for initramfs) and libc5 (on Linux 2.0.38) work, but locale
 detection is not automatic for some of them.</p>
<p>mksh can be used as /bin/sh on Debian and similarly strict distributions,
 which allow to use e.g. ash/dash there as well.</p>

<h5 class="cr" id="oe_haiku"><img width="236" height="64" alt="[Haiku logo]"
 class="fr" src="@@RELPATH@@pics/logos/haiku.png" />OS: Haiku</h5>
<p>Haiku can be used with mksh R39c and newer with a recent kernel from <a
 href="http://dev.haiku-os.org/ticket/5567">r35836 and newer, ca. mid-2010</a>
 due to a bugfix wrt. signal handling. gcc4hybrid might not work, gcc2hybrid
 might work well.</p>

<h5 class="cr" id="oe_hpux"><img width="111" height="64" alt="[HP-UX logo]"
 class="fr" src="@@RELPATH@@pics/logos/hp-ux.png" />OS: HP-UX</h5>
<p>Support for HP-UX with GCC appeared in mksh R29 and works with HP’s C
 compiler and is no longer experimental in mksh R30. Please use stty(1) to
 make the terminal sanely usable.</p>
<p>If passing custom CFLAGS, don’t forget <tt>-mlp64</tt> (GCC) or
 <tt>+DD64</tt> on Itanium.</p>

<h5 class="cr" id="oe_interix">OS: Interix</h5>
<p>We have only tested SFU 3.5 on Windows® 2000, not SUA on Windows® 2003 SR1
 or the version integrated into Vista. Windows 7’s works, gcc only though.</p>
<p>As the Unix Perl which comes with Interix is too old, and the ActiveState
 Perl has… other issues, to run the regression tests, please install Perl from
 <a href="http://www.pkgsrc.org/">NetBSD® pkgsrc®</a> instead.</p>
<p>As of mksh R30, the native compiler (cc(1)) is supported in addition
 to gcc, calling Microsoft C. Do not use the c89(1) wrapper.</p>
<p>If passing custom LIBS, don’t forget to add <tt>-lcrypt</tt> or any other
 library providing arc4random(3).</p>
<p>mksh can replace /bin/ksh and /bin/sh without any problems.</p>

<h5 class="cr" id="oe_sgi">OS: IRIX</h5>
<p>Support for IRIX64 6.5 appeared in mksh R33b.</p>

<h5 class="cr" id="oe_lynx">OS: LynxOS</h5>
<p>Although the promised evaluation version never arrived, someone managed
 to test mksh R40f on LynxOS 3.</p>

<h5 class="cr" id="oe_mnbsd"><img width="64" height="64" alt="[MidnightBSD logo]"
 class="fr" src="@@RELPATH@@pics/logos/mnbsd.png" />OS: MidnightBSD</h5>
<p>mksh is part of MidnightBSD 0.2-CURRENT and above and used as native
 /bin/ksh; it can be used as /bin/sh as well with a quirk.</p>
<p>MidnightBSD 0.3 uses mksh as <tt>/bin/sh</tt> indeed.</p>

<h5 class="cr" id="oe_minix"><img width="71" height="64" alt="[Minix logo]"
 class="fr" src="@@RELPATH@@pics/logos/minix.png" />OS: Minix 3</h5>
<p>Minix 3 is supported starting mksh R37b (gcc), R37c (ACK/adk cc).
 Minix 1 and Minix 2 will never be supported due to size constraints on
 16-bit platforms, unless a user contributes code. You will need:</p>
<pre># chmem =1048576 /usr/lib/em_cemcom.ansi
# chmem =262144 /usr/lib/i386/as</pre>
<p>Append the following line to main.c on Minix 3.1.2a or older:</p>
<pre>void _longjmp(jmp_buf env, int val) { longjmp(env, val); }</pre>
<h5>OS: Ninix 3</h5>
<p>Ninix 3 (Minix 3 with NetBSD® code) has first been working starting
 with mksh R40e (clang). More porting and tests are needed. <strong>This
 is different from “regular” Minix 3.</strong> Do be sure to set your
 <tt>TARGET_OS</tt> environment variable correctly.</p>
<h5>OS: Minix-386</h5>
<p>mksh R42 works on Minix-386 down to version 1.7.0 but not 1.5 due
 to OS limitations; you might have to compile on version 2.0 as the
 ACK bundled with 1.7 segfaults.</p>
<h5>OS: Minix-vmd</h5>
<p>mksh R42 works fine on Minix-vmd 1.7 with ACK.</p>

<h5 class="cr" id="oe_mnt">OS: MiNT / FreeMiNT</h5>
<p>Support appeared in mksh R40. Depending on the distribution you use,
 you must use pdksh with CC=gcc to run
 <tt>Build.sh</tt> — cc and bash are both too broken. Afterwards, you
 <strong>must</strong> use the just-built mksh (after moving it out of
 the build directory) to re-run <tt>Build.sh</tt> with the same flags,
 due to bugs in pdksh on MiNT as well.</p>
<p>Most things work. FD_CLOEXEC is broken, so filedescriptor privacy
 has POSIX level only. <tt>/dev/tty</tt> is usually unusable; it might
 help to symlink <tt>/dev/console</tt> there but break other things.</p>
<p>(At OpenRheinRuhr 2011, tg@ had access to a FreeMiNT distribution
 which did not seem to exhibit any of the mentioned problems. YMMV.)</p>

<h5 class="cr" id="oe_bsm"><img width="98" height="92" alt="[MirBSD logo]"
 class="fr" src="@@RELPATH@@pics/logosmw.png" />OS: MirBSD</h5>
<p>Perfect choice. This is where mksh comes from.</p>

<h5 class="cr" id="oe_msys">OS: MSYS</h5>
<p>mksh compiles on MSYS (that is something different from using MinGW for
 the nascent <a href="#oe_winapi">native WinAPI port</a>; it’s basically
 an old version of Cygwin wrapped) with few issues.</p>

<h5 class="cr" id="oe_bsn"><img width="80" height="60" alt="[NetBSD logo]"
 class="fr" src="@@RELPATH@@pics/logos/netbsd.png" />OS: NetBSD</h5>
<p>Perfect choice.</p>
<p>Starting with NetBSD 1.6, mksh can replace /bin/ksh and /bin/sh without
 any problems. On NetBSD 1.5, mksh can only replace /bin/ksh safely.</p>

<h5 class="cr" id="oe_nxs">OS: NeXTstep</h5>
<p>Except for OpenStep 4.2 which has a completely botched POSIX library
 (although rumours are there is a libposix.a in existence that can be
 copied onto it), it works with R40f onwards. (Binaries of NeXTstep 3.3
 can be copied onto OpenStep 4.2 and used there.) You need gawk.</p>

<h5 class="cr" id="oe_bso"><img width="70" height="64" alt="[OpenBSD logo]"
 class="fr" src="@@RELPATH@@pics/logos/openbsd.png" />OS: OpenBSD</h5>
<p>The setlocale(3) call in OpenBSD’s libc will always return the “C”
 locale and therefore has been disabled by default.</p>
<p>mksh can replace /bin/ksh and /bin/sh without any problems. mksh is
 supposed to be a superset of oksh (except GNU bash-style PS1, weird
 POSuX character classes, and an incompatible ulimit builtin change).</p>

<h5 class="cr" id="oe_os2"><img width="79" height="79" alt="[OS/2 logo]"
 class="fr" src="@@RELPATH@@pics/logos/os2.png" />OS: OS/2</h5>
<p>Porting mksh proper to OS/2 is currently ongoing. There is a <a
 href="https://github.com/komh/mksh-os2">derivate called mksh-os2</a>
 which is already usable but deliberately breaks consistence and
 compatibility with all other platforms for better integration with
 native OS/2, EMX and kLIBC behaviour. The port code is shared, but
 even basic job control is still missing similar to Syllable.</p>

<h5 class="cr" id="oe_osf1">OS: DEC/Compaq OSF/1, Compaq/HP Tru64</h5>
<p>Digital Unix is somewhat supported using gcc as of mksh R31b.
 With mksh R33b, many more versions and the native compiler work.
 In fact, gcc sometimes segfaults, so use the vendor compiler.</p>

<h5 class="cr" id="oe_plan9"><img width="50" height="64" alt="[Plan 9 mascot]"
 class="fr" src="@@RELPATH@@pics/logos/glenda.png" />OS: Plan 9</h5>
<p><a href="http://9fans.net/">Plan 9</a> is not supported yet. Due to the
 unavailability of ttys, full job control will never be supported. Input
 line editing likewise cannot work in drawterm. Currently, a kernel or APE
 bug requires the use of <tt>-DMKSH_NOPROSPECTOFWORK</tt> but this doesn’t
 produce a fully working mksh (some features cause the shell to hang).</p>
<p>The APE (ANSI’n’POSIX Environment) is required to build mksh; I don’t
 remember which compiler I used, but I think it was GCC. Jens Staal reports
 success with kencc though, so I’d suggest using that instead.</p>

<h5 class="cr" id="oe_pw32">OS: PW32 on Win2k</h5>
<p>PW32 is not supported yet — killpg(3) is missing, and it’s possible that
 PW32 needs job control disabled or worked around, since a workable binary
 can be made with <tt>-DMKSH_NOPROSPECTOFWORK</tt> (note that this option
 produces a shell not supporting standard Korn Shell scripts).
 Maybe peek at how ash/bash for PW32 do it. gcc works.</p>

<h5 class="cr" id="oe_qnx">OS: QNX/Neutrino</h5>
<p>QNX/Neutrino (Perl: “nto”) support appeared in mksh R36b.</p>
<p>The QNX ed(1) used to fail the regression tests due to being broken;
 compile the MirBSD ed and place it in <tt>/bin/</tt> to fix this, or
 get an updated ed from vendor.</p>

<h5 class="cr" id="oe_rtems">OS: RTEMS</h5>
<pre>04:02 &lt; kiwichris&gt; Just dropped by to say I built mksh for RTEMS
                   (http://www.rtems.org/) and can run it on a
                   sparc simulator.
04:02 &lt; xiaomiao&gt; nice!
04:03 &lt; kiwichris&gt; yeah it is; cannot do to much at the moment because
                   rtems is a statically linked binary and
                   commands are 'functions'</pre>

<h5 class="cr" id="oe_sco">OS: SCO OpenServer, SCO UnixWare</h5>
<p>SCO OpenServer 5 lacks job support, which SCO OpenServer 6 and SCO
 UnixWare 7.1.1 appear to have working.</p>

<h5 class="cr" id="oe_skyos">OS: SkyOS</h5>
<p>RT managed to build mksh on SkyOS. It somewhat works, and the testsuite
 failures are probably all bugs in their POSIX layer.</p>

<h5 class="cr" id="oe_solaris"><img width="68" height="64" alt="[OpenSolaris logo]"
 class="fr" src="@@RELPATH@@pics/logos/sunos.png" />OS: Solaris</h5>
<p>Solaris is full supported since “forever” with gcc, and since mksh R30
 with Sun’s C compiler. Both 32-bit and 64-bit modes work; 64-bit mode is
 not enabled by default by <tt>Build.sh</tt>, you must do that manually by
 passing CFLAGS of <tt>-O2 -m64</tt> or <tt>-xO2 -xarch=generic64</tt>.</p>
<p>Solaris does not come with Berkeley mdoc macros for nroff, so using
 the HTML or PDF versions of the manual pages or pregenerating a catman
 page on another OS is required.</p>

<h5 class="cr" id="oe_sunos">OS: SunOS</h5>
<p>On mksh R42, add <tt>-DMKSH_TYPEDEF_SIG_ATOMIC_T=int</tt> and
 <tt>-DMKSH_TYPEDEF_SSIZE_T=int</tt> in addition to <tt>-DMKSH_UNEMPLOYED</tt>
 <tt>-DUSE_REALLOC_MALLOC=0</tt> and SunOS 4.1.1 with GCC 2.7.2.3 will work.</p>

<h5 class="cr" id="oe_syll"><img width="186" height="64" alt="[Syllable logo]"
 class="fr" src="@@RELPATH@@pics/logos/syllable.png" />OS: Syllable Desktop</h5>
<p><strong>Needs retesting with mksh R40+</strong> (port unfinished)</p>
<p>This OE is <a href="http://forum.syllable.org/viewtopic.php?p=8171">suffering
 from bugs</a>, although R41 works better than ever before. When deactivating
 any and all job handling with <tt>-DMKSH_NOPROSPECTOFWORK</tt> it works a bit
 better. (Note that this option produces a shell not supporting standard Korn
 Shell scripts.)</p>
<p>Syllable Server will work, as it is, <em>at the moment</em>, “just” a
 GNU/Linux distribution with a different GUI. This may change though.</p>

<h5 class="cr" id="oe_bsu">OS: ULTRIX</h5>
<p>Even on ULTRIX 4.5, mksh R33c works fine. The system ksh must be used
 for running the <tt>Build.sh</tt> script, though.</p>
<p>I could not get networking on ULTRIX 4.0 (SIMH) to work, so I could
 not test it there.</p>
<p>You however must pass the <tt>-YPOSIX</tt> option to the ucode compiler,
 as the default <tt>-YBSD</tt> profile produces a broken executable (spins
 instead of starting up), and the <tt>-YSYSTEM_FIVE</tt> profile does not
 even compile. See <a href="#oe_t15">TenDRA</a> for another OE which has
 issues with different OE profiles. (<tt>Build.sh</tt> takes care of this
 automatically.)</p>

<h5 class="cr" id="oe_uwin">OS: UWIN-NT</h5>
<p>Compilation of mksh R30 on UWIN works with several compilers (bcc, dmc,
 msc — I could not get gcc-egcs, gcc-2.95, gcc-mingw, icc to work) but the
 platform itself is very flakey, and even some regression tests crash, due
 to target limitations apparently. Within these limits, mksh is usable.</p>

<h5 class="cr" id="oe_winapi">OS: Windows</h5>
<p>Michael Langguth, partially under work sponsored by his employer <a
 href="http://www.scalaris.com/">Scalaris AG</a>, is currently working
 on porting mksh to native Win32 (WinAPI) to complete the GNU utilities
 for Win32 with a native shell to have a free interoperability solution
 for scripting. Progress is promising, but still a long way to go. The
 result will probably not be part of mksh itself, but a separate product;
 some core patches will however end up in core mksh.</p>
<p>A beta version of this is available as announced in <a
 href="@@RELPATH@@permalinks/wlog-10_e20130718-tg.htm">this wlog entry</a>.</p>

<h5 class="cr" id="oe_xenix">OS: Xenix</h5>
<p>SCO Xenix 386 2.3.4a lacks too much functionality to be an mksh target.
 (RT tried!)</p>


<h3 id="postbuild">After compiling</h3>
<p>The <tt>Build.sh</tt> script generates an executable (“mksh”, except on
 GNU/Cygwin, where it is called “mksh.exe”), a shell script to use the newly
 built mksh to run the regression test suite (“test.sh”), and (unless the
 <tt>-r</tt> option was given) a pre-formatted manual page (“mksh.cat1”).
 It also lists installation instructions unless <tt>-Q</tt> was provided.
 Now it’s the time to run<br /><tt>% ./test.sh -v -f</tt><br />
 in order to see if the shell works. The regression testsuite will exit
 with errorlevel 1 if any tests failed that are not marked as allowed to
 fail (e.g. OS dependent) or expected to fail, 0 otherwise. Omit the ‘-f’
 option if you do not have a fast (say 1½ GHz Pentium-M) machine.</p>
<p>The regression tests need a controlling tty. Please ensure you have one,
 even for bulk/dæmonised builds; you can use GNU screen or script(1) to
 provide one by running the testsuite inside it (see the Debian and OpenSuSE
 Buildservive packaging for examples of how to do it). If, however, you
 absolutely cannot get the necessary utilities and devices installed in
 the build chroot, run: <tt>./test.sh -v -C regress:no-ctty</tt></p>
<p>To actually install mksh, copy the binary to some place in $PATH, i.e.
 /bin/mksh, $HOME/.bin/mksh, /usr/local/bin/mksh, or whatever your packaging
 system wants; strip it and run chmod 555 on it. (This can easily be achieved
 with install(1) — on Solaris, this is /usr/ucb/install not /usr/bin/install –
 with the arguments -c, -s, -m 755¹, and -o/-g. ① with 555, strip(1) cannot
 write the file any more, chmod 555 afterwards.) Also append its installation
 path to <tt>/etc/shells</tt>, install the <tt>dot.mkshrc</tt> file (usually
 alongside with the copyright file and other documentation), copy it to
 <tt>/etc/skel/.mkshrc</tt> if your operating environment has this means to
 include default dotfiles; install either the catman page (mksh.cat1) to,
 for example, /usr/share/man/cat1/mksh.0, or the mdoc page (mksh.1) to the
 standard location (/usr/share/man/man1/ or /usr/man/man1/ or whatever your
 operating environment requires). The manual page requires the Berkeley mdoc
 macros (either the BSD or the GNU groff version) to be installed during
 formatting time.</p>
<p>Note that a <tt>~/.mkshrc</tt> file will <em>not</em> be executed if
 <tt>$ENV</tt> is set and not empty, nor is there an <tt>/etc/mkshrc</tt>.</p>

<h2 id="upgrade">For packagers: Upgrades</h2>
<p><strong>Note:</strong> This is <em>not</em> <a href="#clog">the
 ChangeLog</a>, these are the packager-visible upgrade notes regarding
 changes in the build system (<tt>Build.sh</tt> and friends, compiler
 support, packaging conventions, bad examples, etc). This is also <em>not</em>
 <a href="#caveat">the users' upgrade caveat list</a>.<br />Packagers also
 please note: it’s <tt>mksh</tt> or “The MirBSD Korn Shell” (“MidnightBSD
 Korn Shell” is also appropriate), but <em>never</em> <del>Mksh</del> or
 somesuch!</p>
<p id="pcur"><i>current</i>: Please remember to subscribe to the mksh
 mailing list, either directly or via GMane, if you have an interest
 in mksh, such as packaging it. Thanks! <i>(unfinished…)</i>
 <tt>make repool</tt> needs mksh R55’s bugfix on the host.
</p>
<p id="p54">R54: Build.sh now installs both manpages (lksh.1 and
 mksh.1) independent of how it’s called. Several additional compiler
 flags are attempted. Porters to Harvey-OS and OS/2 should review
 their patches.</p>
<p id="p53a">R53a: this is a botched <span id="p53">R53</span>.</p>
<p id="p52c">R52c: prepare to review use of <tt>set +o</tt>.</p>
<p id="p52b">R52b: nothing of note, but prepare to review all mksh
 scripts to ensure they start with <tt>export LC_ALL=C</tt> soon.</p>
<p id="p52">R52:
 Android can define MKSH_DEFAULT_PROFILEDIR itself but we don’t.
 We no longer ship the <tt>stop</tt> alias.
</p>
<p id="p51">R51: Please review all mksh scripts, such as a skeleton
 <tt>~/.mkshrc</tt> file, for alias safety and security — in case of
 doubt, contact us. The EBCDIC and OS/2 ports are not finished, but
 some improvements are already included. CVS snapshots now use ‘j’ ipv
 ‘i’ making room for one more stable version; after R51, we will release
 R53, mostly bugfixes, and roll them all up in R50g.</p>
<p id="p50f">R50f: If you patch mksh, please do not only update the
 version in <tt>check.t</tt> (twice) and <tt>sh.h</tt> but now in
 <tt>mksh.1</tt> as well; thanks!<br />Please let the mksh developer
 team review your <tt>.mkshrc</tt> files for robustness!</p>
<p id="p50e">R50e: Better portability; no conflict with system headers
 defining a “tilde” function; no use of <tt>ptrdiff_t</tt> any more.
 The old workarounds for static code checkers are gone. <tt>NSIG</tt>
 generation works with GCC 5.</p>
<p id="p50d">R50d: Nothing to note.</p>
<p id="p50c">R50c: New <tt>HAVE_ISSETUGID</tt> define. The example Debian
 <tt>/etc/skel/.mkshrc</tt> moved. <strong>Security release.</strong> <a
 href="@@RELPATH@@permalinks/wlog-10_e20141003-tg.htm">Details.</a></p>
<p id="p50b">R50b: <tt>test.sh</tt> output is now clearer.</p>
<p id="p50">R50: <tt>test.sh</tt> now uses <tt>$TMPDIR</tt>. If you want
 to build without SSP, define <tt>HAVE_CAN_FSTACKPROTECTORSTRONG</tt> in
 addition to <tt>HAVE_CAN_FSTACKPROTECTORALL</tt> if you have GCC 4.9+.</p>
<p id="p49">R49: There is now generated content at build time; it is known
 that this is beyond the capabilities of some shells such as Coherent
 <tt>/bin/sh</tt>. We plan to address this in a later release by rewriting
 the relevant parts in C, so that a <em>host</em> C compiler will, in
 addition to a <em>target</em> C compiler, also be required to build mksh.</p>
<p id="p48b">R48b: Nothing of notewortiness.</p>
<p id="p48">R48: We now ship a Windows® icon; just ignore it if you don’t
 want it. We regularily update <tt>dot.mkshrc</tt> so you’d better think
 of a way for your users to get those updates.</p>
<p><a href="mksh_old.htm#upgrade">older entries</a></p>

<h2 id="getcvs">Download the development version via CVS</h2>
<p>You can use cvs(GNU) to download the development version of mksh(1),
 commonly called HEAD (or “trunk” to some). Beware of bugs though we
 strive to make it installable (at least on MirBSD ☺) at all times.</p>
<pre>% env CVS_RSH=ssh cvs -qd _anoncvs@anoncvs.mirbsd.org:/cvs co -PA mksh</pre>
<p>You might also want to get the <tt>printf.c</tt> builtin, but this is
 optional, strongly discouraged and use it only if you really must:</p>
<pre>% env CVS_RSH=ssh cvs -qd _anoncvs@anoncvs.mirbsd.org:/cvs co src/usr.bin/printf</pre>
<p>Installation instructions as <a href="#compile">above</a>, although
 the <tt>Build.sh</tt> options, CPPFLAGS, etc. might have changed a
 little in the meantime. In general, you want the following:</p>
<pre>% cd mksh
% sh Build.sh -r -c lto</pre>
<p>Optionally set CC and other variables, as usual.</p>
<h3 id="github">Unofficial git mirror</h3>
<p><a href="https://github.com/MirBSD/mksh">github</a> (chosen only for
 popularity) hosts a read-only, push-only, possibly nōn-fastforward,
 unofficial git mirror of the mksh source tree. Use at your own risk.</p>

<h2 id="otheros">Inclusion in other operating systems</h2><ul>
<li class="cr"><img class="fr" width="52" height="64" alt="[Debian logo]"
 src="@@RELPATH@@pics/logos/debian.png" /><a
 href="http://www.debian.org/">Debian</a> GNU/Linux, GNU/Hurd and
 GNU/kFreeBSD have an <a href="http://packages.debian.org/mksh">mksh package</a>
 maintained us (Thorsten “mirabilos” Glaser).</li>
<li class="cr"><img class="fr" width="61" height="64" alt="[Gentoo logo]"
 src="@@RELPATH@@pics/logos/gentoo.png" /><a
 href="http://www.gentoo.org/">Gentoo GNU/Linux</a> has an mksh <a
 href="https://gitweb.gentoo.org/repo/gentoo.git/tree/app-shells/mksh">ebuild</a>
 created by <a href="http://www.hboeck.de/">Hanno Böck</a> and kept up
 to date by bonsaikitten.</li>
<li class="cr"><img class="fr" width="64" height="64" alt="[Fedora logo]"
 src="@@RELPATH@@pics/logos/fedora.png" /><a
 href="http://fedoraproject.org/">Fedora</a> GNU/Linux 14, 15 and 16,
 and <a href="http://www.redhat.com/rhel/">RHEL</a> 4 and 5 (via EPEL),
 6 and 7 (shipping with it, for their customers to use with their ksh88 and
 pdksh scripts, as well as an optional shell) now officially contain <a
 href="http://fedoraproject.org/wiki/Packages/mksh">an mksh package</a> (<a
 href="http://pkgs.fedoraproject.org/cgit/mksh.git/"><!-- I hate cgit, can't
 you just use gitweb? -->git pkg repo</a>). There are some <a
 href="http://fedoraproject.org/wiki/EPEL/FAQ#How_can_I_install_the_packages_from_the_EPEL_software_repository.3F">Instructions</a>
 for activating EPEL (RHEL only), then just type <tt>yum install mksh</tt>.</li>
<li class="cr"><img class="fr" width="105" height="64" alt="[SuSE logo]"
 src="@@RELPATH@@pics/logos/suse.png" />The <a
 href="http://en.opensuse.org/Build_Service">OpenSuSE Build
 Service</a> provides an official openSUSE_Factory mksh package inside the <a
 href="http://download.opensuse.org/repositories/shells/openSUSE_Factory/src/">shells
 repo</a>, provided by Dr. Werner Fink. A <em>portable</em> set of RPMs and SRPM
 made by Pascal “loki” Bleser, Marcus “darix” Rückert, and me, is part of the <a
 href="http://download.opensuse.org/repositories/home:/mirabile/CentOS_5/src/">home
 project of mirabilos</a>; it’s buildable on Debian and MirBSD as well, and can be
 used for Mandrake/Mandriva/Mageia and, thanks to ragnar76, Atari SpareMiNT.</li>
<li class="cr"><img class="fr" width="64" height="64" alt="[Void logo]"
 src="@@RELPATH@@pics/logos/void.png" /><a
 href="http://www.voidlinux.eu/">Void Linux</a> includes an mksh <a
 href="https://github.com/voidlinux/void-packages/blob/master/srcpkgs/mksh/template">template</a>
 originally created by Ypnose.</li>
<li class="cr"><img class="fr" width="129" height="64" alt="[Fink logo]"
 src="@@RELPATH@@pics/logos/fink.png" /><a
 href="http://fink.sf.net/">Fink</a> delivers an <a
 href="http://pdb.finkproject.org/pdb/package.php/mksh">mksh package</a>
 from our own Andreas “gecko2” Gockel.</li>
<li class="cr"><img class="fr" width="183" height="70" alt="[MacPorts logo]"
 src="@@RELPATH@@pics/logos/macports.png" />MacPorts (used to be called
 DarwinPorts), thanks to Ryan Schmidt, now also have an mksh <a
 href="https://trac.macports.org/browser/trunk/dports/shells/mksh">port</a>.</li>
<li class="cr"><img class="fr" width="122" height="64" alt="[SourceMage logo]"
 src="@@RELPATH@@pics/logos/smgl.png" /><a
 href="http://www.sourcemage.org/">SMGL</a> (Sourcemage GNU/Linux) has an
 <a href="http://www.sourcemage.org/projects/grimoire/repository/show/shell-term-fm/mksh/">mksh
 spell</a> in their grimoire, developed by the MirOS Project together with
 Daniel “morfic” Goller, updated by Thomas “sobukus” Orgis and Vlad
 “Stealth” Glagolev.</li>
<li class="cr"><img class="fr" width="112" height="64" alt="[FreeWRT logo]"
 src="@@RELPATH@@pics/logos/freewrt.png" />In the FreeWRT Embedded GNU/Linux
 Appliance Development Kit (meta distribution), now defunct, mksh was the
 default shell.</li>
<li><a href="http://openadk.org/">OpenADK — Open Source Appliance Development Kit</a>
 (a FreeWRT 1.0 fork) contains <a
 href="http://cgit.openadk.org/cgi/cgit/openadk.git/tree/package/mksh">mksh</a>
 as default shell.</li>
<li><a href="http://openwrt.org/">OpenWrt Embedded GNU/Linux Distribution</a>
 also <a href="https://github.com/openwrt/packages/tree/master/utils/mksh">provides
 mksh</a> (rarely updated) on ADSL/WLAN routers thanks to Felix “nbd” Fietkau.</li>
<li class="cr"><img class="fr" width="60" height="60" alt="[Android-x86 logo]"
 src="@@RELPATH@@pics/logos/andr_x86.png" />The <a
 href="http://www.android-x86.org/">Android-x86 Project</a> has
 mksh as <tt>/bin/sh</tt> since 2010-02-25. <a
 href="https://android.googlesource.com/">AOSP</a> and the Google
 master build mksh and ash since 2010-08-24/25, and it can be
 enabled as <tt>/system/bin/sh</tt> on a per-target basis or the
 default can be switched from ash, which is done for 3.0 and up.
 It’s hard to get updates in there, though.</li>
<li class="cr"><img class="fr" width="66" height="62" alt="[Grml logo]"
 src="@@RELPATH@@pics/logos/grml.png" /><a
 href="news://news.gmane.org/21117.8424.809871.376141@chiark.greenend.org.uk">Debian derivate from Canonical that cannot be named</a>, the <a
 href="http://grml.org/">grml</a> (and grml64) Live-CD, and other Debian
 derivates also have an mksh package; Knoppix, SIDUX and <a
 href="http://www.nexenta.org/os">Nexenta OS</a> (GNU/Solaris)
 do <em>not</em> contain or offer mksh. <em>Note</em>: We need
 URLs to the packages for these, can anyone provide any?</li>
<li class="cr"><img class="fr" width="68" height="64" alt="[Arch logo]"
 src="@@RELPATH@@pics/logos/arch.png" /><a
 href="http://www.archlinux.org/">Arch GNU/Linux</a> users can install
 an <a href="https://www.archlinux.org/packages/?q=mksh">mksh
 package</a> by Daniel “homsn” Hommel, promoted by Thorsten “Atsutane”
 Töpper, since the Arch Hurd guys were faster.</li>
<li class="cr"><img class="fr" width="58" height="48" alt="[T2 logo]"
 src="@@RELPATH@@pics/logos/t2.png" /><a
 href="http://t2-project.org/">T2 SDE</a> (ROCK Linux) contains an outdated <a
 href="http://t2-project.org/packages/mksh.html">package</a> as well.</li>
<li class="cr"><img class="fr" width="64" height="64" alt="[FreeBSD logo]"
 src="@@RELPATH@@pics/logos/freebsd.png" /><a
 href="http://www.freebsd.org/">FreeBSD®</a> Ports (for FreeBSD, very old
 <a href="http://www.dragonflybsd.org/">DragonFly BSD</a> versions and <a
 href="http://www.desktopbsd.net/">DesktopBSD</a>) also have a <a
 href="http://svnweb.freebsd.org/ports/head/shells/mksh/">port</a> created by
 Andreas “ankon” Kohn and (sometimes…) kept up to date by Martin “miwi” Wilke
 and Olivier Duchateau. It is
 unknown if this applies to <a href="http://www.pcbsd.org/">PC-BSD</a> too,
 but there’s no mksh PBI (yet?).</li>
<li class="cr"><img class="fr" width="64" height="64" alt="[MidnightBSD logo]"
 src="@@RELPATH@@pics/logos/mnbsd.png" /><a
 href="http://www.midnightbsd.org/">MidnightBSD</a> uses <a
 href="http://www.midnightbsd.org/cgi-bin/viewvc.cgi/mports/trunk/shells/mksh/">mports</a>, a
 derivate of FreeBSD® ports. Naturally, they deliver mksh as well.
 MidnightBSD 0.2-CURRENT from 18th August 2007 onwards has mksh as both <a
 href="http://www.midnightbsd.org/cgi-bin/viewvc.cgi/src/trunk/contrib/mksh/"><tt>/bin/mksh</tt></a>
 and <a href="http://www.midnightbsd.org/cgi-bin/viewvc.cgi/src/trunk/bin/mksh/"><tt>/bin/ksh</tt></a>,
 i.e. it is the default MidnightBSD Korn shell. From 29 March 2009 onwards, <a
 href="http://www.midnightbsd.org/pipermail/midnightbsd-cvs/2009-March/008099.html">it
 is also the default</a> <tt>/bin/sh</tt> (since MidnightBSD 0.3).</li>
<li class="cr"><img class="fr" width="211" height="64" alt="[pkgsrc logo]"
 src="@@RELPATH@@pics/logos/pkgsrc.png" /><a
 href="http://www.pkgsrc.org/">NetBSD® pkgsrc®</a> (native also on recent
 DragonFly BSD; available for many other operating systems as well) has a <a
 href="http://cvsweb.netbsd.org/bsdweb.cgi/pkgsrc/shells/mksh/">package</a>
 kept up to date by Blair Sadewitz and our very own Ádám “replaced” Hóka
 and Dr. Benny “benz” Siegert, created by our Thorsten “mirabilos” Glaser.</li>
<li class="cr"><img class="fr" width="80" height="60" alt="[NetBSD logo]"
 src="@@RELPATH@@pics/logos/netbsd.png" />The <a
 href="http://wiki.netbsd.se/Desktop_Project">Desktop NetBSD
 project</a> also contains mksh; see the source of their <a
 href="http://cvsweb.netbsd.org/bsdweb.cgi/pkgsrc/meta-pkgs/desktop-gnome/Makefile">meta
 package</a>. This will provide their users with a modern, fast, secure,
 featureful shell and enhance the experience.</li>
<li><a href="http://beastiebox.sourceforge.net/">Beastiebox</a> also comes
 with mksh (sadly, apparently a one-shot import only) as <a
 href="http://beastiebox.cvs.sourceforge.net/viewvc/beastiebox/beastiebox/beastiebin/mksh/">an
 option</a>. It’s NetBSD® based, mostly.</li>
<li class="cr"><img class="fr" width="85" height="92" alt="[MirPorts quilt]"
 src="@@RELPATH@@pics/quilt.png" />The MirPorts Framework brings mksh to
 OpenBSD, Mac OSX and Interix as well as older MirOS BSD versions, which
 have mksh as native Korn Shell.</li>
<li class="cr"><img class="fr" width="70" height="64" alt="[OpenBSD logo]"
 src="@@RELPATH@@pics/logos/openbsd.png" />An <a
 href="http://thread.gmane.org/gmane.os.openbsd.ports/41322">inofficial
 port</a> for <a href="http://www.openbsd.org/">OpenBSD</a> is available.
 Nobody dares commit it though, so it only gets updated on request.</li>
<li class="cr">ChinaLinux mirrors (and apparently packages) mksh.</li>
<li class="cr">Frugalware Linux contains an orphaned and extremely old mksh <a
 href="http://www.frugalware.org/packages/107405">package</a> looking for a new
 maintainer.</li>
<li class="cr">Olivier Duchateau used to provide Slackware/Zenwalk GNU/Linux
 packages, but now updates the FreeBSD packages instead. A <a
 href="http://slackbuilds.org/result/?search=mksh">SlackBuild for mksh</a> is
 now available from Markus Reichelt.</li>
<li class="cr"><img class="fr" width="262" height="60" alt="[GreenViolet logo]"
 src="@@RELPATH@@pics/logos/lewellyn.png" />(Open)Solaris <a
 href="http://www.greenviolet.net/projects/general-open-source/mksh.gv">packages</a>
 exist courtesy of Matt “lewellyn” Lewandowsky but it’s unlikely they
 will get updated again due to Solaris losing all relevance ☹</li>
<li class="cr"><img class="fr" width="96" height="64" alt="[PLD Linux logo]"
 src="@@RELPATH@@pics/logos/pld.png" />The <a
 href="http://git.pld-linux.org/gitweb.cgi/?p=packages/mksh.git">PLD
 Linux Distribution</a> also has a package
 by Kacper “draenog” Kornet and Arkadiusz “arekm” Miśkiewicz</li>
<li class="cr"><a href="http://sisyphus.ru/en/srpm/mksh">Alt Linux Sisyphus</a>
 has an updated package finally</li>
<li class="cr">Sabotage Linux has a <a
 href="https://github.com/sabotage-linux/sabotage/blob/master/pkg/mksh">port</a>
 of mksh, too.</li>
<li class="cr">Homebrew for Mac OSX has a <a
 href="https://github.com/Homebrew/homebrew/blob/master/Library/Formula/mksh.rb">Formula</a>
 for mksh, too.</li>
<li class="cr">Jens Staal maintains a <a
 href="http://plan9.bell-labs.com/sources/contrib/staal1978/pkg/">Plan 9
 package of (modified) mksh</a> source code, thanks! (Still got the kernel/APE
 bug, but this is somewhat usable.)</li>
<li class="cr">There are probably many more, please drop us a note!</li>
<li><a href="http://linux.softpedia.com/get/System/Shells/MirBSD-Korn-Shell-24602.shtml">Softpedia</a>
 lists mksh, just like the <a href="http://directory.fsf.org/mksh.html">FSF/UNESCO
 directory of Free Software</a>.</li>
<li class="cr">Dag Wieërs had an RPMforge package, based on Fedora’s</li>
<li class="cr">The HMUG, some US-American Apple Users’ Group, used to package
 mksh for Darwin, too. They recommend MacPorts, Homebrew or Fink now.</li>
<li class="cr">OpenPKG had one, before it went down the commercial drain.</li>
<li><strong>Missing packaging:</strong> Mandriva/Mageia (use OBS; being
 worked on), OpenEmbedded (being worked on), iPhoneOS (compile yourself),
 Knoppix and SIDUX (just add them), Nexenta (need a contact person), Arch
 native (use Community), PC-BSD (use pkgsrc® or so; need a contact person
 for PBI), OpenSolaris, OpenBSD (use unofficial port), BeOS (maybe broken) /
 Haiku, Slackware native (use SlackBuild), MPE/iX (no response from the
 volunteers ☹), LynxOS (never got the 30-day eval version they promised me ☹),
 Syllable Desktop (broken, kernel issue, may have been fixed in the meantime),
 Pardus, NetBSD base system (under discussion; pkgsrc® has it), Maemo (old one
 in Garage) / MeeGo / Tizen / Mer, Palm WebOS, Cray Unicos, Data General DG/UX,
 DEC Mach, SINIX, Reliant UNIX, SunOS 4.x, …</li>
</ul>
<p>These packages are not official and have not always been tested by mksh
 developers; please keep this in mind.</p>

<h2 id="caveat">Users' Upgrade Caveat</h2>
<p>This does not necessarily list new features, only these which users
 should be aware of for existing scripts.</p>
<p id="ccur"><i>current</i>:
 The POSIX declaration utility concept is introduced, which also applies
 to commands having variable assignments and redirections preceding them.
 <tt>wait</tt> however does not keep assignments any longer. The new
 <tt>\builtin</tt> utility forwards the declaration utility flag exactly
 like <tt>command</tt> does. The new <tt>typeset -g</tt> replaces mksh’s
 previous home-grown <tt>global</tt> builtin, which is now deprecated
 and <em>will</em> be removed from a future version.
 <i>(unfinished…)</i></p>
<p id="c54">R54: Lazy evaluation side effects and <tt>set -e</tt>-related
 error propagation in <tt>||</tt> and <tt>&amp;&amp;</tt> constructs are
 now handled properly.</p>
<p id="c53a"><span id="c53">R53a:</span>
 Tilde expansions of parameters (<tt>~</tt>, <tt>~+</tt>, and <tt>~-</tt>)
 now strip <tt>.</tt> and <tt>..</tt> components from their results. The
 sample <tt>PS1</tt> in <tt>dot.mkshrc</tt> was corrected for users whose
 home directories are præficēs of others’. Rotation operators were renamed
 from <tt>&lt;&lt;&lt;</tt> and <tt>&gt;&gt;&gt;</tt> to <tt>^&lt;</tt> and
 <tt>^&gt;</tt>. <tt>var=&lt;&lt;</tt> may now be used. Many fixes.</p>
<p id="c52c">R52c: Prepare to audit all uses of <tt>set +o</tt>. Handling
 of <tt>"`\"`"</tt> is now considered not a POSIX violation, until this
 issue is officially resolved. Our PDF manpages now use the PA4 paper size
 enabling printing without the need to scale of crop on both DIN ISO A4 and
 USA “letter” paper. The manpages now compile with an older version of the
 mdoc macropackage (in use by e.g. Schillix) installed. <tt>command -pv</tt>
 and <tt>command -pV</tt> now behave POSIX conformant.</p>
<p id="c52b">R52b: Prepare to audit all scripts to ensure they begin with
 <tt>export LC_ALL=C</tt> as we’ll implement locale trackiing some day.
 Handling of <tt>"`\"`"</tt> is now again not POSIX-compliant even in
 <tt>posix</tt> mode to unbreak existing code (Austin#1015, mktexlsr).
 <tt>set -C; :&gt;foo</tt> is now race-free. Some bugfixes.</p>
<p id="c52">R52: <tt>(( … ))</tt> is now a compound command, which changes
 the way I/O redirections work. <tt>${x#~}</tt>, <tt>${x/y/z}</tt>, etc.
 now have tilde expansion enabled. <tt>${x//#y}</tt> no longer works, for
 anchored patterns use only one slash; quotes are now honoured better in
 such expressions, though. <tt>alias stop='\kill -STOP'</tt> is no longer
 defined by default anywhere; <tt>source</tt> is no longer an alias but a
 built-in utility, unbreaking it in some cases; the <tt>lksh</tt> hack to
 remove an alias upon function definition is removed. issetugid(2) is no
 longer used for <tt>set ±p</tt> checks, unbreaking suid in some cases.
 Handling of <tt>"`\"`"</tt> is now POSIX-compliant (this breaks scripts)!
 More bugfixes, although there are (sorry!) still some known bugs ☹</p>
<p id="c51">R51: Integers with bases outside of the permitted
 range are handled as base 10 instead of failing to parse, like ksh93.
 Korn shell style functions (<tt>function foo {</tt>) now have locally
 scoped shell options (e.g. <tt>set -o noglob</tt>) except in lksh. Much
 standard code is now protected from being overridden by aliases; the new
 <tt>enable</tt> function in <tt>dot.mkshrc</tt> can be used to enable or
 disable a built-in utility (such as <tt>rename</tt>) or function (including
 those in <tt>dot.mkshrc</tt>) by means of an alias. The feature to
 <tt>unalias</tt> an identifier when a POSIX-style function with the same
 name is defined only persists in lksh, as it is a legacy feature. cat(1),
 when a flag is given, and printf(1), now prefer an external utility over
 the builtin reliably. Several bugfixes, such as <tt>command -v</tt> now
 handling shell reserved words, impact compatibility.</p>
<p id="c50f">R50f: <tt>unset HISTFILE</tt> actually works. Several more
 bugfixes and robustness improvements. The mksh(1) manpage now documents
 how to enable/disable the UTF-8 mode based on the current POSIX locale
 according to how it’s done at startup on some OSes.</p>
<p id="c50e">R50e: <strong>Warning:</strong> do not use <tt>x=&lt;&lt;</tt>
 inside a function, it has never worked.<br />Lots of POSIX compliance and
 bug fixes. New options for the <tt>exec</tt> builtin.</p>
<p id="c50d">R50d: Fixed a segfault and a regression in field splitting
 breaking update-initramfs. Sorry! Also, added a warning about not using
 unchecked user input in arithmetics — <tt>[[ $x = +([0-9]) ]] || die</tt>
 is a useful check. We’ll link a more detailed writeup about it later.</p>
<p id="c50c">R50c: <tt>$RANDOM</tt> is no longer exported. Field splitting
 has improved. This version fixes one security issue of low importance (<a
 href="@@RELPATH@@permalinks/wlog-10_e20141003-tg.htm">details</a>) which
 is mksh-specific, and mksh is not vulnerable to all those GNU bash bugs,
 some of which affect AT&amp;T ksh93 as well.</p>
<p id="c50b">R50b: <tt>nameref</tt> can alias <tt>$1</tt>, etc. again.</p>
<p id="c50">R50: Arithmetic expressions are now IFS-split, as per POSIX;
 this matches what the manpage always documented. Due to regressions, the
 <tt>arr=([index]=value)</tt> syntax (naming the indicēs during setting an
 array) is gone for now, and will not reappear in “set -A”, only in the
 “=(…)” syntax once we get its parsing fixed. Privileges are now dropped
 upon start unless the shell is started with “-p”.</p>
<p id="c49">R49: The hash algorithm has changed (for, hopefully, the last
 time); the old algorithms are gone from <tt>dot.mkshrc</tt> too, and the
 <tt>${foo@#}</tt> syntax no longer accepts a seed value (for more variety
 use the functions from <tt>dot.mkshrc</tt>; for hash tables, just xor and
 rotate the finished stable hash). Some terminal and other issues have been
 fixed, don’t be surprised.</p>
<p id="c48b">R48b: Bugfix for multi-line prompts.</p>
<p id="c48">R48: The “doch” alias in <tt>dot.mkshrc</tt> now keeps standard
 input usable at the cost of the command to be run being logged by sudo(8).
 If you notice anything unusual (regression) in the interactive display code
 please report it; sections of that code have been refactored and improved.</p>
<p><a href="mksh_old.htm#caveat">older entries</a></p>

<h2 id="clog">Recent Changes</h2>
<p>Changes in the current (unreleased) development version:</p><ul>
 <!-- li>Port to <a href="http://www.syllable.org/">Syllable Desktop</a>
  (not finished, but maybe the rest is a kernel bug?)</li -->
 <!-- li>Import the GNU bash- and zsh-style ability to get and set multiple
  limits in a single invocation from oksh (thanks millert) -->
 <li>[komh] Fix OS/2 search_access() and UNC path logic</li>
 <li>[tg] Undocument printf(1) to avoid user confusion</li>
 <li>[Jean Delvare, tg] Fix printf builtin -R option</li>
 <li>[tg] Make ${var@x}, unknown x, fail (thanks izabera)</li>
 <li>[tg] ${var=x} must evaluate x in scalar context (10x Martijn Dekker)</li>
 <li>[tg] Fixup relation between lksh and mksh, reduce delta</li>
 <li>[tg] Improve manpage display; add OS/2 <tt>$PATH</tt> FAQ</li>
 <li>[Jean Delvare] Fix bugs in manpage</li>
 <li>[tg] Review tilde expansion, removing “odd use of KEEPASN” and
  introduce POSIX “declaration utility” concept; <tt>wait</tt> isn’t one</li>
 <li>[tg] Add <tt>\builtin</tt> utility, declaration utility forwarder</li>
 <li>[tg] Make <tt>$'\xz'</tt> expand to <tt>xz</tt>, not <tt>\0</tt></li>
 <li>[tg] Use fixed string pooling (requires the above change in host mksh)</li>
 <li>[tg] POSIX declaration commands can have varassign and redirections</li>
 <li>[Martijn Dekker] Add <tt>typeset -g</tt>, replacing homegrown “global”</li>
</ul>
<p id="r54">R54 is a bugfix release with moderate new features:</p><ul>
 <li>[tg] Simplify and improve code and manual page</li>
 <li>[tg] Try GCC 5’s new <tt>-malign-data=abi</tt></li>
 <li>[tg] Allow interrupting builtin cat even on fast devices (LP#1616692)</li>
 <li>[tg] Update to Unicode 9.0.0</li>
 <li>[Andreas Buschka] Correct English spelling</li>
 <li>[tg] Handle <tt>set -e</tt>-related error propagation in <tt>||</tt> and
  <tt>&amp;&amp;</tt> constructs correctly</li>
 <li>[tg] Initialise memory for RNG even when not targeting Valgrind</li>
 <li>[tg] Shrink binary size</li>
 <li>[Brian Callahan] Improve support for the contemporary pcc compiler</li>
 <li>[tg] Fix side effects with lazy evaluation; spotted by ormaaj</li>
 <li>[tg] New flags -c (columnise), -l, -N for the print builtin</li>
 <li>[Larry Hynes] Fix English, spelling mistakes, typos in the manpage</li>
 <li>[tg, ormaah] Return 128+SIGALRM if read -t times out, like GNU bash</li>
 <li>[Martijn Dekker] Install both manpages from Build.sh</li>
 <li>[Martijn Dekker] Document case changes are ASCII-only</li>
 <li>[Ronald G. Minnich, Elbing Miss, Álvaro Jurado, tg] Begin porting to
  Harvey-OS and APEX (similar to Plan 9 and APE)</li>
 <li>[KO Myung-Hun] More infrastructure for the OS/2 (EMX, KLIBC) port</li>
</ul>
<p id="r53a"><span id="r53">R53a</span> is a snapshot/feature release:</p><ul>
 <li>[lintian] Fix spelling</li>
 <li>[tg] Unbreak multi-line command history broken by history flush</li>
 <li>[tg] Fix redefining POSIX functions that were Korn functions before</li>
 <li>[tg, TNF] Fix bounds checks in Vi editing mode</li>
 <li>[tg] Handle combining characters at end of string or output correctly</li>
 <li>[tg] Fix <tt>${!#} ${!?} ${!-}</tt> (POSIX, prompted by izabera)</li>
 <li>[tg] Fix shf.c-internal buffer overread on printing digits</li>
 <li>[J�rg] Fix a typo in the testsuite</li>
 <li>[arekm] Increase default edit line size (unless MKSH_SMALL)</li>
 <li>[tg] Improve description of Emacs mode keybindings, especially ^U</li>
 <li>[tg, arekm, jilles] Abort read builtin in case of read(2) errors</li>
 <li>[tg, izabera, carstenh] Fix most of the ambiguous corner cases related
  to <tt>${[pfx]var[op[word]]}</tt> (<tt>${@:-1}</tt> still unsupported)</li>
 <li>[carstenh] Contribute some more testsuite coverage</li>
 <li>[tg] WDS_TPUTS now emits QCHAR newline reentrant-safe</li>
 <li>[tg] Fix <tt>var=&lt;&lt;</tt> implementation (LP#1380389)</li>
 <li>[tg, FreeBSD] Make XSI test(1) extensions behave as if they were POSIX</li>
 <li>[tg, izabera] Add $(&lt;&lt;&lt;x) and $(&lt;&lt;EOF…) implementation</li>
 <li>[tg] Lower minimum screen size accepted as “sane” from the OS to 4×2</li>
 <li>[tg, Torsten Sillke] Simplify tilde-expanded parameters</li>
 <li>[tg, Torsten Sillke] Fix default <tt>PS1</tt> for substring matches</li>
 <li>[tg] Apply defer-builtin-with-arguments logic to realpath builtin</li>
 <li>[tg] Rework string pooling (own vs. compiler’s) (LP#1580348)</li>
 <li>[tg] Feature: <tt>print -A</tt>, prints arguments as characters</li>
 <li>[tg, izabera] Replace <tt>&lt;&lt;&lt;</tt> and <tt>&gt;&gt;&gt;</tt>
  as <a href="@@RELPATH@@wtf.cgi?ROL">ROL</a> and ROR operators with their
  new <tt>^&lt;</tt> and <tt>^&gt;</tt> spelling as per <a
  href="http://david.tribble.com/text/c0xrot.htm">this proposal</a></li>
 <li>[tg, slagtc] Clear-to-EOL under tmux to work around its anti-feature</li>
 <li>[tg, p120ph37] Remove support for using file descriptors with more than
  a single digit, in preparation for named file descriptors</li>
 <li>[tg] Correct, but simplify (at the potential cost of more tty I/O than
  strictly necessary, though never redundant and (probably) not more than
  before when it was miscalculated), line clearing and redrawing</li>
 <li>[slagtc, tg] Implement new evaluate-region editing command Esc+Ctrl-E</li>
 <li>[tg] Prefer external rename utility over the recovery builtin</li>
 <li>[tg] Remove redundant full-line redraws</li>
 <li>[tg, Natureshadow] Fix errorlevel of ‘.’ (“dot” special builtin) when
  the sourced script does not run any commands, for POSIX compliance</li>
 <li>[tg] Refactor op tokens and edchars to shave off some more bytes</li>
 <li>[tg] Fix some bugs in the manpage and some occasional/minor code bugs</li>
 <li>[tg, Brian Callahan] Mark tests requiring new perl as !need-pass</li>
 <li>[tg, slagtc] Add $KSH_MATCH and, to make it usable, ${foo@/bar/baz}</li>
 <li>[tg, Score_Under] Fix bogus patch from OpenBSD: only NULL the global
  source in <tt>unwind</tt> when actually <tt>reclaim</tt>ing its Area</li>
 <li>[izabera] Mention in the manpage that integer bases go up to 36</li>
 <li>[Natureshadow] Fix <tt>/=</tt> operator broken during refactoring</li>
</ul>
<p id="r52c">R52c is a bugfix-only release:</p><ul>
 <li>[tg] Shave 200 bytes off .text by revisiting string pooling</li>
 <li>[tg, J�rg] Fix manpage for ditroff on Schillix</li>
 <li>[tg, wbx] Use <tt>sed 1q</tt> instead of unportable head(1)</li>
 <li>[tg] Implement underrun debugging tool for area-based memory allocator</li>
 <li>[tg] Fix history underrun when first interactive command is entered</li>
 <li>[tg, bef0rd] Do not misinterpret “${0/}” as “${0//”, fixes segfault</li>
 <li>[tg, Stéphane Chazelas] Fix display problems with special parameters</li>
 <li>[tg, Stéphane Chazelas] Catch attempt to trim $* and $@ with ?, fixes
  segfault (Todd Miller did this in 2004 for ${x[*]} already, so just sync)</li>
 <li>[Martijn Dekker] Fix “command -p” with -Vv to behave as POSIX requires</li>
 <li>[tg, jilles, Oleg Bulatov] Fix recusive parser with active heredocs</li>
 <li>[tg] Flush even syntax-failing or interrupted commands to history</li>
 <li>[tg, fmunozs] Fix invalid memory access for “'\0'” in arithmetics</li>
 <li>[tg] Explicitly reserve SIGEXIT and SIGERR for ksh</li>
 <li>[tg, izabera] Catch missing here documents at EOF even under “set -n”</li>
 <li>[kre, tg] Document Austin#1015 handling (not considered a violation)</li>
 <li>[tg, fmunozs] Fix buffer overread for empty nameref targets</li>
 <li>[tg] Fix warnings pointed out by latest Debian gcc-snapshot</li>
 <li>[tg, Martijn Dekker] Document upcoming <tt>set +o</tt> changes</li>
 <li>[Martijn Dekker] Expand testsuite for <tt>command</tt>/<tt>whence</tt></li>
</ul>
<p id="r52b">R52b is a strongly recommended bugfix-only release:</p><ul>
 <li>[tg] Recognise ksh93 compiled scripts and LZIP compressed files
  as binary (i.e. to not run as mksh plaintext script)</li>
 <li>[tg] Document that we will implement locale tracking later</li>
 <li>[tg] Add <tt>EEXIST</tt> to failback strerror(3)</li>
 <li>[jilles] Make <tt>set -C; :&gt;foo</tt> race-free</li>
 <li>[tg] Don’t use <tt>unset</tt> in portable build script</li>
 <li>[tg] Plug warning on GNU/kFreeBSD, GNU/Hurd</li>
 <li>[tg] Document <tt>read -a</tt> resets the integer base</li>
 <li>[J�rg] Fix manpage: <tt>time</tt> is not a builtin but a reserved word</li>
 <li>[J�rg, tg] Make <tt>exit</tt> (and <tt>return</tt>) eat <tt>-1</tt></li>
 <li>[tg] parse “$( (( … ) … ) … )” correctly (LP#1532621), Jan Palus</li>
 <li>[tg] reduce memory footprint by free(3)ing more aggressively</li>
 <li>[tg] fix buffer overrun (LP#1533394), bugreport by izabera</li>
 <li>[tg] correctly handle nested ADELIM parsing (LP#1453827), Teckids</li>
 <li>[tg] permit “read -A/-a arr[idx]” as long as only one element is read;
  fix corruption of array indicēs with this construct (LP#1533396), izabera</li>
 <li>[tg] Sanitise OS-provided signal number in even more places</li>
 <li>[tg] As requested by J�rg, be clear manpage advice is for mksh</li>
 <li>[tg] Revert (as it was a regression) POSIX bugfix from R52/2005 related to
  accent gravis-style command substitution until POSIX decides either way</li>
 <li>[tg] Handle <tt>export</tt> et al. after <tt>command</tt> (Austin#351)</li>
 <li>[tg] Catch EPIPE in built-in cat and return as SIGPIPE (LP#1532621)</li>
 <li>[tg] Fix errno in print/echo builtin; optimise that and unbksl</li>
 <li>[tg] Update documentation, point out POSIX violation (Austin#1015)</li>
</ul>
<p id="r52">R52 is a strongly recommended bugfix release:</p><ul>
 <li>[_0bitcount] Move moving external link from mksh(1) to the <a
  href="@@RELPATH@@ksh-chan.htm">#ksh channel homepage</a> linked therein</li>
 <li>[tg] Make setenv “set -u”-safe and fix when invoked with no args</li>
 <li>[tg] Make “typeset -f” output reentrant if name is a reserved word</li>
 <li>[oksh] Zero-pad seconds in “time” output to align columns</li>
 <li>[tg] Check signals and errorlevels from OS to be within bounds</li>
 <li>[komh, tg] Quote and document ‘;’ as PATH separator in some places</li>
 <li>[oksh, tg] Simplify code to call afree() even if arg is NULL</li>
 <li>[tg] Fix tree-printing and reentrancy of multiple here documents</li>
 <li>[tg] Work around LP#1030581 by permitting exactly one space after</li>
 <li>[tg, oksh] Code quality work, cleanups</li>
 <li>[tg] New code for here documents/strings with several bugfixes</li>
 <li>[tg] Stop using issetugid(2) for ±p checks, wrong tool for the job</li>
 <li>[tg] Reintroduce some -o posix changes lost in 2005, plus fixes</li>
 <li>[tg] Make “source” into a built-in command</li>
 <li>[tg] Drop “stop” alias, lksh(1) functionality to auto-unalias</li>
 <li>[tg] Fix <tt>\u0000</tt> ignored in <tt>$'…'</tt> and <tt>print</tt></li>
 <li>[tg] Improve portability of <tt>Build.sh</tt></li>
 <li>[Jilles Tjoelker] Improve portability of testsuite</li>
 <li>[tg] Fix tilde expansion for some substitutions (izabera, Chet, Geoff)</li>
 <li>[tg] Improve reparsing of <tt>((…) |…)</tt> as <tt>( (…) |…)</tt></li>
 <li>[Martijn Dekker] Fix test(1) not returning evaluation errors</li>
 <li>[tg] Fix <tt>${*:+x}</tt> constructs (carstenh)</li>
 <li>[tg] Make <tt>(( … ))</tt> into a compound command (ormaaj)</li>
 <li>[tg] Repair a few parameter substitution expansion mistakes</li>
</ul>
<p id="r51">R51 is a strongly recommended feature release:</p><ul>
 <li>[tg] OpenBSD sync: handle integer base out of band like ksh93 does</li>
 <li>[tg] Protect standard code (predefined aliases, internal code, aliases
  and functions in <tt>dot.mkshrc</tt>) from being overridden by aliases and,
  in some cases, shell functions (i.e. permit overriding but ignore it)</li>
 <li>[tg] Implement GNU bash’s <tt>enable</tt> for <tt>dot.mkshrc</tt> using
  magic aliases to redirect the builtins to external utilities; this differs
  from GNU bash in that <tt>enable</tt> takes precedence over functions</li>
 <li>[tg] Move <tt>unalias</tt>ing an identifier when defining a POSIX-style
  function with the same name into lksh, as compatibility kludge</li>
 <li>[tg] Korn shell style functions now have locally scoped shell options</li>
 <li>[tg, iSKUNK] Change some ASCII-isms to be EBCDIC-aware or pluggable</li>
 <li>[tg, Ypnose] Mention lksh build instructions on manpage and website</li>
 <li>[tg] Overhaul signal handling; support new POSIX <tt>NSIG_MAX</tt>, add <a
  href="http://austingroupbugs.net/view.php?id=741"><tt>sysconf(_SC_NSIG)</tt></a>
  as a later TODO item</li>
 <li>[tg] Fix signal bounds (1 ≤ <i>signum</i> &lt; <tt>NSIG</tt>)</li>
 <li>[tg] Improve manual pages, especially wrt. standards compliance</li>
 <li>[tg, iSKUNK] Initial EBCDIC work for <tt>dot.mkshrc</tt></li>
 <li>[tg, iSKUNK] Add list of z/OS signals to <tt>Build.sh</tt></li>
 <li>[tg] Work around the sh(1) backslash-newline problem by moving the
  code triggering it out of <tt>*.opt</tt> and into the consumers</li>
 <li>[colona] Bind another well-known ANSI Del key in the Emacs mode</li>
 <li>[tg] Fix <tt>${foo/*/x}</tt> pattern checks, spotted by izabera</li>
 <li>[carstenh] Fix error output of <tt>cd</tt> function in dot.mkshrc</li>
 <li>[tg] <tt>read</tt> partial returns in <tt>-N</tt> and timeout cases</li>
 <li>[tg] Fix <tt>$LINENO</tt> inside <tt>PS1</tt>; spotted by carstenh</li>
 <li>[tg] Ensure correct padding of at least 2 spaces in print_columns</li>
 <li>[tg] Note <a href="https://bugs.launchpad.net/bugs/1453827">issues with
  nested complex parameter expansions</a> and follow-up bugfixes to expect</li>
 <li>[OpenBSD] Some language fixes in documentation; comments</li>
 <li>[tg] Reimplement multi-line command history (Debian #783978) + fixes</li>
 <li>[Martijn Dekker] Fix <tt>command -v</tt> for “shell reserved words”</li>
 <li>[tg] In <tt>dot.mkshrc</tt> make use of latest feature: local options</li>
 <li>[tg] Fix <tt>""$@</tt> to emit a word</li>
 <li>[tg] Change cat(1) hack to look first and not ignore <tt>builtin</tt></li>
 <li>[KO Myung-Hun] Begin porting mksh to OS/2</li>
 <li>[komh, tg] Some generic minor bugfixes from OS/2 porting</li>
 <li>[tg] Document mknod(8) isn’t normally part of mksh(1)</li>
 <li>[tg] Quote arguments to <tt>:</tt> in build/test scripts as well</li>
 <li>[tg] Add cat(1) hack for printf(1)-as-builtin: always prefer external</li>
 <li>[tg] Explicitly use binary mode for any and all file I/O in stock mksh</li>
 <li>[Ilya Zakharevich] Use termio, not termios(4), on OS/2</li>
 <li>[tg] Set edchars to sane BSD defaults if any are NUL</li>
 <li>[tg] Implement support for PC scancodes in Vi and Emacs editing mode</li>
 <li>[komh] OS/2 uses ‘;’ as PATH separator plus support drive letters</li>
</ul>
<p id="r50stable">Changes in the current (unreleased) R50-stable branch:</p><ul>
 <li>[tg] Correct some mistakes in the manual page</li>
 <li>[tg] Fix a bug in the testsuite driver, spotted on EBCDIC systems</li>
</ul>
<p id="r50f">R50f is a <strong>required</strong> security and bugfix release:</p><ul>
 <li>[tg] Add a patch marker for vendor patch versioning to <tt>mksh.1</tt></li>
 <li>[tg] SECURITY: make <tt>unset HISTFILE</tt> actually work</li>
 <li>[tg] Document some more issues with the current history code</li>
 <li>[tg] Remove some unused code</li>
 <li>[tg] RCSID-only sync with OpenBSD, for bogus and irrelevant changes</li>
 <li>[tg] Also disable field splitting for <tt>alias 'local=\typeset'</tt></li>
 <li>[tg] Fix <tt>read -n-1</tt> to not be identical to <tt>read -N-1</tt></li>
 <li>[tg] Several fixes and improvements to lksh(1) and mksh(1) manpages</li>
 <li>[tg] More code (int → size_t), comment and testsuite fixes</li>
 <li>[tg] Make <tt>dot.mkshrc</tt> more robust (LP#1441853)</li>
 <li>[tg] Fix issues with <tt>IFS='\' read</tt>, found by edualbus</li>
 <li>[enh, tg] Fix integer overflows related to file descriptor parsing,
  found by Pawel Wylecial (LP#1440685); reduce memory usage for I/O redirs</li>
 <li>[tg] Document in the manpage how to <tt>set ±U</tt> according to <a
  href="http://article.gmane.org/gmane.os.miros.mksh/606">the current locale
  settings</a> via LANG/LC_* parameters (cf. Debian #782225)</li>
 <li>[igli, tg] Some code cleanup and restructuring</li>
 <li>[tg, oksh] Handle number parsing and storing more carefully</li>
</ul>
<p id="r50e">R50e is a <strong>required</strong> bugfix release:</p><ul>
 <li>[tg] Add more tests detailing behaviour difference from GNU bash</li>
 <li>[tg] Introduce a memory leak for <tt>x=&lt;&lt;</tt> fixing use of
  freed memory instead, bug tracked as LP#1380389 still live</li>
 <li>[tg] Add <tt>x+=&lt;&lt;</tt> parallel to <tt>x=&lt;&lt;</tt></li>
 <li>[tg, ormaaj, jilles] POSIX “command” loses builtin special-ness</li>
 <li>[tg] Fix LP#1381965 and LP#1381993 (more field splitting)</li>
 <li>[jilles] Update location of FreeBSD testsuite for test(1)</li>
 <li>[Martin Natano] Remove dead NULL elements from Emacs keybindings</li>
 <li>[tg, Stéphane Chazelas, Geoff Clare] Change several testcases for $*/$@
  expansion with/without quotes to expected-fail, with even more to come ☹</li>
 <li>[tg] Fix miscalculating required memory for encoding the double-quoted
  parts of a here document or here string delimiter, leading to a buffer
  overflow; discovered by zacts from IRC</li>
 <li>[RT] Rename a function conflicting with a MacRelix system header</li>
 <li>[tg] Use <tt>size_t</tt> (and <tt>ssize_t</tt>) consistently, stop
  using <tt>ptrdiff_t</tt>; fixes some arithmetics and S/390 bugs</li>
 <li>[tg] Remove old workarounds for Clang 3.2 scan-build</li>
 <li>[tg] Remove all Clang/Coverity assertions, making room for new checks</li>
 <li>[tg] Fix <tt>NSIG</tt> generation on Debian sid gcc-snapshot</li>
 <li>[tg] Make a testcase not fail in a corner case</li>
 <li>[tg] Fix issues detected by GCC’s new sanitisers: data type of a
  value to be shifted constantly must be <tt>unsigned</tt> (what not,
  in C…); shebang check array accesses are always <tt>unsigned char</tt></li>
 <li>[tg] Be <em>even</em> more explicit wrt. POSIX in the manpage</li>
 <li>[tg] Fix shebang / file magic decoding</li>
 <li>[tg] More int → bool conversion</li>
 <li>[tg] Let <tt>Build.sh</tt> be run by GNU bash 1.12.1 (Slackware 1.01)</li>
 <li>[Stéphane Chazelas, tg] Fix here string parsing issue</li>
 <li>[tg] Point out more future changes in the manpage</li>
 <li>[tg] Call setgid(2), setegid(2), setuid(2) before seteuid(2)</li>
 <li>[tg] Fix spurious empty line after ENOENT “whence -v”, found by Ypnose</li>
 <li>[tg] Optimise <tt>dot.mkshrc</tt> and modernise it a bit</li>
 <li>[tg] Use MAXPATHLEN from &lt;sys/param.h&gt; for PATH_MAX fallback</li>
 <li>[tg] Some code cleanup and warnings fixes</li>
 <li>[tg] Add options <tt>-a argv0</tt> and <tt>-c</tt> to <tt>exec</tt></li>
 <li>[jsg] Prevent use-after-free when hitting multiple errors unwinding</li>
 <li>[tg] Fix use of <tt>$*</tt> and <tt>$@</tt> in scalar context: within
  <tt>[[ … ]]</tt> and after <tt>case</tt> (spotted by Stéphane Chazelas)
  and in here documents (spotted by tg@); fix here document expansion</li>
 <li>[tg] Unbreak when <tt>$@</tt> shares double quotes with others</li>
 <li>[tg] Fix <tt>set -x</tt> in <tt>PS4</tt> expansion infinite loop</li>
</ul>
<p id="r50d">R50d is a <strong>required</strong> bugfix release:</p><ul>
 <li>[Goodbox] Fix NULL pointer dereference on “unset x; nameref x”</li>
 <li>[tg] Fix severe regression in field splitting (LP#1378208)</li>
 <li>[tg] Add a warning about not using tainted user input (including from
  the environ(7)ment) in arithmetics, until Stéphane writes it up nicely</li>
</ul>
<p id="r50c">R50c is a <strong>security fix</strong> release:</p><ul>
 <li>[tg] Know more rare signals when generating sys_signame[] replacement</li>
 <li>[tg] OpenBSD sync (mostly RCSID only)</li>
 <li>[tg] Document HISTSIZE limit; found by luigi_345 on IRC</li>
 <li>[zacts] Fix link to Debian <tt>.mkshrc</tt></li>
 <li>[tg] Cease exporting $RANDOM (Debian #760857)</li>
 <li>[tg] Fix C99 compatibility</li>
 <li>[tg] Work around klibc bug causing a coredump (Debian #763842)</li>
 <li>[tg] Use issetugid(2) as additional check if we are FPRIVILEGED</li>
 <li>[tg] SECURITY: do not permit += from environment</li>
 <li>[tg] Fix more field splitting bugs reported by Stephane Chazelas and
  mikeserv; document current status wrt. ambiguous ones as testcases too</li>
</ul>
<p id="r50b">R50b is a recommended bugfix release:</p><ul>
 <li>[Ypnose] Fix operator description in the manpage</li>
 <li>[tg] Change all mention of “eglibc” to “glibc”, it is merged back</li>
 <li>[Colona] Fix rare infinite loop with invalid UTF-8 in the edit buffer</li>
 <li>[tg] Make more clear when a shell is interactive in the manpage</li>
 <li>[tg] Document that <tt>%</tt> is a symmetric remainder operation, and
  how to get a mathematical modulus from it, in the manpage</li>
 <li>[tg, Christopher Ferris, Elliott Hughes] Make the cat(1) builtin
  also interruptible in the write loop, not just in the read loop, and
  avoid it getting <tt>SIGPIPE</tt> in the <tt>smores</tt> function
  in <tt>dot.mkshrc</tt> by terminating cat upon user quit</li>
 <li>[tg] Make some comments match the code, after jaredy from obsd changed
  IFS split handling</li>
 <li>[tg] Fix some IFS-related mistakes in the manual page</li>
 <li>[tg] Document another issue as known-to-fail test <tt>IFS-subst-3</tt></li>
 <li>[tg] Improve <tt>check.pl</tt> output in some cases</li>
 <li>[tg, Jb_boin] Relax overzealous <tt>nameref</tt> RHS checks</li>
</ul>
<p id="r50">R50 is a recommended bugfix release:</p><ul>
 <li>[tg] Fix initial IFS whitespace not being ignored when expanding</li>
 <li>[tg] MKSH_BINSHREDUCED no longer mistakenly enables brace expansion</li>
 <li>[tg] Explain more clearly Vi input mode limitations in the manpage</li>
 <li>[tg] Improve error reporting of the <tt>check.pl</tt> script (which needs
  a maintainer since I don’t speak any perl(1), really), for lewellyn</li>
 <li>[tg] Use <tt>$TMPDIR</tt> in <tt>test.sh</tt> for scratch space</li>
 <li>[tg, Polynomial-C] Check that the scratch space is not mounted noexec</li>
 <li>[pekster, jilles, tg] Use termcap(5) names, not terminfo(5) names, in
  tput(1) examples, for improved portability (e.g. to MidnightBSD)</li>
 <li>[tg] Avoid C99 Undefined Behaviour in mirtoconf LFS test (inspired
  by Debian #742780)</li>
 <li>[tg] Fix <tt>${!foo}</tt> for when <tt>foo</tt> is unset</li>
 <li>[tg] Improve <tt>nameref</tt> error checking (LP#1277691)</li>
 <li>[tg] Fix <tt>readonly</tt> bypass found by Bert Münnich</li>
 <li>[Ryan Schmidt] Improved system reporting for Mac OS X</li>
 <li>[nDuff] Explain better [[ extglob handling in the manpage</li>
 <li>[tg] Remove <tt>arr=([index]=value)</tt> syntax due to regressions</li>
 <li>[tg] IFS-split arithmetic expansions as per POSIX 201x</li>
 <li>[OpenBSD] Add more detailed Authors section to manpage</li>
 <li>[tg] Fix <tt>set ±p</tt> issue for good: drop privs unless requested</li>
 <li>[tg] Improve signal handling and use a more canonical probing order</li>
 <li>[tg] Fix return values <tt>$?</tt> and <tt>${PIPESTATUS[*]}</tt>
  interaction with <tt>set -o pipefail</tt> and COMSUBs</li>
 <li>[enh] Detect ENOEXEC ELF files and use a less confusing error message</li>
 <li>[tg] Update to Unicode 7.0.0</li>
 <li>[tg] Shut up valgrind in the <tt>$RANDOM</tt> code</li>
 <li>[tg] Use -fstack-protector-strong in favour of -fstack-protector-all</li>
 <li>[tg] Fix access-after-free crash spotted by Enjolras via IRC</li>
</ul>
<p id="r49">R49 is a recommended bugfix release:</p><ul>
 <li>[tg] <tt>dot.mkshrc</tt>: fix two issues with the <tt>cd</tt> wrapper</li>
 <li>[tg] Unbreak <tt>set +p</tt> (wider issue still to be addressed)</li>
 <li>[Steffen Daode Nurpmeso] Use WCONTINUED with waitpid(2)</li>
 <li>[millert] Add proper suspend builtin handling tty(4) and setpgrp(2)</li>
 <li>[tg] Sanitise and slightly optimise control character handling</li>
 <li>[tg] Add <tt>O_BINARY</tt> to all open(2) calls for OS/2 kLIBC support</li>
 <li>[tg] Generate option strings for shell, set, ulimit at compile time</li>
 <li>[Steffen Daode Nurpmeso] Drop ISTRIP termios(4) mode</li>
 <li>[tg] Mention negative history numbers, octals in the manpage</li>
 <li>[tg] Make <tt>check.pl</tt> work with Perl &lt; 5.6.1 again</li>
 <li>[tg] Detect getsid(2) and skip the oksh suspend builtin otherwise</li>
 <li>[tg] Document that <tt>set -o noclobber</tt> is unsafe for tempfiles</li>
 <li>[tg] Update to Unicode 6.3.0</li>
 <li>[RT] Restore some portability</li>
 <li>[tg] Fix parsing positional argument variable names</li>
 <li>[tg] Sprinkle a few <tt>__attribute__((__pure__))</tt>; fix warnings</li>
 <li>[tg] Fix build on OSX: always use our wcwidth code; only use our
  strlcpy(3) code if the OE doesn’t provide one (prompted by jonthn on IRC)</li>
 <li>[tg] Optimise sh -c to exec even in MKSH_SMALL</li>
 <li>[tg] Use new BAFH for hashing</li>
</ul>
<p id="r48b">R48b is a minor bugfix update:</p><ul>
 <li>[tg] Fix display issue with multi-line prompts and SIGWINCH</li>
</ul>
<p id="r48">R48 is a small but important bugfix update:</p><ul>
 <li>[tg] <tt>dot.mkshrc</tt>: unbreak hd(1) function in UTF-8 mode</li>
 <li>[Jens Staal, tg] Improve buildability on Plan 9 and support kencc</li>
 <li>[tg] Clean up and improve build process and testsuite</li>
 <li>[Michael Langguth] Add multi-layer ICO file from mksh/Win32</li>
 <li>[tg, Steffen Daode Nurpmeso] Fix interactive shell exiting on ^C or
  syntax error when the EXIT pseudo-signal trap was set (to anything)</li>
 <li>[tg, Daode] Display longer command excerpts in job control</li>
 <li>[tg] Rewrite Emacs mode display window sliding calculation code</li>
 <li>[tg] <tt>dot.mkshrc</tt>: “doch” now keeps standard input</li>
 <li>[tg] Reduce memory usage and improve comments and documentation</li>
</ul>
<p><a href="mksh_old.htm#clog">older changes</a></p>

<h2 id="plans">Future Plans</h2><ul>
<li>bind keys of dynamic length ‣ begun in a branch</li>
<li>dynamic input LINE length, instead of a hardcoded value at compile time</li>
<li>cache optimised extglobs (especially for ${foo/bar/baz})</li>
<li>typed variables; using ${var@?} more (JSON!)</li>
<li>make arrays use hashtables internally ipv linear linked lists</li>
<li>associative, multidimensional arrays</li>
<li>Build with more platforms’ native tools or other compilers
 — ACK, kencc, ICC/UWIN, egcs/UWIN</li>
<li>Build and actually work on more platforms — DJGPP, PW32,
 Plan 9, Syllable, NuttX — debug these</li>
<li>Bugfix for suspending <tt>a &amp;&amp; b</tt> chain</li>
<li>“process substitution” echo diff &lt;(echo 1) &lt;(echo 2)</li>
<li>whence -p -a foo</li>
<li>read -e (or something): use the edit.c stuff for inputting</li>
<li>↑ actually make a libmkshedit, see my mirtoconf v2 plans</li>
<li>Allow trimming arrays (e.g. <tt>${foo[*]@Q}</tt>)</li>
<li>Add -DMKSH_BAIKA_NO_JUTSU (trade more size for more speed)</li>
<li>Someone should run mksh through afl and fix everything it finds</li>
<li><tt>print -a "${arr[@]}"</tt> to match <tt>read -raN-1 arr</tt></li>
<li><a href="mksh_old.htm#plans">older/unrealistic plans</a></li>
<li>… such as a better website, more clearly arranged, etc…</li>
<li>Although there is <em>definite</em> need, eventually, to have
 64-bit arithmetics, possibly using a long typeset flag and something
 similar to <tt>$((#x))</tt> for unsigned arithmetics</li>
<li>arbitrary-precision arithmetics?</li>
<li><tt>$&amp;</tt> in/after replacements, possibly as array?
 maybe not with that name, see the <tt>&amp;&gt;</tt> disaster.</li>
<li>something like <tt>${${foo#bar}%baz}</tt> like other shells do?</li>
<li>some sort of mktemp(1) builtin; the functionality is already
 mostly there, but we keep it open already in C and don’t do dirs,
 this must be rethinked wrt. UI (the UI can also be used for some
 file-based locking builtin)</li>
<li><tt>exec</tt> with arg parsing, <tt>-c</tt> like ksh93 (keeping
 <tt>l_assign</tt> stuff exported!), <tt>-a</tt></li>
<li>The <tt>DEBUG</tt> trap (although GNU bash also has a RETURN
 trap, and both bash and ksh93 write <em>lots</em> about this, so
 careful design is required before attempting this) → Ypnose</li>
<li>AT&amp;T ksh93 discipline functions are occasionally mentioned.
 Shell-private variable namespaces have their use. Accessors too.</li>
<li>Possibly <tt>x=&lt;&amp;0</tt> or <tt>$(&lt;&amp;0)</tt></li>
</ul>
EOF
mws_putfooter
exit 0
