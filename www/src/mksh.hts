# This file is part of the website of The MirOS Project, which is
# copyrighted material, please read the LICENCE file for details.

mws_setname subprojects/mksh "mksh – the MirBSD Korn Shell"
mws_setrss "tag_mksh.rss"
mws_setheadline The MirBSD Korn Shell
mws_putheader '$MirOS: www/src/mksh.hts,v 1.345 2010/07/17 22:14:42 tg Exp $'
mws_content <<'EOF'
<h2 id="toc">Table of Contents</h2><ul>
 <li><a href="#prefetch">Introduction</a> and Licence</li>
 <li><a href="#irc">Documentation and Support</a> (IRC, manual page,
  mailing lists, RSS feeds, …)</li>
 <li><a href="#build">Installation</a></li>
 <li><a href="#upgrade">Upgrade</a> your packages from older mksh</li>
 <li>Inclusion in <a href="#otheros">operating systems</a></li>
 <li><a href="mksh_old.htm#contrib">comparision</a> with other shells</li>
 <li><a href="mksh_bld.htm">Testsuite Results</a> (regression tests)</li>
 <li><a href="mksh_old.htm#vsn">on version numbers</a> – for packagers</li>
 <li><a href="mksh_old.htm#plans">future plans</a></li>
 <li><a href="#caveat">Upgrade Caveat</a> – for users</li>
 <li><a href="#clog">ChangeLog</a></li>
 <li>information about <a href="mksh_old.htm">old versions</a></li>
</ul>

<h2>mksh(1) R39c</h2>

<p>This is the website of the MirBSD™ Korn Shell, an actively developed free
 implementation of the Korn Shell programming language and a successor to the
 Public Domain Korn Shell (pdksh).</p>

<p class="cr"><span class="fr" style="width:136px; height:128px;"><object
  type="image/svg+xml" data="@@RELPATH@@pics/mksh.svg"
  width="128" height="100"><img alt="mksh Logo"
  src="@@RELPATH@@pics/mksh128x100.png" /></object>
 </span>This page is always accessible via a redirection at <a
 href="http://mirbsd.de/mksh"><tt>http://mirbsd.de/mksh</tt></a>, which is
 the canonical homepage URI, and in case the webserver is unreachable, <a
 href="http://mirbsd.de/mksh-fornow">the backup page</a> will provide basic
 information. The <a href="http://directory.fsf.org/mksh.html">FSF/UNESCO
 directory of Free Software</a> lists mksh, too. There also is an <a
 href="https://www.ohloh.net/p/mksh">mksh project page on ohlol</a>, a
 statistics site. Get the Logo (<a href="@@RELPATH@@pics/mksh.svg">SVG</a>).</p>

<h2 class="cr" id="prefetch">Introduction</h2>
<p>The current version of mksh is <strong>mksh R39c</strong> from
 <em>25 February 2010</em>.</p>
<p>Thanks to “Der Verein <a href="http://www.trash.net/verein/">trash.net</a>”
 for sponsoring access to a Solaris 8 box. Thanks to HP TestDrive/PvP, which
 helps in keeping mksh portable to several Unixes and compilers, and track down
 some architecture- or glibc-specific bugs. Thanks to Julian “yofuh” Wiesener
 for just another account on a Sun E420 on Solaris 11β. Thanks to someone who
 prefers to stay anonymous due to tons of red tape for providing access to an
 AIX 5.3 system with gcc and xlC installed. Thanks to gnubber’s admin (Barry
 “bddebian” deFreese), as well as Samuel “youpi” Thibault, for providing shell
 access to a Debian GNU/Hurd system. Thanks to Lucas “laffer1” Holt for ssh
 access to the MidnightBSD server. Thanks to Waldemar “wbx” Brodkorb for
 dropping his unused Zaurus SL-C3200 to someone who can actually make use of
 it to test mksh on OpenBSD. Thanks to Andreas “gecko2” Gockel for access to
 a couple of Debian and Macintosh boxen and an iPhone 3G. Thanks to Martin
 Zobel-Helas for an account on an Alpha system. Thanks to Bastian “waldi”
 Blank for access to an S/390 system and uploading mksh packages to Debian
 for quite some time. Also thanks to Otavio Salvador and Patrick “aptituz”
 Schönfeld for uploading a couple of my Debian packages. The Debian GNU/k*BSD
 and Hurd developers were quite helpful in assisting and testing as well.
 Thanks to Thomas E. “TGEN” Spanjaard for access to both a NetBSD and a
 DragonFly system. Thanks to Josef “jupp” / “penpen” Schugt for testing mksh
 on a Digital Unix (OSF/1 V4.0) system from the Uni Bonn Physik CIP Pool.
 Thanks to DEChengst from #UnixNL for providing access to a HP/Compaq Tru64
 (OSF/1 V5.1B) system, an OSF/1 V2.0 system and an Ultrix 4.5 system. Thanks
 to Adam “replaced” Hoka for a BSDi BSD/OS 3.1 ISO9660 image and offering to
 help with HP-sUX testing (now that HP TestDrive went down) and initial
 porting to Haiku, which was continued at CLT 2010 with help from Stephan
 Aßmus. Thanks to André “naaina” Wösten for ssh on a QNX box. Thanks to
 Olivier Duchateau for testing on Slackware and Zenwalk GNU/Linux.
 (Did I miss anyone? Mail me if so. Some of these are past, anyway.)</p>
<p>What is mksh(1)? – Short answer: The MirBSD Korn Shell. Okay, but what
 exactly does it do, or why another shell? These questions will be answered
 <a href="mksh_old.htm#contrib">here</a> for the people interested. Right now, you only
 need to know that mksh is a <a href="http://www.debian.org/social_contract#guidelines">DFSG</a>-free
 and <a href="http://www.opensource.org/docs/osd">OSD</a>-compliant (and OSI
 approved)
 successor to pdksh, developed as part of <a href="http://mirbsd.de/">the
 MirOS Project</a> as native Bourne/POSIX/korn shell for MirOS BSD, but also
 to be readily available under other UNIX®-like operating systems.</p>
<p id="lic">The source code for mksh is available at the MirOS Project mirrors
 as well as these of other operating system projects due to being <a
 href="#otheros">included</a> in these; however, we do not provide binaries.
 Find <a href="#build">instructions to build and install mksh</a> below, or
 ask your operating environment vendor to package and include mksh; we provide
 assistance for this task if asked. <em>Licencing</em> permits this as long
 as due credit is given to the authors and contributors and the copyright
 notices are not removed in their entirety; modifying is allowed (but if
 the result is still called mksh, it’s discouraged; talk with us if you
 feel you have to modify mksh). The individual licences used are the MirOS
 licence, and (for BSD compatibility on other oerating systems) the 3-clause
 UCB licence and the ISC licence; <a href="@@ABSPATH@@/TaC-mksh.txt">full
 terms</a> are available. pdksh originally was public domain, with a few
 exceptions, but these files are not part of mksh R21 or up. The mksh(1) author
 (mirabilos) acknowledges the contributions of these people who dedicated pdksh
 and oksh to the public, and asserts a collective copyright on the code.
 All these licences are DFSG clean and conform to the OSD, and the MirOS
 Licence is listed on the pages of the ifrOSS licence centre as well as
 in the FSF/UNESCO Directory of Free Software. The MirBSD Korn Shell is <a
 href="@@RELPATH@@permalinks/news_e20081114-nn.htm">OSI Certified <img
 src="@@RELPATH@@pics/open_source_button.png" alt="Open Source Software™" />
 </a> and its <a href="@@ABSPATH@@/man/mksh.1">manual</a> Open Knowledge.</p>
<p>To compile mksh, you will need a Bourne or POSIX shell (Solaris
 <tt>/bin/sh</tt> is enough, and the Z shell should work), a C compiler (at
 the moment, only the one from the <a href="http://gcc.gnu.org/">GNU Compiler
 Collection</a> works, but we’re attempting to change this), system and C
 library header files and the standard C runtime. You will also need a set of
 standard UNIX® tools on a supported operating system: any recent BSD; Darwin,
 Apple Mac OSX; Interix (Microsoft® Services for Unix 3.5, maybe Subsystem for
 Unix Applications on Win2003/Vista); GNU/Cygwin; UWIN; GNU/Linux (libc5,
 glibc, dietlibc, µClibc, some klibc systems are tested), Debian GNU/kFreeBSD,
 GNU/Hurd or GNU/Linux; Sun Solaris (8, 9, 10, 11), OpenSolaris; AIX; IRIX;
 HP-UX 11i; OSF/1; ULTRIX; Minix 3<br />To run the
 regression test suite, you will need a not too antiquated Perl with POSIX.pm
 as well as <tt><a href="mksh_old.htm#editor">/bin</a>/ed</tt> (whose installation is
 strongly suggested anyway, because it’s the standard <tt>FCEDIT</tt> history
 editor and standard UNIX® text editor), as well as a controlling terminal,
 usually <tt>/dev/tty</tt> or provided from script(1) or GNU screen.</p>
<p>To use mksh, you only need the C runtime (and any supplemental libraries
 the binary was linked against) and, optionally, <tt>/bin/ed</tt> – for
 interactive use, a controlling terminal is highly recommended because job
 control does not work without one.</p>
<p>To make full use of mksh(1)’s interactive features, it is recommended to
 copy the <tt>dot.mkshrc</tt> file from the source distribution as
 <tt>~/.mkshrc</tt> into the user’s home directory and let the user adjust
 it to suit his needs. The sample file configures a few aliases and shell
 functions as well as a sensible prompt (<tt>$PS1</tt>) and some csh-like
 directory stack functions and zsh-like hooks. Full use of this file requires
 a few special UNIX® tools. Note that <tt>$ENV</tt> must not be set for
 mksh(1) to parse the <tt>~/.mkshrc</tt> file at startup.</p>

<h2 id="irc">Support</h2>
<p>We provide an online manual page in <a
 href="@@ABSPATH@@/man/mksh.1">HTML</a> and <a
 href="@@ABSPATH@@/MirOS/dist/mir/mksh/mksh.pdf">PDF</a> format.
 Reading books about Korn Shells in general is recommended as further help,
 but beware of the <a href="mksh_old.htm#contrib">differences</a> to other shells. Some
 ISBNs are listed at the end of the manual page.</p>
<p>The <a href="@@RELPATH@@tag_mksh.rss">RSS feed</a> collects news and wlog
 entries regarding mksh.</p>
<p>If you require additional assistance or want to discuss bugs, features
 or enhancements, write to the <a href="mailto:miros-discuss@mirbsd.org">mailing
 list</a> (or <a href="mailto:postmaster@mirbsd.org">subscribe</a> to it).
 The mailing list can be reached <a href="nntp://news.gmane.org/gmane.os.miros.general">via
 NNTP</a> or at the <a href="http://marc.info/?l=miros-discuss">MARC web
 archive</a> (or <a href="http://news.gmane.org/gmane.os.miros.general">GMane
 Loom</a>) as well.
 Joining the IRC channel at <a href="http://freenode.net/">Freenode</a>
 (irc.freenode.net, SSL port 7000 or port 7070, insecure port 6667)
 <tt>#!/bin/mksh</tt> (no joke, this is really the channel’s name) and
 <tt>#ksh</tt> (where you must distinguish AT&amp;T ksh from mksh though)
 is recommended as well.</p>

<h2 id="build">Installation</h2>
<p>Skip to the section about being <a href="#otheros">included in operating
 environments</a> unless you really want to compile mksh from source yourself
 or create a package for your operating system of choice.</p>
<p>First off, you have to download the source code from any of the mirrors
 listed below, or any other mirror you know of. Official source code
 distributions are a cpio(1) compressed “old-style” (portable octal) archive,
 compressed with gzip(1) (zlib’s deflate algorithm) and digitally signed with
 gzsig(1) using the MirOS Project’s <a href="/gzsigkey.cer">current signature
 key</a>. Please verify the signature <em>as well as</em> the hashes and/or
 checksums below, so you’re sure the content is intact and the version number
 on the archive is correct. If you require source code in tar(1)’s “ustar”
 format, check the Debian Project for availability, although they often do
 not carry the latest version. The pax(1) utility (the POSIX Archiver) can
 extract from the CPIO distfile and is available even on a stock Microsoft®
 Windows® installation (<tt>\WINNT\SYSTEM32\PAX.EXE</tt>).</p>
<h3 id="mirrors">Known Mirrors</h3><ul>
 <li><a href="https://www.mirbsd.org/MirOS/dist/mir/mksh/mksh-R39c.cpio.gz">https://www.mirbsd.org/MirOS/dist/mir/mksh/mksh-R39c.cpio.gz</a></li>
 <li><a href="http://pub.allbsd.org/MirOS/dist/mir/mksh/mksh-R39c.cpio.gz">http://pub.allbsd.org/MirOS/dist/mir/mksh/mksh-R39c.cpio.gz</a></li>
</ul>
<h3 id="hashes">Checksums and Hashes</h3><ul>
 <li>RMD160 (mksh-R39c.cpio.gz) = 02a74d4158bef6cf98012ff60c3c0bfe5b095924</li>
 <li>TIGER (mksh-R39c.cpio.gz) = 7ce2a8601bdac532cad2b3bfc7434571e29731224fb73464</li>
 <li>1146532199 296033 /MirOS/dist/mir/mksh/mksh-R39c.cpio.gz</li>
 <li>MD5 (mksh-R39c.cpio.gz) = 0c3cd172b47eefcdf9a302baa42f5092</li>
 <li style="list-style:none;">All official distfiles are gzsig(1)d.</li>
</ul>

<h3 id="decomp">Decompression</h3>
<p>Use any of the following syntaxes to extract the distfile; you’ll get the
 idea soon. Some web browsers (prominently, Mozilla® and its derivates as well
 as Microsoft® Internet Explorer®) already inflate the distfile during
 download but do not remove the “.gz” extension; replace “gzip -dc” (gzcat)
 with “cat” if that happens for you.</p>
<p>The first example is using BSD paxtar (MirOS BSD, OpenBSD, NetBSD®), or
 “bsdtar” (DragonFly); the second and third use cpio(1) or pax(1) and are
 for most operating systems; the fourth is for Debian.</p><ul>
<li>$ tar xzf mksh-R39c.cpio.gz &amp;&amp; cd mksh</li>
<li>$ gzip -dc mksh-R39c.cpio.gz | cpio -mid &amp;&amp; cd mksh</li>
<li>$ gzip -dc mksh-R39c.cpio.gz | pax -r &amp;&amp; cd mksh</li>
</ul>

<h3 id="compile">Compilation</h3>
<p>Now you’re in the source code directory; <tt>Build.sh</tt> does all the
 magic for you. In theory, invoking the command<br />
 <tt>% /bin/sh ./Build.sh</tt><br />
 should work. Relative paths can be used too, for example, instead of cd(1)ing
 to the source directory, you could’ve done<br />
 <tt>% mkdir build; cd build; /bin/sh ../mksh/Build.sh</tt></p>
<p>It is optionally possible to place files, such as <tt>printf.c</tt> and <a
 href="@@RELPATH@@a4rcontrb.htm"><tt>arc4random.c</tt></a> into either the
 current or the source directory. The former will need a compile option (see
 below) to be activated; the latter will be pulled in automatically if the
 arc4random(3) functions are not provided by the OE. <tt>printf.c</tt> is
 undesirable because it uses stdio, floating point and bloats.</p>
<p>The build script requires a Bourne shell (Solaris <tt>/bin/sh</tt>, the <a
 href="http://heirloom.sourceforge.net/sh.html">Heirloom sh</a>, DEC OSF/1
 V2.0 <tt>/bin/sh</tt>), Korn shell (ksh, ksh88, ksh93, pdksh, mksh, oksh,
 maybe the MKS ksh), POSIX shell (posh, <tt>/usr/xpg4/bin/sh</tt>, ash,
 dash), related shell (J�rg Schilling’s bsh or sh, the Z Shell), or a Bourne
 or POSIX superset (such as GNU bash) to work; the ULTRIX <tt>/bin/sh</tt>
 or the C shell (csh, tcsh) or “bsh” or a scripting shell like the wish won’t.
 <br />Accepted arguments are:</p><ul>
<li><tt>-combine</tt> – all-in-one build, recommended unless gcc is broken;
 ignored if $CC does not support “-fwhole-program --combine” (gcc4, R37+)</li>
<li><tt>-j</tt> – parallel build (mksh R31d and up)</li>
<li><tt>-llvm[=…]</tt> – compile to bytecode; option arguments (or, if none
 given, ‘-std-compile-opts’) are passed to LLVM opt (mksh R36b and up)</li>
<li><tt>-M</tt> – do not compile but create <tt>Makefrag.inc</tt> (R39b+)</li>
<li><tt>-Q</tt> – be (only) a little less verbose</li>
<li><tt>-r</tt> – don’t try to build a pre-formatted version
 of the manual page using nroff(1) if found – <em>recommended</em></li>
<li><tt>-valgrind</tt> – append <tt>-DDEBUG -g3 -fno-builtin</tt> which are
 required to work around gcc/valgrind and clang/scan-build bugs (R39b+)</li>
</ul>
<p>Note on <tt>-combine</tt> vs <tt>-j</tt> vs <tt>-llvm</tt> vs
 <tt>-M</tt>: these four are mutually exclusive. The least preferred of
 the three actually compiling flavours is <tt>-j</tt>, and the one we
 consider best is <tt>-combine</tt> (since it achieves the best
 optimisations). It is sometimes possible to use <tt>-j</tt> together
 with <tt>-llvm</tt> to parallelise LLVM Bytecode generation, though.</p>
<p>The build script also honours the following environment variables:</p><ul>
<li><tt>CC</tt> (cc) – the C compiler used</li>
<li><tt>CFLAGS</tt> (-O2 / -xO2) – optimiser and other compiler flags used</li>
<li><tt>CPPFLAGS</tt> (no default) – additional cpp(1) flags</li>
<li><tt>LDFLAGS</tt> – additional CCLD flags</li>
<li><tt>LIBS</tt> (-lcrypt on Interix; empty otherwise) – additional
 libraries to pull in</li>
<li><tt>NOWARN</tt> (-Wno-error / -errwarn=%none) – $CC option to disable
 bailing out at errors; used during mirtoconf checks</li>
<li><tt>NROFF</tt> (nroff; “nroff -c” with GNU groff) – the manual page
 processor used unless <tt>-r</tt> is given</li>
<li><tt>TARGET_OS</tt> (uname -s || uname) – the operating system to compile
 for; set this during cross compilation; valid: AIX BeOS (not yet) BSD/OS
 CYGWIN* Darwin DragonFly FreeBSD GNU (Hurd) GNU/kFreeBSD Haiku
 HP-UX Interix IRIX* Linux MidnightBSD Minix MirBSD NetBSD OpenBSD OSF1
 Plan9 (not yet) PW32* (not yet) QNX SunOS syllable (not yet) ULTRIX UWIN*</li>
<li><tt>TARGET_OSREV</tt> (uname -r) – the operating system revision number
 for these that need it; currently: QNX (R38c+)</li>
<li style="list-style:none;">Feature selectors:</li>
<li><tt>USE_PRINTF_BUILTIN=1</tt> – add <tt>printf.c</tt> to the list of
 files to be compiled and set a flag so it is used as builtin (R39+)</li>
</ul>
<p>If <tt>CPPFLAGS</tt> contain any of the following definitions, the resulting
 binary will be compiled with a specific flavour:</p><ul>
<li><tt>-DMKSH_SMALL</tt> – build a really small mksh(1), e.g. for embedded
 systems (see below for details of what this entails)</li>
<li><tt>-DMKSH_ASSUME_UTF8=0</tt> – do not use setlocale(3) or
 nl_langinfo(CODESET); do not assume the terminal is in UTF-8 mode
 (mksh R38c and up)</li>
<li><tt>-DMKSH_ASSUME_UTF8</tt> – do not use setlocale(3) or
 nl_langinfo(CODESET); assume the terminal is always in UTF-8 mode</li>
<li><tt>-DMKSH_BINSHREDUCED</tt> – include code to automatically “set -o
 posix” (mksh R39b+: “set -o sh”) to reduce functionality if called as
 <tt>sh</tt> or <tt>-sh</tt></li>
<li><tt>-DMKSH_CLS_STRING</tt> – the string to send to the terminal to clear
 the window (default: <tt>"\033[;H\033[J"</tt>)</li>
<li><tt>-DMKSH_CONSERVATIVE_FDS</tt> – use less filedescriptors (32/10 ipv
 56/24), e.g. if the system supports few (mksh R37c and up)</li>
<li><tt>-DMKSH_MIDNIGHTBSD01ASH_COMPAT</tt> – parse “--” on the shell command
 line like MidnightBSD 0.1 <tt>/bin/sh</tt> (different from all other shells);
 <em>requires</em> <tt>-DMKSH_BINSHREDUCED</tt> or “-o posix” (R38+) / “-o sh”
 (R39b+)</li>
<li><tt>-DMKSH_NOPWNAM</tt> – omit getpwnam(3) calls (<tt>~foo/</tt> expansion)
 in order to not pull in the nsswitch or PAM libraries</li>
<li><tt>-DMKSH_NOVI</tt> – omit the Vi command line editing mode, which is
 orphaned anyway, yet functional (mksh below R39b)</li>
<li><tt>-DMKSH_NO_LIMITS</tt> – don’t compile the ulimit code (R38c+)</li>
<li><tt>-DMKSH_S_NOVI=0</tt> – do not omit the Vi editing mode (R39b+)</li>
<li><tt>-DMKSH_S_NOVI=1</tt> – omit the Vi command line editing mode (" ")</li>
<li><tt>-DMKSH_UNEMPLOYED</tt> – compile without job control (R37b+)</li>
<li><tt>-DNO_STRTOD</tt> – (printf.c) disable floating point</li>
<li><tt>-DUSE_REALLOC_MALLOC=0</tt> – if <tt>realloc(NULL, n)</tt> is not
 equivalent to <tt>malloc(n)</tt> (n &gt; 0) as ANSI C89 prescribes</li>
</ul>
<p>You can override certain mirtoconf checks by setting environment variables
 like <tt>HAVE_REVOKE=0</tt> (default for Linux) – if these are set to 0 or 1,
 the values are used; if unset, the values are probed (unless overridden by a
 different check, such as MKSH_SMALL), if set to ‘x’ the probe is forced.<br />
 Useful items to enable/disable are HAVE_MKNOD (set to 0 to disable, set to x
 to re-enable for MKSH_SMALL), HAVE_SETLOCALE_CTYPE (set to 0 if you know that
 it won’t ever return UTF-8), HAVE_PERSISTENT_HISTORY (0 to not include this
 feature), HAVE_FLOCK_EX (if flock or mmap do not work on files).</p>
<p>Defining <tt>MKSH_SMALL</tt> will disable persistent history (to re-enable,
 env HAVE_PERSISTENT_HISTORY=x), try to compile with <tt>-fno-inline</tt>,
 disable the mknod(2), realpath(3)[mksh R39 and below] and revoke(2) externs (to re-enable these,
 follow the above schema); (not overridable) implies traditional/conservative
 filedescriptor usage, MKSH_NOPWNAM; omits shebang checking in scripts, the Vi
 command line editing mode (mksh R39b and up can re-enable it by defining
 <tt>-DMKSH_S_NOVI=0</tt>), certain verbose error messages, the entire ‘-T’
 command line option; replaces inlines
 with separate functions for size over speed optimisation, etc. (In R39b and
 up, it disables a whole lot more things than in earlier versions.)</p>

<h4 id="oespec">Operating Environment specific notes</h4>

<h5 class="cr" id="oe_ack"><img width="71" height="64" alt="[Minix logo]"
 class="fr" src="@@RELPATH@@pics/logos/minix.png" />Compiler: ACK</h5>
<p>Support for <a href="http://www.cs.vu.nl/ack/">ACK on Minix 3</a> has
 been added in mksh R37c with a workaround a known ACK bug (the “const”
 bug); it is now perfectly usable.</p>
<p>Support for <a
 href="http://tack.sourceforge.net/">other ACK versions</a> or targets can
 be user-contributed. It currently lacks a sane frontend supporting things
 like “cc -E” (<tt>ack -E</tt> is ignored), at the least, and does not yet
 process system headers like &lt;sys/types.h&gt;.</p>

<h5 class="cr" id="oe_bcc">Compiler: Borland C++ Builder</h5>
<p>This compiler is somewhat supported in mksh R30 with UWIN’s cc wrapper.
 (We haven’t been able to produce a working executable though.)</p>

<h5 class="cr" id="oe_decc">Compiler: DEC/Compaq/HP C for OSF/1 and Tru64</h5>
<p>This compiler is fully supported with mksh R33b (partial support did
 appear earlier).</p>
<p>The ucode based compiler, linker and loader for Digital UNIX (OSF/1)
 V2.0 on MIPS is supported since mksh R36. It may, however, be forced to
 link statically to work around a bug in the toolchain.</p>

<h5 class="cr" id="oe_dmc">Compiler: Digital Mars</h5>
<p>This compiler is somewhat supported in mksh R30 with UWIN’s cc wrapper
 and a few kludges. (We haven’t been able to produce a tested executable
 though, due to general stability issues with the UWIN platform.)</p>

<h5 class="cr" id="oe_gcc"><img width="54" height="64" alt="[GCC logo]"
 class="fr" src="@@RELPATH@@pics/logos/gcc.png" />Compiler: GCC</h5>
<p>The GNU C Compiler 1.42, 2.7.2.1, 2.7.2.3, egcs (gcc 2.95) and the GNU
 Compiler Collection (gcc 3.x, 4.x) are known to work, but not all versions
 work on all targets.
 Specific C flags, known extensions, etc. are autoprobed; cross-compilation
 works fine. Use of gcc 4.x is discouraged because of several dangerous changes
 in how the optimiser works; it is possible to work around their trading off
 reliability for benchmark-only speed increases, but because mksh developers
 do not use gcc 4.x this will have to be user-contributed. On the other hand,
 gcc 3.x (in some cases 2.x) is the best choice for compiling mksh.</p>
<p>On BSDi BSD/OS, where gcc 1.42 and gcc 2.7.2.1 are available, the cc(1)
 manual page mentions that gcc 1.42 produces more reliable code, so we
 recommend to build mksh with <tt>CC=cc</tt> (gcc1) instead of <tt>CC=gcc</tt>
 or <tt>CC=gcc2</tt> there instead.</p>
<p>Since mksh uses ProPolice, the Stack-Smashing Protector, some GCC versions’
 compilates require additional shared libraries. To disable this, pass
 <tt>HAVE_CAN_FSTACKPROTECTORALL=0</tt> in the build environment.</p>
<p>GCC and Valgrind do not always play well together, hence the build option
 <tt>-valgrind</tt> adding <tt>-fno-builtin</tt> to avoid gcc producing code
 that can access memory past the end of the allocation.</p>

<h5 class="cr" id="oe_hpc"><img width="111" height="64" alt="[HP-UX logo]"
 class="fr" src="@@RELPATH@@pics/logos/hp-ux.png" />Compiler: HP C/aC++</h5>
<p>HP’s C compiler (/usr/bin/cc on HP-UX) is supported in mksh R30 and above;
 on IA64, only the LP64 model can be used; mksh used to segfault in the ILP32
 module (or rather, the system libraries did, I think), so it was default.
 PA-RISC too works fine, so this compiler is a primary choice.</p>
<p>In mksh R39b and up, you must set <tt>CFLAGS='+O2 +DD64'</tt> on IA64 to get
 the same behaviour as previous versions; the 32-bit mode is now the default.
 The HP-UX bundled compiler <tt>/usr/ccs/bin/cc</tt> works as well as HP aCC,
 except of course that it does not optimise. (GCC and C99 extensions aren’t
 actually used by mksh.)</p>

<h5 class="cr" id="oe_xlc">Compiler: IBM XL C/C++ / VisualAge</h5>
<p>IBM xlC 9.0 on AIX 5.3 is supported in mksh R30 and above.</p>
<p>IBM xlC 8.0 on Linux/POWER and IBM xlC 6.0β on MacOS X are on the TODO.</p>
<p>IBM xlC 7.0 on AIX 5.2 is supported in mksh R35c and above.</p>

<h5 class="cr" id="oe_icc">Compiler: Intel C/C++/Fortran</h5>
<p>ICC emulates GCC quite well (too well for my taste), is fully supported in
 mksh R30 and above on several platforms, but spits out <strong>lots</strong>
 (and I <em>mean</em> huge ugly lots) of bogus warnings during compile. We’re
 not going to work around these; let Intel fix their compiler instead. Some of
 these warnings were even responsible for bugs in mksh.</p>
<p>I could not get the Intel Compiler 10 for Windows® to work.</p>
<p>mksh enables the ICC stack protector option automaticaly. Compilates
 usually require the Intel shared libraries to be around.</p>

<h5 class="cr" id="oe_llvm"><img width="64" height="64" alt="[LLVM logo]"
 class="fr" src="@@RELPATH@@pics/logos/llvm.png" />Compiler: LLVM</h5>
<p>Apple llvm-gcc from Xcode 3.1 had full success with mksh R34.</p>
<p>Vanilla <a href="http://llvm.org/">llvm-gcc</a> works fine as well.</p>
<p>Vanilla <a href="http://clang.llvm.org/">llvm-clang</a> starting at
 r58935 produces working code with mksh R36b and up.</p>

<h5 class="cr" id="oe_msc">Compiler: Microsoft® C/C++</h5>
<p>Support for the Microsoft® C Compiler on Interix and UWIN, with the
 respective <tt>/usr/bin/cc</tt> wrappers, appeared in mksh R30.
 The following product versions have been tested:</p>
<p><tt>CL.EXE: Microsoft (R) 32-bit C/C++ Standard Compiler Version 13.00.9466 for 80x86<br />
 LINK.EXE: Microsoft (R) Incremental Linker Version 7.00.9466</tt><br />
 (both are part of the .NET Common Language Runtime redistributable)</p>
<p><tt>CL.EXE: Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 14.00.50727.42 for 80x86<br />
 LINK.EXE: Microsoft (R) Incremental Linker Version 8.00.50727.42</tt><br />
 (both are part of Visual Studio 2005 C++ Expreß)<br />
 You’ll have to change Interix’ cc(1) wrapper though: replace <tt>/Op</tt>
 with <tt>/Gs-</tt> to disable the stack checks (missing support in libc
 for them, they used to be off by default) and remove <tt>/Ze</tt>.</p>
<p>On Interix (SFU 3.5), this compiler is maturely usable and a good choice.</p>
<p>On GNU/Cygwin, using <a href="http://interix-wgcc.sourceforge.net/">wgcc</a>
 it <em>might</em> be possible to use this compiler. I could not test that yet,
 though.</p>
<p>On UWIN, this is usable as well.</p>

<h5 class="cr" id="oe_mpp">Compiler: MIPSpro</h5>
<p>Support for SGI’s MIPSpro compiler on IRIX appeared in mksh R33b.</p>

<h5 class="cr" id="oe_nwcc"><img width="244" height="64" alt="[nwcc logo]"
 class="fr" src="@@RELPATH@@pics/logos/nwcc.png" />Compiler: nwcc</h5>
<p>Support for nwcc appeared in mksh R36b; it is recommended to use
 nwcc 0.8.1 with mksh R39c or newer.</p>

<h5 class="cr" id="oe_pcc">Compiler: PCC (BSD)</h5>
<p>Support for the Caldera/SCO UNIX® based, BSD-licenced portable C compiler
 in the <a href="http://pcc.ludd.ltu.se/">ragge version</a> has been added
 with mksh R31d. Versions from end of April 2008 onwards are known to work
 reliably, even with -O enabled.</p>
<p>The compiler itself rarely works on GNU/Linux or Darwin due to GNUisms,
 assembler problems, etc. though.</p>

<h5 class="cr" id="oe_sun">Compiler: SUNpro</h5>
<p>Support for the <a href="http://developers.sun.com/sunstudio/">SUN Studio
 12</a> compiler (cc 5.9) as well as cc 5.8 appeared in mksh R30; other
 versions might be supported as well. This compiler is a primary choice.</p>

<h6 id="oe_sunmir">Using SUNWcc on MirBSD/i386</h6>
<p>Preparation steps. We assume that Sun Studio is extracted under the
 <tt>/opt/SUNWcc</tt> directory and Linux emulation has been set up.
 From now on, <tt>$S</tt> is <tt>/opt/SUNWcc/sunstudio12.1</tt> (when
 using an older version, no “.1” at the end).</p>
<pre>$ cat $S/../MirBSD/ld                   # must be executable (0555)
#!/bin/mksh
set -A args -- "$@"
integer i=0
while (( i &lt; ${#args[*]} )); do
        [[ ${args[i]} = -dynamic-linker ]] &amp;&amp; args[i+1]=/usr/libexec/ld.so
        [[ ${args[i]} = -Y ]] &amp;&amp; args[i+1]=/usr/lib
        let ++i
done
exec /usr/bin/ld "${args[@]}"</pre>
<p>In <tt>$S/prod/include</tt> “mkdir MirBSD_orig” and “mv cc MirBSD_orig/”.
 In <tt>$S/prod/lib</tt> “mkdir MirBSD_orig” and “mv *.o MirBSD_orig/” then
 “mv MirBSD_orig/values-xa.o .” (we need this one).</p>
<p>Furthermore, run “make obj &amp;&amp; make depend &amp;&amp; make &amp;&amp;
 make sunstuff” in <tt>/usr/src/lib/csu/i386_elf</tt> then copy the three files
 obj/sun_crt{1,i,n}.o to <tt>$S/prod/lib/</tt>crt{1,i,n}.o (they are the MirBSD
 glue code / startup files).</p>
<p>For some versions, you may need to ensure <tt>/emul/linux/lib</tt> and
 <tt>/emul/linux/usr/lib</tt> do not contain any *.so or *.o files, except
 for libbfd, libopcodes, libstdc++ (but 12.1 uses the native linker).</p>
<p>In 12, -xO2 is broken; in 12.1 optimisation merely lets ir2hf run out
 of memory even with ulimit -d ulimit -dS 1572864, hence, -xipo cannot be
 used either. ☹</p>
<p><strong>Using SUNWcc on MirBSD to build mksh</strong></p>
<pre> $ S=/opt/SUNWcc/sunstudio12.1
 $ LD_LIBRARY_PATH=$S/prod/lib/sys:$S/prod/lib:$S/rtlibs CC=$S/prod/bin/cc \
   LDFLAGS="-Yl,$S/../MirBSD" mksh /usr/src/bin/mksh/Build.sh -r</pre>

<h5 class="cr" id="oe_tcc"><img width="100" height="60" alt="[tcc logo]"
 class="fr" src="@@RELPATH@@pics/logos/tcc.png" />Compiler: tcc (Tiny C)</h5>
<p>Support for Fabrice Bellard’s tcc appeared in mksh R31, although its
 unability to do ‘-E’ in older versions gave us some headache, and glibc
 currently makes it impossible to link the final executable or run it.</p>

<h5 class="cr" id="oe_t15">Compiler: TenDRA (maybe Ten15 too)</h5>
<p>Support for TenDRA appeared in mksh R31 and appears to be solid; mksh
 uses the ‘system’ profile for compiling by default. Users who wish to
 build mksh with a different profile are welcome to help to port it.</p>
<p>See <a href="#oe_bsu">ULTRIX</a> for an example of getting a ‘POSIX’
 profile to work.</p>

<h5 class="cr" id="oe_muc">Compiler: DEC ucode (MIPS CC)</h5>
<p>Since mksh R33c, ucode on Ultrix is fully supported.</p>

<h5 class="cr" id="oe_adk"><img width="112" height="64" alt="[FreeWRT logo]"
 class="fr" src="@@RELPATH@@pics/logos/freewrt.png" />Distribution: FreeWRT, OpenADK, OpenWrt</h5>
<p>These distributions provide the same support cross-platform,
 with µClibc and/or eglibc, and thus should behave the same on
 all supported targets.</p>

<h5 class="cr" id="oe_android">Platform: Android</h5>
<p>Supported with OpenADK (static eglibc) and NDK (although the build
 process is currently not feasible with an Android.mk file but possible
 if the CPPFLAGS and signames.inc are pregenerated; sys_signame[] has
 been pushed upstream and is currently under evaluation). Integration
 into the SDK and hence Android proper, as <tt>/bin/sh</tt>, is also
 pushed into Gerrit and under evaluation.</p>

<h5 class="cr" id="oe_iphone">Platform: iPhone</h5>
<p>This is just <a href="#oe_osx">Mac OSX</a>, compile (natively, or
 cross via the SDK) and copy.</p>

<h5 class="cr" id="oe_maemo">Platform: Maemo</h5>
<p>This is like Debian, and packaging is available via the Garage and
 the Extras repository. Helpers (for GUI integration and actual on
 device testing) seeked.</p>

<h5 class="cr" id="oe_diet">Toolchain: dietlibc</h5>
<p>Fefe’s dietlibc works in mksh R34, although his opinion towards certain
 standards, such as <tt>caddr_t</tt>, strcasecmp(3), etc. are weird.</p>

<h5 class="cr" id="oe_klcc">Toolchain: klibc</h5>
<p>klibc (with stock klcc as compiler wrapper) works if the <a
 href="http://bugs.debian.org/516294">patch from the Debian bug reports</a>
 is applied and <tt>-DMKSH_NO_LIMITS</tt> is used to build mksh(1).</p>

<h5 class="cr" id="oe_aix">OS: AIX</h5>
<p>Support for AIX with xlC appeared in mksh R30.</p>

<h5 class="cr" id="oe_beos"><img width="236" height="64" alt="[Haiku logo]"
 class="fr" src="@@RELPATH@@pics/logos/haiku.png" />OS: BeOS / Haiku</h5>
<p>ahoka@ had begun porting. mksh R39c has been tested on 2010-03-13; <a
 href="http://dev.haiku-os.org/ticket/5567">a kernel from r35836 up</a>
 is required due to a bugfix wrt. signal handling. (This for <a
 href="http://www.haiku-os.org/">Haiku</a>; we have no idea about BeOS.)</p>

<h5 class="cr" id="oe_bsi">OS: BSDi BSD/OS</h5>
<p>BSD/OS 3.1 works fine with mksh R33.</p>

<h5 class="cr" id="oe_dos">OS: MS-DOS, DR DOS, FreeDOS</h5>
<p>DJGPP’s bash.exe fails to run Build.sh, thus this is currently not
 supported. (We tried!)</p>

<h5 class="cr" id="oe_cyg"><img width="48" height="48" alt="[Cygwin logo]"
 class="fr" src="@@RELPATH@@pics/logos/cygwin.png" />OS: GNU/Cygwin</h5>
<p>This operating environment is supported as much as it adheres to standard
 POSIX/SUSv3 conformant things. No workarounds for <tt>.exe</tt> suffixes or
 other platform-specific quirks have been or will be added.</p>

<h5 class="cr" id="oe_osx">OS: Darwin / Mac OSX</h5>
<p>Works pretty well.</p>

<h5 class="cr" id="oe_dfl"><img width="56" height="60" alt="[DragonFly logo]"
 class="fr" src="@@RELPATH@@pics/logos/dfbsd.png" />OS: DragonFly BSD</h5>
<p>Perfect choice. Note <tt>/bin/sh</tt> compatibility needs a quirk.</p>

<h5 class="cr" id="oe_bsf"><img width="64" height="64" alt="[FreeBSD logo]"
 class="fr" src="@@RELPATH@@pics/logos/freebsd.png" />OS: FreeBSD</h5>
<p>Perfect choice. Note <tt>/bin/sh</tt> compatibility needs a quirk.</p>

<h5 class="cr" id="oe_hurd"><img width="64" height="64" alt="[Hurd logo]"
 class="fr" src="@@RELPATH@@pics/logos/hurd.png" />OS: GNU/Hurd</h5>
<p>This operating system is supported (on i386) since R29 but not well
 tested. mksh is part of Debian GNU/Hurd, so it is expected to work.</p>
<p>Starting with mksh R39b, there is no arbitrary limit on pathnames any
 more, as the operating system requires. (However, there are still other
 inherent limits in mksh, such as that of an interactive input line.)</p>

<h5 class="cr" id="oe_kbsd"><img width="64" height="64" alt="[Debian GNU/kFreeBSD logo]"
 class="fr" src="@@RELPATH@@pics/logos/kfreebsd.png" />OS: GNU/k*BSD</h5>
<p>This operating environment has been supported for quite a while as part
 of Debian and somewhat tested.</p>

<h5 class="cr" id="oe_linux"><img width="74" height="88" alt="[Linux logo]"
 class="fr" src="@@RELPATH@@pics/pinguin.png" />OS: GNU/Linux</h5>
<p>While POSIX does not apply to “GNU’s Not Unix”, the <a
 href="http://www.pathname.com/fhs/pub/fhs-2.3.html#SPECIFICOPTIONS2">FHS</a>
 (ex-FSSTND) does; please convince your distributor to move ed to /bin/ed if
 not already done. Manual page installation paths are not standardised in
 older distributions either.</p>
<p>Besides glibc (GNU libc), dietlibc (from Fefe), µClibc (embedded),
 klibc (for initramfs) and libc5 (on Linux 2.0.38) work, but locale
 detection is not automatic for some of them.</p>
<p>mksh can be used as /bin/sh on Debian and similarly strict distributions,
 which allow to use e.g. ash/dash there as well.</p>

<h5 class="cr" id="oe_hpux"><img width="111" height="64" alt="[HP-UX logo]"
 class="fr" src="@@RELPATH@@pics/logos/hp-ux.png" />OS: HP-UX</h5>
<p>Support for HP-UX with GCC appeared in mksh R29 and works with HP’s C
 compiler and is no longer experimental in mksh R30. Please use stty(1) to
 make the terminal sanely usable.</p>
<p>If passing custom CFLAGS, don’t forget <tt>-mlp64</tt> (GCC) or
 <tt>+DD64</tt> on Itanium.</p>

<h5 class="cr" id="oe_interix">OS: Interix</h5>
<p>We have only tested SFU 3.5 on Windows® 2000, not SUA on Windows® 2003 SR1
 or the version integrated into Vista. Windows 7’s works, gcc only though.</p>
<p>As the Unix Perl which comes with Interix is too old, and the ActiveState
 Perl has… other issues, to run the regression tests, please install Perl from
 <a href="http://www.pkgsrc.org/">NetBSD® pkgsrc®</a> instead.</p>
<p>As of mksh R30, the native compiler (cc(1)) is supported in addition
 to gcc, calling Microsoft C. Do not use the c89(1) wrapper.</p>
<p>If passing custom LIBS, don’t forget to add <tt>-lcrypt</tt> or any other
 library providing arc4random(3).</p>
<p>mksh can replace /bin/ksh and /bin/sh without any problems.</p>

<h5 class="cr" id="oe_sgi">OS: IRIX</h5>
<p>Support for IRIX64 6.5 appeared in mksh R33b.</p>

<h5 class="cr" id="oe_mnbsd"><img width="64" height="64" alt="[MidnightBSD logo]"
 class="fr" src="@@RELPATH@@pics/logos/mnbsd.png" />OS: MidnightBSD</h5>
<p>mksh is part of MidnightBSD 0.2-CURRENT and above and used as native
 /bin/ksh; it can be used as /bin/sh as well with a quirk.</p>
<p>MidnightBSD 0.3 uses mksh as <tt>/bin/sh</tt> indeed.</p>

<h5 class="cr" id="oe_minix"><img width="71" height="64" alt="[Minix logo]"
 class="fr" src="@@RELPATH@@pics/logos/minix.png" />OS: Minix</h5>
<p>Minix 3 is supported starting mksh R37b (gcc), R37c (ACK/adk cc).
 Minix 1 and Minix 2 will never be supported due to size constraints on
 16-bit platforms, unless a user contributes code.</p>
<p>Minix 3 contains a <tt>/usr/bin/ed</tt> which, even if copied to the
 correct directory (<a href="mksh_old.htm#editor"><tt>/bin</tt></a>), will fail the
 regression tests due to bugs. A modern ed(1), if compiled, might help
 with it similarily to QNX, but MirBSD ed needs very many patches, so
 this was not tried.</p>

<h5 class="cr" id="oe_bsm"><img width="98" height="92" alt="[MirBSD logo]"
 class="fr" src="@@RELPATH@@pics/logosmw.png" />OS: MirBSD</h5>
<p>Perfect choice. This is where mksh comes from.</p>

<h5 class="cr" id="oe_bsn"><img width="80" height="60" alt="[NetBSD logo]"
 class="fr" src="@@RELPATH@@pics/logos/netbsd.png" />OS: NetBSD</h5>
<p>Perfect choice.</p>
<p>Starting with NetBSD 1.6, mksh can replace /bin/ksh and /bin/sh without
 any problems. On NetBSD 1.5, mksh can only replace /bin/ksh safely.</p>

<h5 class="cr" id="oe_bso"><img width="70" height="64" alt="[OpenBSD logo]"
 class="fr" src="@@RELPATH@@pics/logos/openbsd.png" />OS: OpenBSD</h5>
<p>The setlocale(3) call in OpenBSD’s libc will always return the “C”
 locale and therefore has been disabled by default.</p>
<p>mksh can replace /bin/ksh and /bin/sh without any problems. mksh is
 supposed to be a superset of oksh (except GNU bash-style PS1, weird
 POSuX character classes, and an incompatible ulimit builtin change).</p>

<h5 class="cr" id="oe_osf1">OS: DEC/Compaq OSF/1, Compaq/HP Tru64</h5>
<p>Digital Unix is somewhat supported using gcc as of mksh R31b.
 With mksh R33b, many more versions and the native compiler work.
 In fact, gcc sometimes segfaults, so use the vendor compiler.</p>

<h5 class="cr" id="oe_plan9"><img width="50" height="64" alt="[Plan 9 mascot]"
 class="fr" src="@@RELPATH@@pics/logos/glenda.png" />OS: Plan 9</h5>
<p>Plan 9 is not supported yet – we were able to create an executable, but
 it did not return to the prompt after running a non-builtin command; this
 is job control issues, and patches are welcome. (Note this is for R37 and
 below; R37b might actually work, but someone would have to test this.)</p>
<p>Due to the unavailability of ttys, job control will never be supported.</p>
<p>The APE (ANSI’n’POSIX Environment) is required to build mksh; I don’t
 remember which compiler I used, but I think it was GCC.</p>

<h5 class="cr" id="oe_pw32">OS: PW32 on Win2k</h5>
<p>PW32 is not supported yet – killpg(3) is missing, and
 it’s possible that PW32 and Minix 3, at least, need job control disabled
 or worked around. Maybe peek at how ash/bash for PW32 do it. gcc works.</p>

<h5 class="cr" id="oe_qnx">OS: QNX/Neutrino</h5>
<p>QNX/Neutrino (Perl: “nto”) support appeared in mksh R36b.</p>
<p>The QNX ed(1) fails the regression tests due to being broken; compile
 the MirBSD ed and place it in <tt>/bin/</tt> to fix this.</p>

<h5 class="cr" id="oe_solaris"><img width="68" height="64" alt="[OpenSolaris logo]"
 class="fr" src="@@RELPATH@@pics/logos/sunos.png" />OS: Solaris</h5>
<p>Solaris is full supported since “forever” with gcc, and since mksh R30
 with Sun’s C compiler. Both 32-bit and 64-bit modes work; 64-bit mode is
 not enabled by default by <tt>Build.sh</tt>, you must do that manually by
 passing CFLAGS of <tt>-O2 -m64</tt> or <tt>-xO2 -xarch=generic64</tt>.</p>
<p>Solaris does not come with Berkeley mdoc macros for nroff, so using
 the HTML or PDF versions of the manual pages or pregenerating a catman
 page on another OS is required.</p>

<h5 class="cr" id="oe_syll"><img width="186" height="64" alt="[Syllable logo]"
 class="fr" src="@@RELPATH@@pics/logos/syllable.png" />OS: Syllable Desktop</h5>
<p>This does not yet work due to a signal passing bug in the AtheOS kernel,
 we were told by their developers. However, mksh R33 is at the same level
 of support as Plan 9 now.</p>
<p>Chances are a more recent mksh works with a more recent Syllable.</p>
<p>Syllable Server will work, as it is, <em>at the moment</em>, “just” a
 GNU/Linux distribution with a different GUI. This may change though.</p>

<h5 class="cr" id="oe_bsu">OS: ULTRIX</h5>
<p>Even on ULTRIX 4.5, mksh R33c works fine. The system ksh must be used
 for running the <tt>Build.sh</tt> script, though.</p>
<p>I could not get networking on ULTRIX 4.0 (SIMH) to work, so I could
 not test it there.</p>
<p>You however must pass the <tt>-YPOSIX</tt> option to the ucode compiler,
 as the default <tt>-YBSD</tt> profile produces a broken executable (spins
 instead of starting up), and the <tt>-YSYSTEM_FIVE</tt> profile does not
 even compile. See <a href="#oe_t15">TenDRA</a> for another OE which has
 issues with different OE profiles. (<tt>Build.sh</tt> takes care of this
 automatically.)</p>

<h5 class="cr" id="oe_uwin">OS: UWIN-NT</h5>
<p>Compilation of mksh R30 on UWIN works with several compilers (bcc, dmc,
 msc – I could not get gcc-egcs, gcc-2.95, gcc-mingw, icc to work) but the
 platform itself is very flakey, and even some regression tests crash, due
 to target limitations apparently. Within these limits, mksh is usable.</p>

<h5 class="cr" id="oe_winapi">OS: Windows</h5>
<p>Michael Langguth, partially under work sponsored by his employer <a
 href="http://www.scalaris.com/">Scalaris AG</a>, is currently working
 on porting mksh to native Win32 (WinAPI) to complete the GNU utilities
 for Win32 with a native shell to have a free interoperability solution
 for scripting. Progress is promising, but still a long way to go. The
 result will probably not be part of mksh itself, but a separate product;
 some core patches will however end up in core mksh.</p>

<h3 id="postbuild">After compiling</h3>
<p>The <tt>Build.sh</tt> script generates an executable (“mksh”, except on
 GNU/Cygwin, where it is called “mksh.exe”), a shell script to use the newly
 built mksh to run the regression test suite (“test.sh”), and (unless the
 <tt>-r</tt> option was given) a pre-formatted manual page (“mksh.cat1”).
 It also lists installation instructions unless <tt>-Q</tt> was provided.
 Now it’s the time to run<br /><tt>% ./test.sh -v</tt><br />
 in order to see if the shell works.</p>
<p>To actually install mksh, copy the binary to some place in $PATH, i.e.
 /bin/mksh, $HOME/.bin/mksh, /usr/local/bin/mksh, or whatever your packaging
 system wants; strip it and run chmod 555 on it. (This can easily be achieved
 with install(1) – on Solaris, this is /usr/ucb/install not /usr/bin/install –
 with the arguments -c, -s, -m 755¹, and -o/-g. ① with 555, strip(1) cannot
 write the file any more, chmod 555 afterwards.) Also append its installation
 path to <tt>/etc/shells</tt>, install the <tt>dot.mkshrc</tt> file (usually
 alongside with the copyright file and other documentation), copy it to
 <tt>/etc/skel/.mkshrc</tt> if your operating environment has this means to
 include default dotfiles; install either the catman page (mksh.cat1) to,
 for example, /usr/share/man/cat1/mksh.0, or the mdoc page (mksh.1) to the
 standard location (/usr/share/man/man1/ or /usr/man/man1/ or whatever your
 operating environment requires). The manual page requires the Berkeley mdoc
 macros (either the BSD or the GNU groff version) to be installed during
 formatting time.</p>
<p>Note that a <tt>~/.mkshrc</tt> file will <em>not</em> be executed if
 <tt>$ENV</tt> is set and not empty, nor is there an <tt>/etc/mkshrc</tt>.</p>

<h2 id="upgrade">For packagers: Upgrades</h2>
<p><strong>Note:</strong> This is <em>not</em> <a href="#clog">the
 ChangeLog</a>, these are the packager-visible upgrade notes regarding
 changes in the build system (<tt>Build.sh</tt> and friends, compiler
 support, packaging conventions, bad examples, etc). This is also <em>not</em>
 <a href="#caveat">the users' upgrade caveat list</a>.</p>
<p>mksh R39c should fix a bug that could have led to accidental removal of
 the manpage when building in the source directory. AIX builds no longer
 uselessly pull in libcrypt.</p>
<p>mksh R39b now has a separate <a href="#caveat">caveat</a> section listing
 the most relevant user-visible changes, split off this packagers' list.
 The optional, undesirable, unsupported printf(1) builtin is now documented
 in the manpage. The chdir builtin is an alias for cd. The realpath builtin
 is now always provided. <tt>MKSH_SMALL</tt> removes much more functionality
 than it used to. <tt>MKSH_NOVI=1</tt> is now <tt>MKSH_S_NOVI=[0|1]</tt>.
 <tt>$RANDOM</tt> handling is greatly simplified. There's now both “±o sh”
 and “±o posix”, and they differ; <tt>MKSH_MIDNIGHTBSD01ASH_COMPAT</tt> needs
 the former. New build flags <tt>-M</tt>, <tt>-valgrind</tt>. The default on
 HP-UX on IA64 is no longer to default to building with <tt>-mlp64</tt> (gcc)
 or <tt>+DD64</tt> (HP aCC). SUNWcc tries <tt>-xipo</tt> (but requires the
 packager to use <tt>-xO4</tt> or up manually).</p>
<p>mksh R39 has user-visible changes regarding “set -u” (“set -o nounset”)
 and alias/function name conflicts regarding whitespace before parenthesēs,
 as well as a much enhanced <tt>dot.mkshrc</tt> sample file I urge to install.
 People using a Makefile to build it may need to regenerate their set of
 CPPFLAGS used; CPPFLAGS handling in general has improved. There is now a
 defined but unsupported way to make printf(1) a builtin; this is <em>not</em>
 tested and adds a huge SLOB of foreign code to the build, lets the shell use
 stdio and floating point, making it bloated and fragile; if you still want
 it (hi Md), set <tt>USE_PRINTF_BUILTIN=1</tt> and add <tt>printf.c</tt> from
 <tt>mircvs://src/usr.bin/printf/</tt> to the build.</p>
<p>mksh R38c adds QNX fixes, build system fixes, and the (not recommended)
 ability to use <tt>-DMKSH_ASSUME_UTF8=0</tt> to skip the environment checks
 for locale (leading to one (supposedly un-)expected regression test failure).
 Use <tt>-DMKSH_NO_LIMITS</tt> to skip the ulimit builtin (klibc).</p>
<p>mksh R38b works on QNX 6.4 out of the box.</p>
<p>mksh R38 offers <tt>-DMKSH_MIDNIGHTBSD01ASH_COMPAT</tt> and users
 should be warned about the “!string” line and UTF-8 mode changes.</p>
<p>Freshmeat announcements <strong>have ceased</strong> because the
 site switched to a very user-unfriendly HTML (especially Lynx). Use
 the <a href="@@RELPATH@@tag_mksh.rss">RSS feed</a> instead.</p>
<p><a href="mksh_old.htm#upgrade">older entries</a></p>

<h2 id="otheros">Inclusion in other operating systems</h2><ul>
<li class="cr"><img class="fr" width="52" height="64" alt="[Debian logo]"
 src="@@RELPATH@@pics/logos/debian.png" /><a
 href="http://www.debian.org/">Debian</a> GNU/Linux, GNU/Hurd and
 GNU/kFreeBSD have an <a href="http://packages.debian.org/mksh">mksh package</a>
 maintained by the MirOS Project and uploaded (sponsored) by Bastian “waldi”
 Blank, Otavio Salvador, and Patrick Schönfeld; the debconf questions were taken
 from dash. We do not provide an inofficial source package any longer.</li>
<li class="cr"><img class="fr" width="61" height="64" alt="[Gentoo logo]"
 src="@@RELPATH@@pics/logos/gentoo.png" /><a
 href="http://www.gentoo.org/">Gentoo GNU/Linux</a> has an mksh <a
 href="http://sources.gentoo.org/viewcvs.py/gentoo-x86/app-shells/mksh/">ebuild</a>
 created by <a href="http://www.hboeck.de/">Hanno Böck</a>.</li>
<li class="cr"><img class="fr" width="64" height="64" alt="[Fedora logo]"
 src="@@RELPATH@@pics/logos/fedora.png" /><a
 href="http://fedoraproject.org/">Fedora</a> GNU/Linux 8, 9, 10, 11,
 and <a href="http://www.redhat.com/rhel/">RHEL</a> 4 and 5 (via EPEL) now
 officially contain <a
 href="http://fedoraproject.org/wiki/Packages/mksh">an mksh package</a> (<a
 href="http://cvs.fedoraproject.org/viewvc/devel/mksh/mksh.spec">spec
 file</a>). There are some <a
 href="http://fedoraproject.org/wiki/EPEL/FAQ#How_can_I_install_the_packages_from_the_EPEL_software_repository.3F">Instructions</a>
 for activating EPEL (RHEL only), then just type <tt>yum install mksh</tt>.</li>
<li>Red Hat Enterprise Linux (RHEL 6) will ship mksh for their customers
 to use with their ksh88 and pdksh scripts, as well as an optional shell.</li>
<li class="cr"><img class="fr" width="105" height="64" alt="[SuSE logo]"
 src="@@RELPATH@@pics/logos/suse.png" />The <a
 href="http://en.opensuse.org/Build_Service">OpenSuSE Build
 Service</a> provides an mksh package inside the <a
 href="http://download.opensuse.org/repositories/shells/SLES_9/src/">shells
 repo</a>, thanks to Pascal “loki” Bleser and Marcus “darix” Rückert; the
 RPMs are available as SRPM (source RPM) as well as for <a
 href="http://download.opensuse.org/repositories/shells/">various
 distributions</a>.
 The inofficial <em>portable</em> SRPM has been retired; the OBS SRPM
 has been changed to be buildable on Debian and MirBSD as well as include
 the contributed <tt>arc4random.c</tt> file. There are <a
 href="http://download.opensuse.org/repositories/home:/mirabile/CentOS_5/src/">more
 downloads</a> available, just browse a little.<br />Basically, go to <a
 href="http://download.opensuse.org/repositories/home:/mirabile/">mirabilos’
 home project</a>, find the subdirectory most closely matching your GNU/Linux
 distribution and proceed to the binaries. The SRPMs (source RPM in the
 <tt>*/src/</tt> subdirectories) should be all the same.</li>
<li class="cr"><img class="fr" width="129" height="64" alt="[Fink logo]"
 src="@@RELPATH@@pics/logos/fink.png" /><a
 href="http://finkproject.org/">Fink</a> delivers an <a
 href="http://pdb.finkproject.org/pdb/package.php/mksh">mksh package</a>
 from Andreas “gecko2” Gockel.</li>
<li class="cr"><img class="fr" width="122" height="64" alt="[SourceMage logo]"
 src="@@RELPATH@@pics/logos/smgl.png" /><a
 href="http://www.sourcemage.org/">SMGL</a> (Sourcemage GNU/Linux) has an
 <a href="http://distro.ibiblio.org/pub/linux/distributions/sourcemage/codex/test/shell-term-fm/mksh/">mksh
 spell</a> in their grimoire, developed by the MirOS Project together with
 Daniel “morfic” Goller, updated by Thomas “sobukus” Orgis and Vlad
 “Stealth” Glagolev.</li>
<li class="cr"><img class="fr" width="112" height="64" alt="[FreeWRT logo]"
 src="@@RELPATH@@pics/logos/freewrt.png" />In the <a
 href="https://www.freewrt.org/trac/">FreeWRT Embedded GNU/Linux
 Appliance Development Kit (meta distribution)</a>, the <a
 href="https://www.freewrt.org/svn/trunk/freewrt/package/mksh/">mksh
 package</a> is maintained by us. mksh is also the default shell in FreeWRT
 trunk (soon to be 1.1) and above. <a href="http://openadk.org/">OpenADK</a>
 (a FreeWRT 1.0 fork) also contains mksh as an optional package.</li>
<li><a href="http://openwrt.org/">OpenWrt Embedded GNU/Linux Distribution</a>
 also <a href="https://dev.openwrt.org/browser/packages/utils/mksh">provides
 mksh</a> on ADSL/WLAN routers thanks to Felix “nbd” Fietkau.</li>
<li class="cr"><img class="fr" width="60" height="60" alt="[Android-x86 logo]"
 src="@@RELPATH@@pics/logos/andr_x86.png" />The <a
 href="http://www.android-x86.org/">Android-x86 Project</a> has
 mksh as <tt>/bin/sh</tt> since 2010-02-25.</li>
<li class="cr"><img class="fr" width="66" height="62" alt="[Grml logo]"
 src="@@RELPATH@@pics/logos/grml.png" /><a
 href="http://www.ubuntu.com/">Ubuntu GNU/Linux</a>, the <a
 href="http://grml.org/">grml</a> (and grml64) Live-CD, and other Debian
 derivates also have an mksh package; Knoppix, SIDUX, <a
 href="http://www.nexenta.org/os">Nexenta OS</a> (GNU/Solaris), and
 grml-small do <em>not</em> contain or offer mksh. <em>Note</em>: We need
 URLs to the packages for these, can anyone provide any?</li>
<li class="cr"><img class="fr" width="68" height="64" alt="[Arch logo]"
 src="@@RELPATH@@pics/logos/arch.png" /><a
 href="http://www.archlinux.org/">Arch GNU/Linux</a> users can install
 an <a href="http://aur.archlinux.org/packages.php?do_Details=1&amp;ID=3431">mksh
 package</a> by Daniel “homsn” Hommel. No idea about Arch Hurd, though.</li>
<li class="cr"><img class="fr" width="58" height="48" alt="[T2 logo]"
 src="@@RELPATH@@pics/logos/t2.png" /><a
 href="http://t2-project.org/">T2 SDE</a> (ROCK Linux) contains a <a
 href="http://t2-project.org/packages/mksh.html">package</a> as well.</li>
<li class="cr"><img class="fr" width="64" height="64" alt="[FreeBSD logo]"
 src="@@RELPATH@@pics/logos/freebsd.png" /><a
 href="http://www.freebsd.org/">FreeBSD®</a> Ports (for FreeBSD, very old
 <a href="http://www.dragonflybsd.org/">DragonFly BSD</a> versions and <a
 href="http://www.desktopbsd.net/">DesktopBSD</a>) also have a <a
 href="http://cvsweb.freebsd.org/ports/shells/mksh/">port</a> created by
 Andreas “ankon” Kohn and kept up to date by Martin “miwi” Wilke. It is
 unknown if this applies to <a href="http://www.pcbsd.org/">PC-BSD</a> too,
 but there’s no mksh PBI (yet?).</li>
<li class="cr"><img class="fr" width="64" height="64" alt="[MidnightBSD logo]"
 src="@@RELPATH@@pics/logos/mnbsd.png" /><a
 href="http://www.midnightbsd.org/">MidnightBSD</a> uses <a
 href="http://cvsweb.midnightbsd.org/mports/shells/mksh/">mports</a>, a
 derivate of FreeBSD® ports. Naturally, they deliver mksh as well.
 MidnightBSD 0.2-CURRENT from 18th August 2007 onwards has mksh as both <a
 href="http://cvsweb.midnightbsd.org/src/contrib/mksh/"><tt>/bin/mksh</tt></a>
 and <a href="http://cvsweb.midnightbsd.org/src/bin/mksh/"><tt>/bin/ksh</tt></a>,
 i.e. it is the default MidnightBSD Korn shell. From 29 March 2009 onwards, it
 is also the default <tt>/bin/sh</tt> (since MidnightBSD 0.3).</li>
<li class="cr"><img class="fr" width="211" height="64" alt="[pkgsrc logo]"
 src="@@RELPATH@@pics/logos/pkgsrc.png" /><a
 href="http://www.pkgsrc.org/">NetBSD® pkgsrc®</a> (native also on recent
 DragonFly BSD; available for many other operating systems as well) has a <a
 href="http://cvsweb.netbsd.org/bsdweb.cgi/pkgsrc/shells/mksh/">package</a>
 created by us and kept up to date by Blair Sadewitz and Adam “replaced” Hoka.
 We do not provide an inofficial source package any longer.</li>
<li class="cr"><img class="fr" width="80" height="60" alt="[NetBSD logo]"
 src="@@RELPATH@@pics/logos/netbsd.png" />The <a
 href="http://wiki.netbsd.se/Desktop_Project">Desktop NetBSD
 project</a> also contains mksh; see the source of their <a
 href="http://cvsweb.netbsd.org/bsdweb.cgi/pkgsrc/meta-pkgs/desktop-gnome/Makefile">meta
 package</a>. This will provide their users with a modern, fast, secure,
 featureful shell and enhance the experience.</li>
<li><a href="http://beastiebox.sourceforge.net/">Beastiebox</a> also comes
 with mksh as an option. It’s NetBSD® based, mostly.</li>
<li class="cr"><img class="fr" width="85" height="92" alt="[MirPorts quilt]"
 src="@@RELPATH@@pics/quilt.png" />The MirPorts Framework brings mksh to
 OpenBSD, Mac OSX and Interix as well as older MirOS BSD versions, which
 have mksh as native Korn Shell.</li>
<li class="cr"><img class="fr" width="70" height="64" alt="[OpenBSD logo]"
 src="@@RELPATH@@pics/logos/openbsd.png" />An <a
 href="http://thread.gmane.org/gmane.os.openbsd.ports/41322">inofficial
 port</a> for <a href="http://www.openbsd.org/">OpenBSD</a> is available</li>
<li class="cr">ChinaLinux mirrors (and apparently packages) mksh.</li>
<li class="cr"><img class="fr" width="96" height="64" alt="[HMUG logo]"
 src="@@RELPATH@@pics/logos/hmug.png" />The <a
 href="http://www.hmug.org/pub/MacOS_X/BSD/Applications/Shells/mksh/">HMUG</a>,
 some US-American Apple Users’ Group packages mksh for Darwin, too.</li>
<li class="cr">Frugalware Linux contains a broken mksh package; the build logs show
 the problem is on their side. (XXX Someone has any URL for us?)</li>
<li class="cr">Olivier Duchateau provides Slackware/Zenwalk GNU/Linux <a
 href="http://www.errements.net/slackbuilds/mksh/">packaging</a> for mksh</li>
<li class="cr"><img class="fr" width="68" height="64" alt="[OpenSolaris logo]"
 src="@@RELPATH@@pics/logos/sunos.png" />(Open)Solaris <a
 href="http://www.greenviolet.net/projects/general-open-source/mksh.gv">packages</a>
 exist courtesy of Matt “lewellyn” Lewandowsky</li>
<li class="cr"><img class="fr" width="109" height="64" alt="[OpenPKG logo]"
 src="@@RELPATH@@pics/logos/openpkg.png" />Apparently, there is an <a
 href="http://www.openpkg.org/product/packages/?package=mksh">OpenPKG
 package</a> as well</li>
<li class="cr"><a href="http://svn.rpmforge.net/svn/trunk/rpms/mksh/mksh.spec">Dag
 Wieers</a> has an RPMforge package too, based on Fedora’s by Robert Scheck</li>
<li class="cr"><img class="fr" width="96" height="64" alt="[PLD Linux logo]"
 src="@@RELPATH@@pics/logos/pld.png" />The <a
 href="http://cvs.pld-linux.org/cgi-bin/cvsweb.cgi/packages/mksh/mksh.spec">PLD
 Linux Distribution</a> also has one</li>
<li class="cr">There are probably many more, please drop us a note!</li>
<li><a href="http://linux.softpedia.com/get/System/Shells/MirBSD-Korn-Shell-24602.shtml">Softpedia</a>
 lists mksh, just like the FSF/UNESCO directory.</li>
<li><strong>Missing packaging:</strong> SuSE native (use OBS for now),
 MacPorts (none at all), Mandriva (use OBS; being worked on), OpenEmbedded
 (being worked on), iPhoneOS (compile yourself; being worked on), Knoppix and
 SIDUX (just add them), Nexenta (need a contact person), Arch native (use
 AUR), PC-BSD (use pkgsrc® or so; need a contact person for PBI), OpenSolaris
 (being worked on), OpenBSD (use unofficial port), BeOS (maybe broken) / Haiku,
 formal/public/official SlackBuild or even part of Slackware (worked on),
 Plan 9 (slightly broken), Syllable Desktop (broken, kernel issue, may have
 been fixed in the meantime), Pardus (maybe being worked on?), NetBSD base
 system (under discussion; pkgsrc® has it), Maemo/MeeGo, Palm WebOS, ...</li>
</ul>
<p>These packages are not official and have not always been tested by mksh
 developers; please keep this in mind.</p>

<h2 id="caveat">Users' Upgrade Caveat</h2>
<p>This does not necessarily list new features, only these which users
 should be aware of for existing scripts.</p>
<p id="c39c">R39c: Evaluation of things like <tt>${foo:-bar}</tt> and
 <tt>"${foo+bar}"</tt> now behave standards-compliant (SUSv4) and more
 like all other shells, sans bugs. In particular, if a <tt>${}</tt>
 expression is double-quoted, the apostrophe/single quote loses its
 special meaning within, whereas it still acts as quote character if
 the expression is not double quoted. Other special characters' meanings
 have been updated to match standardised/expected behaviour.</p>
<p id="c39b">R39b: Due to a lot of bugfixes and some enhancements, take
 care when upgrading. The realpath builtin is now always available. There
 are now both “±o sh” and “±o posix”, and they <a href="#r39b">differ</a>
 (scroll down to almost the end of the R39b changelog). In numeric expressions,
 “'a'” is an alternative to “1#a” like in ksh93; “$'…'” expanded strings are
 now also supported. Some constructs parse more loosely, and things like
 “function stop () {” work now. <tt>MKSH_SMALL</tt> removes <em>much</em>
 more functionality than it used to. <tt>set +o arc4random</tt> is no longer
 possible (either it's there and used, or it's not). "mksh /tmp/horsies" now
 exits 127 ipv 1 (ENOENT). 「((foo) || bar)」 and 「((foo) | (bar))」 work
 now. Lazy evaluation of ternary operations is fixed. In '-o sh' mode, echo
 does not expand backslashes any more. In '+o sh' mode, “set -- $(false)”
 POSIXly correctly returns 0 (and breaks getopt(1) in traditional usage
 mode). Changes of variables inside Bourne style functions affect the
 caller's environment. “eval $(false)” also returns 0. “±U” is now honoured
 on an interactive shell's command line. Finally, the getopts builtin now
 behaves standards-compliant: even on an unknown option, <tt>OPTIND</tt>
 is incremented (think “getopts "ab:c" ch” and “script -a -I foo bar” in
 contrast to “script -a -- -I foo bar” – mkdep(1) was <a
 href="http://marc.info/?m=125598551928046">affected</a>, as will be <a
 href="http://marc.info/?m=125598548027997">every script</a> that does not
 abort in the <tt>(\?)</tt> or <tt>(*)</tt> case).</p>
<p id="c39">mksh R39 has user-visible changes regarding “set -u” (“set -o
 nounset”) and alias/function name conflicts regarding whitespace before
 parenthesēs.</p>

<h2 id="clog">Recent Changes</h2>
<p>Changes in the current (unreleased) development version:</p><ul>
 <li>Begin porting mksh to the <a href="http://9fans.net/">Plan 9</a>
  ANSI’n’POSIX Environment (not finished)</li>
 <li>Port to <a href="http://www.syllable.org/">Syllable</a> (again much
  improved; support now en par with Plan 9’s, thanks to Anthony Morphett
  &lt;awmorp@gmail.com&gt; – maybe the rest is a kernel bug?)</li>
 <!-- li>Import the GNU bash- and zsh-style ability to get and set multiple
  limits in a single invocation from oksh (thanks millert) -->
 <li>[tg] Correct small mistakes in manpage and build script</li>
 <li>[ahoka, tg, stippi, bonefish] Port to <a
  href="http://www.haiku-os.org/">Haiku</a> (and probably, implicitly,
  BeOS; this is not tested though)</li>
 <li>[tg, stippi] Add Haiku specific RLIMIT_NOVMON as ‘V’ to ulimit builtin</li>
 <li>[tg] Let Build.sh cope with dirname(1) unavailability</li>
 <li>[tg] In the Emacs editing mode, hi-bit7 octets are now considered
  “motion characters” for word boundaries – Esc+b, Esc+f, ^W, …</li>
 <li>[tg] Make EXECSHELL default configurable at compile time (embedded)</li>
 <li>[tg] If MKSH_SMALL do not compile in “set -o bgnice” by default</li>
 <li>[tg] Rework how RLIMIT_{AS,RSS,VMEM} map to ‘m’ and ‘v’ ulimits</li>
 <li>[tg] Add some more OS specific limits seen in zsh</li>
 <li>[tg] SUSv4 ${v=a\ b} and "${v=a\ b}" and ${v-a\ b} compliance, tests</li>
 <li>[tg] Make "~/.mkshrc" path configurable at compile time (embedded)</li>
 <li>[tg] Fix SUNWcc 12.1 error message scan in build phase=u</li>
 <li>[tg, Johannes Sixt, Geoff Clare] Fix variable assignment scope during
  command execution (expansion vs. assignment execution environment);
  [Herbert Xu, Geoff Clare] Add more regression tests for this</li>
 <li>[tg] Fix single quotes in "${foo#bar}" (differs from "${foo-bar}")</li>
 <li>[oksh] Fix mknod(8) usage message: b|c are <em>not</em> optional</li>
 <li>[tg, oksh] Fix "${x#?}" expansion when quoted (quotes, space)</li>
 <li>[tg] Make default temporary directory configurable at compile time</li>
 <li>[tg] Fix performance deficiencies in the built-in realpath function</li>
 <li>[tg] Deprecate Build.sh <tt>-longoptions</tt> in favour of short ones:
  <tt>-valgrind</tt> becomes <tt>-g</tt> (like debug), <tt>-combine</tt> and
  <tt>-llvm</tt> become <tt>-c {combine,llvm}</tt> and the LLVM optimiser
  flags are passed via <tt>-O</tt> = <tt>-o -std-compile-opts</tt></li>
 <li>[tg] New Build.sh options <tt>-c dragonegg</tt> (for using the LLVM <a
  href="http://dragonegg.llvm.org/">plugin</a> to GCC 4.5 with inter-module
  optimisation), <tt>-v</tt> (version)</li>
 <li>[tg] Document another way to get a coloured PS1 in the manpage</li>
 <li>[tg] Disallow some more kinds to trim a vector; Debian #581867</li>
 <li>[oksh] Simplify some code; RCSID and comment sync with OpenBSD ksh</li>
 <li>[oksh] Apply diff from manuel giraud to keep track of LINENO in a trap</li>
 <li>[tg] Remove arc4random(3) functionality; seed an LCG depending on the
  OS doing Address Space Layout Randomisation; speed up (on MirBSD/OpenBSD,
  sysctl(3) KERN_ARND will still be used during seeding; with -DMKSH_A4PB,
  use of arc4random_pushb(3) e.g. for seeding on Cygwin can be forced)</li>
 <li>[tg] Fix spelling in <tt>dot.mkshrc</tt></li>
 <li>[tg] Implement “live” window resize for the Emacs editing mode</li>
 <li>[tg] More fixes for bugs found by Valgrind and LLVM+Clang scan-build</li>
 <li>[tg] For script compatibility support “set ±o arc4random” during a
  transition period until R40 is out (but issue a warning to stderr)</li>
 <li>[oksh] Add <tt>(</tt>, <tt>)</tt>, <tt>((</tt> to reserved words in
  the manual page and fix some formatting errors with GNU groff’s mdoc</li>
 <li>[tg] Make printf.c.1.15 use mksh’s shf_* routines instead of stdio</li>
 <li>[tg] Fix <tt>-Wc++-compat</tt> except implicit casts from/to "void *"</li>
</ul>
<p id="r39c">mksh R39c is an important minor bugfix release:</p><ul>
 <li>[tg] Build system, code, docs and testsuite cleanup, also style(9)</li>
 <li>[tg] Build.sh now requires people to whitelist conftest*.c</li>
 <li>[tg] AIX builds no longer pull in libcrypt uselessly by default</li>
 <li>[tg] Parse and evaluate <tt>${parameter op word}</tt> correctly</li>
 <li>[tg] Fix possible SIGSEGV in interactive mode <tt>bind</tt> builtin due
  to mis-optimisation of gcc combined with a bogus prototype; discovered by
  Grml.org's Frank Terbeck (ft), thanks!</li>
 <li>[tg] Prevent Build.sh from accidentally removing <tt>mksh.1</tt></li>
</ul>
<p id="r39b">mksh R39b is a major stability and bugfix update:</p><ul>
 <li>[tg] Clean up some more strict *roff or compiler warnings: dashes,
  undefined macros; casting errors (constness, signedness, type width/class)
  and catch possibly unaligned pointer dereferences early; remove code/rodata
  redundancies, plug memory leaks</li>
 <li>[smultron] Tweak the manual page: point out the word “colour”</li>
 <li>[tg] Optimise dot.mkshrc DJB’s CDB hash implementations; add Bob
  Jenkins’ one-at-a-time hash (standard and leading-bit initialised); fix
  signedness in expressions; let the hashes use stdin if "$*" is empty, like
  Lb64{en,de}code; use “[[ -o utf8-mode ]]” ipv “[[ $- = *U* ]]”</li>
 <li>[tg] Build.sh portability fixes: missing prerequisite headers; ensure
  $CC is never called without $CFLAGS; fix <tt>test.sh</tt>, et al.</li>
 <li>[tg] Optimise internal variable representation; use one-at-a-time hash;
  cache hash values for faster resizing at zero memory cost; clean up hash
  table (keytab) code; switch hash table collision resolution algorithm to
  Python’s; prepare for later changes (commented out)</li>
 <li>[tg] Fix type errors in the source code (int → bool, size_t,
  mksh_uari_t)</li>
 <li>[tg] Fix “${foo:bar:$baz}” not working (missing substitute() call)</li>
 <li>[tg] Implement “typeset ±a” as nop</li>
 <li>[tg] Support ksh93-like “${!foo[@]}” listing the <em>keys</em> (indicēs)
  of all set array elements – zsh does it too (${(k)foo}), bash4 can’t :þ</li>
 <li>[tg] Support bash/ksh93-like “array=([key]=value …)” and (additionally)
  “set ±A array -- [key]=value …” to directly specify indicēs to use</li>
 <li>[tg] Document the optional, unsupported, printf(1) builtin in TFM</li>
 <li>[tg] Replace realpath(3) dependency and internally used get_phys_path()
  pdksh code with own implementation; always offer the realpath builtin</li>
 <li>[tg] Implement nameref='typeset -n' (bounded variables) like AT&amp;T
  ksh93 but with mksh-style nested/dynamic scoping and on-use resolving;
  they cannot currently be stored in an array though</li>
 <li>[tg] Add “chdir” builtin doing the same as the “cd” special builtin</li>
 <li>[tg, David Korn] Document more differences between mksh (and pdksh)
  and AT&amp;T ksh (or, more specific, ksh88, ksh93) in the manual page</li>
 <li>[tg] Support “'a'” as an alternative to “1#a”, like ksh93 does</li>
 <li>[tg] Add ksh’s “test -o ?foo”: true if “foo” is a valid shell option,
  where “foo” can be “xtrace” or “-x” or “+x” (these three are equivalent)</li>
 <li>[tg] Support “$'…'” backslash-expanding single-quoted strings, as
  requested by David G. Korn, with almost the same syntax and semantics</li>
 <li>[tg] Unify backslash expansion code (C style vs. print builtin mode)</li>
 <li>[tg] Support “function stop () {” bashism</li>
 <li>[tg] For several items in the source code that require order to be
  kept, provide it from multiply-included header files; sort correctly</li>
 <li>[tg] Get rid of unneeded FMONITOR (-m) for shells without job control;
  sync list of flags, comments and manpage with reality</li>
 <li>[tg] If MKSH_SMALL, reduce size by removing editor functionality</li>
 <li>[tg] Support VT100 emulator style {Ctrl,Alt}-CurLeft/Right keycode
  sequences with new <tt>vt100-hack</tt> emacs bind function (LP: #355883)</li>
 <li>[cnuke, tg] Remove more, like GNU bash extensions, from MKSH_SMALL</li>
 <li>[tg] Remove more functionality, such as Emacs command line editing mode
  bind key macros, and other extensions, from MKSH_SMALL to help floppies</li>
 <li>[tg] Make forking and subshells less expensive wrt. random state</li>
 <li>[tg] Build and source code fixes for / caught by SUNWcc, HP aCC, pcc,
  DEC ucode cc (MIPS), GCC, LLVM clang</li>
 <li>[tg] Make undef/def MKSH_NOVI into 0/1 MKSH_S_NOVI build flag</li>
 <li>[tg] Get rid of "U getenv" in nm(1) output, we already import environ</li>
 <li>[tg] Simplify $RANDOM handling: reads are now either arc4random(3) (if
  available: set +o arc4random is no longer possible) or an LCG; writes are
  arc4random_pushb(3) if available for explicit writes, arc4random_addrandom(3)
  otherwise, or another one-at-a-time hash feeding the LCG; furthermore, RANDOM
  is now always exported to and imported from (implicit read: no push to kernel
  done) the environment vector on startup and spawning</li>
 <li>[tg] Internal code cleanup, optimisation, moves to different files;
  dead/commented out code removal; code beautification</li>
 <li>[tg] Document mksh does not exactly use OPTU-8/OPTU-16 in the manpage,
  as well as when characters, octets, or screen columns are used</li>
 <li>[tg] Fix exit 127 on "mksh /tmp/horsies" ipv of 1 on ENOENT, #548744</li>
 <li>[Clint Adams] Fix typos in the testsuite</li>
 <li>[tg, Clint Adams] Begin a shared testsuite for mksh and posh</li>
 <li>[tg] Make 「((foo) || bar)」 and 「((foo) | (bar))」 work</li>
 <li>[tg] Fix lazy evaluation of assignments by ternary operator, #445651</li>
 <li>[tg] Work around Cygwin bugs (quirks) hindering the testsuite</li>
 <li>[tg] In FSH mode, “echo [-n] 'foo\x40bar'” shall not be expanded</li>
 <li>[tg] Let <tt>Build.sh</tt> run with AIX bsh (SVR3 Bourne Shell)</li>
 <li>[tg] Let <tt>set -- $(false); echo $?</tt> return 0 (POSIXly correct)
  in FSH mode, 1 (needed for getopt(1) support) otherwise</li>
 <li>[tg] Changes of variables inside Bourne style POSIX functions indeed
  affect the current execution environment (of the function caller)</li>
 <li>[tg] Fix getopts behaviour (sync with AT&amp;T ksh93 not ksh88)</li>
 <li>[tg] “eval $(false)” shall return 0 (Debian Closes: #550717)</li>
 <li>[tg] Ensure that <tt>/* apo'strophes in comments */</tt> work</li>
 <li>[tg] New <tt>Build.sh</tt> flag <tt>-M</tt> to not compile but spit out a
  <tt>Makefrag.inc</tt> file from the current build environment, such as the
  (cross)compiler, CFLAGS, LDFLAGS, etc. which then can be sourced by e.g. the
  Android NDK, or built with make(1) – BSD make and GNU make have been tested,
  but almost all makes should work if the source and build directories are the
  same or VPATH is supported at least (use of this option is discouraged)</li>
 <li>[tg] Overhaul and simplify handling of (special) variables</li>
 <li>[tg] Further reduce memory (code/data) and import footprint</li>
 <li>[tg] Use functions without <tt>PATH_MAX</tt> limit on GNU/Hurd</li>
 <li>[tg] Fix tab completing pathnames containing ‘:’, ‘=’, ‘$’ or ‘`’</li>
 <li>[tg] Support ‘-T &lt;tty&gt;’ even if <tt>MKSH_SMALL</tt> and fix it</li>
 <li>[tg] Remove "which" alias "whence -p" to allow "which -a" in
  <tt>dot.mkshrc</tt> and add more examples, some commented out</li>
 <li>[tg] Fix print_columns() issue with displaying items where characters
  had differing number of octets and columns, and the off-by-one which had
  hidden this problem with 2-octet 1-column and 3-octet 2-column chars</li>
 <li>[tg] Beautify the manpage in both AT&amp;T nroff and GNU groff</li>
 <li>[tg] Fix null-expansion of “${x%?}” if <tt>$x</tt> is unset</li>
 <li>[tg] Make some globbing (<tt>${x%?}</tt>) operate on characters instead
  of octets; update manual page to reflect that others still do and remove
  wording that let people think we’d ever support POSuX character classes</li>
 <li>[tg] New <tt>${%foo}</tt> returning width of $foo in screen columns,
  or -1 if $foo contains an ASCII/latin1/Unicode C0/C1 control character</li>
 <li>[tg] Fix subtle possible portability problem wrt. <tt>CHILD_MAX</tt></li>
 <li>[tg] Honour <tt>±U</tt> on command line of an interactive shell</li>
 <li>[tg] Fix dead stores and other bugs pointed out by the Clang static
  analyser; put assertions in places it has false positives (-DDEBUG)</li>
 <li>[tg] Plug uninitialised memory access and possible out-of-bounds read
  of a buffer caught by Valgrind; change one memcpy(3) to memmove(3) where
  srcbuf and dstbuf overlap; place (-DDEBUG) workaround for false positive</li>
 <li>[tg] HP aCC: change IA64 default from forced <tt>+DD64</tt> to using the
  default; support Bundled compiler; fix double-<tt>const</tt> warning</li>
 <li>[tg] Rework <tt>__attribute__</tt> compiler capability check</li>
 <li>[tg] Apply errno save/restore related fix from (sync with) oksh</li>
 <li>[tg] Build.sh: output message when switching from autoconfiguration to
  building / output generation (requested by Matt “lewellyn” Lewandowsky);
  use “conftest.c” ipv “scn.c” (to please ccache); check for “-xipo” with
  SUNWcc (suggested by lewellyn as well)</li>
 <li>[tg] Allow “unset foo[*]” (keep attributes) and “typeset foo[*]” (for
  forward-compatibility; in R39b it’s the same as “typeset foo”)</li>
 <li>[tg] When persistent history is enabled (but not MKSH_SMALL) and used,
  intertwine the shells concurrently accessing $HISTFILE better ⇒ sync on
  empty or duplicate line as well (requested by Maximilian “mxey” Gaß)</li>
 <li>[tg] Split off “set ±o posix” and “set ±o sh” again, to be somewhat
  more compatible to various old or vendor versions of pdksh and mksh:<ul>
   <li>MKSH_BINSHREDUCED sets FSH but not FPOSIX</li>
   <li>MKSH_MIDNIGHTBSD01ASH_COMPAT depends on FSH but not FPOSIX</li>
   <li>The <tt>echo</tt> built-in behaves the same for FPOSIX and FSH</li>
   <li>File descriptors &gt; 2 are not closed for both FPOSIX and FSH</li>
   <li>Both “set -o posix” and “set -o sh” call “set +o braceexpand”</li>
   <li>In contrast to R39 and below, the errorlevel of “set -- $(getopt ab:c
    "$@")” is now the same in ksh and FPOSIX mode (0) and only FSH will use
    the errorlevel of <tt>getopt</tt> (used to be the other way round)</li>
  </ul></li>
 <li>[tg] Document some more shortcomings in the mksh(1) manual page</li>
 <li>Contributed <tt>printf.c</tt> fixes:<ul>
   <li>[tg] Make printf(1) builtin use “$'…'” mode, like ksh93</li>
   <li>[tg] Fix const-cleanliness</li>
  </ul></li>
 <li>Contributed <tt>arc4random.c</tt> fixes:<ul>
   <li>[tg] Fix buffer overflows in the Win32 codepath of the contributed
    <tt>arc4random.c</tt> file and limit the rate of expensive CryptGenRandom
    calls if we have other (seed in registry key) entropy pools</li>
   <li>[tg] Fix uninitialised memory access caught by Valgrind</li>
  </ul></li>
 <li>[tg] New <tt>Build.sh</tt> flag <tt>-valgrind</tt> since I’m lazy</li>
</ul>
<p id="r39">mksh R39 evolved into these through various means:</p><ul>
 <li>[tg] Shut up a bogus gcc warning during configuration process</li>
 <li>[tg] Spell <tt>AT&amp;T</tt> consistently in the source code</li>
 <li>[tg] Tweak mksh(1) manual page, from wbx@ and «lewellyn:#ksh»</li>
 <li>[tg] <tt>dot.mkshrc</tt>: fix <tt>$@</tt> vs. <tt>$*</tt> mix-up</li>
 <li>[tg] <tt>dot.mkshrc</tt>: add DJB cdb hash function</li>
 <li>[tg] Sync with oksh: fix Vi editing mode word erase handling, again</li>
 <li>[tg] Skip whitespace between POSIX style shell function name and its
  definition parenthesēs during detection if an alias of the same name
  already exists to be more robust (Debian Closes: #535970)</li>
 <li>[tg] Build system improvements for ACK and nwcc, both on Debian sid</li>
 <li>[tg] Fix spelling error in changelog discovered by Lintian</li>
 <li>[tg] Aligh “set -o nounset” / “set -u” behaviour with future POSIX
  standard, as discussed with GNU bash maintainers, David Korn from AT&amp;T
  ksh93, and The Open Group; prompted by use in Debian; Closes: #539538</li>
 <li>[tg] add an unsupported way to make printf(1) a builtin</li>
 <li>[tg] Build system and regression test code and comment improvements:
  better and more comments matching reality better; more reliability w.r.t.
  passed CPPFLAGS; more of the MKSH_SMALL changes may be overridden, all of
  them are now enumerated on the webpage; fixed some breakage; portability</li>
 <li>[tg] MKSH_NOPWNAM and MKSH_SMALL will now both disable the <tt>~fac/</tt>
  (homedir) expansion code wholly if defined, not just getpwnam(3) calls</li>
 <li>[tg] shells without job control no longer define the standard “stop” and
  “suspend” aliases (they are pointless anyway); regression tests know</li>
 <li>[tg] use system RCS ID macros on MirBSD if decent enough</li>
 <li>[tg] shut up bogus gcc 4.5/trunk warnings caused by over-optimisation</li>
 <li>[tg] restore ANSI C compilability broken in R38 (speed up, even)</li>
 <li>[tg] use memcpy(3) ipv strlcpy(3) if possible and safe and secure</li>
</ul>
<p id="r38c">mksh R38c contains the following fixes:</p><ul>
 <li>[tg] Fix regression tests on OSes insisting on a shebang (Cygwin)</li>
 <li>[Sean Boudreau] QNX 6.4.2 ed(1) is said to have the bugs fixed</li>
 <li>[tg] <tt>Build.sh</tt> bugfixes: <tt>-DMKSH_BINSHREDUCED</tt> can also
  be given without <tt>-DMKSH_SMALL</tt>; allow <tt>HAVE_REALPATH=x</tt> and
  <tt>HAVE_REVOKE=x</tt> in the environment to re-enable these even if
  <tt>-DMKSH_SMALL</tt> disables them by default, like mknod already did</li>
 <li>[tg] <tt>-DMKSH_ASSUME_UTF8=0</tt> skips the environment checks, like
  <tt>-DMKSH_ASSUME_UTF8=1</tt>, but disables the <tt>utf8-mode</tt></li>
 <li>[tg] Apply some more KNF – style(9) – to the source; clean it up
  and further optimise for small size</li>
 <li>[OpenBSD] Fix segfaults caused by missing check for end of input
  in the tokeniser on “let --” and other input</li>
 <li>[OpenBSD] Make Vi editing mode <tt>^W</tt> behave like Emacs mode’s</li>
 <li>[tg] If no killpg(3) is available, use kill(2) and hope it works</li>
 <li>[tg] <tt>-DMKSH_NO_LIMITS</tt> skips trying to build the ulimit code</li>
</ul>
<p id="r38b">mksh R38b fixes the following problems:</p><ul>
 <li>[André Wösten] Add __NO_EXT_QNX to avoid picking up the wrong
  waitfor() from &lt;libutil.h&gt; in (while porting to) QNX 6.4</li>
 <li>[tg] Plug memory corruption issue introduced in R38</li>
 <li>[tg] Amend <tt>dot.mkshrc</tt> with a base64 en-/decoder in shell</li>
 <li>[tg] Import a manpage fix via OpenBSD from Alan R. S. Bueno</li>
</ul>
<p id="r38">mksh R38 comes with these changes and fixes applied:</p><ul>
 <li>[tg] Improve regression test output debugging</li>
 <li>[tg] Fix &lt;libutil.h&gt; prerequisites on MidnightBSD in mirtoconf</li>
 <li>[tg] Mention that RedHat BZ#496791 cannot currently be fixed in the
  manpage by discouraging use of apostrophes in comments in comsubs; add
  appropriate (expected-fail) regression tests</li>
 <li>[tg] Sync with OpenBSD ksh (mostly a no-op)</li>
 <li>[James Butler] Add search-history-up and search-history-down keybindings
  (tcsh-like) to the Emacs command line editing mode</li>
 <li>[tg] Bind new search-history-{up,down} to ANSI PgUp and PgDn keys</li>
 <li>[tg] Document ANSI default keybindings (↑↓←→ Home End Del PgUp PgDn)
  in the mksh(1) manual page as well</li>
 <li>[tg] Optimise internal UTF-8 handling code for size and reusability</li>
 <li>[tg] Incompatible change: <tt>${foo:1:2}</tt> and <tt>${#foo}</tt> now
  operate on characters, not on bytes. Characters are octets (<tt>set +U</tt>)
  or (utf8-mode) MirOS OPTU-8 multibyte characters (<tt>set -U</tt>)</li>
 <li>[tg] Improve regression tests relating to <tt>${foo:1:2}</tt> and
  <tt>${#foo}</tt> and <tt>let wc=1#x</tt> and utf8-mode</li>
 <li>[tg] Use per-file copyright notices, move global text to manpage</li>
 <li>[tg] Expose new MKSH_MIDNIGHTBSD01ASH_COMPAT ifdef; change it to
  only trigger if FPOSIX (or MKSH_BINSHREDUCED and <tt>/bin/sh</tt>)</li>
 <li>[tg] Remove already-dead “#if 0” style debugging code</li>
 <li>[tg] Change some code into a more portable fashion, optimise</li>
 <li>[tg] Allow <tt>[[ $foo ]]</tt> (ksh93 extension) mentioned by pgas</li>
 <li>[tg] Clean up mksh and the contributed <tt>arc4random.c</tt> for some
  conversion, enum and other warnings for gcc-snapshot trunk r147610</li>
 <li>[tg] Ensure no function uses more than 768 bytes of stack either</li>
 <li>[tg, wbx] Add extension to make “!string” lines work like in GNU bash</li>
</ul>
<p><a href="mksh_old.htm#clog">older changes</a></p>
EOF
mws_putfooter
exit 0
