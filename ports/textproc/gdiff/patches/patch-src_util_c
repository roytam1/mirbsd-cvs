$MirOS$
--- src/util.c.orig	Thu Feb 28 04:22:48 2002
+++ src/util.c	Tue Mar 25 21:49:23 2008
@@ -173,20 +173,21 @@ void
 begin_output (void)
 {
   char *name;
+  size_t namesz;
 
   if (outfile != 0)
     return;
 
   /* Construct the header of this piece of diff.  */
-  name = xmalloc (strlen (current_name0) + strlen (current_name1)
-		  + strlen (switch_string) + 7);
+  name = xmalloc ((namesz = strlen (current_name0) + strlen (current_name1)
+		  + strlen (switch_string) + 7));
 
   /* POSIX 1003.1-2001 specifies this format.  But there are some bugs in
      the standard: it says that we must print only the last component
      of the pathnames, and it requires two spaces after "diff" if
      there are no options.  These requirements are silly and do not
      match historical practice.  */
-  sprintf (name, "diff%s %s %s", switch_string, current_name0, current_name1);
+  snprintf (name, namesz, "diff%s %s %s", switch_string, current_name0, current_name1);
 
   if (paginate)
     {
@@ -215,7 +216,7 @@ begin_output (void)
 		close (pipes[0]);
 	      }
 
-	    execl (pr_program, pr_program, "-h", name, 0);
+	    execl (pr_program, pr_program, "-h", name, NULL);
 	    _exit (errno == ENOEXEC ? 126 : 127);
 	  }
 	else
@@ -226,10 +227,11 @@ begin_output (void)
 	      pfatal_with_name ("fdopen");
 	  }
 #else
-	char *command = xmalloc (sizeof pr_program - 1 + 7
-				 + quote_system_arg ((char *) 0, name) + 1);
+	size_t commandsz;
+	char *command = xmalloc ((commandsz = sizeof pr_program - 1 + 7
+				 + quote_system_arg ((char *) 0, name) + 1));
 	char *p;
-	sprintf (command, "%s -f -h ", pr_program);
+	snprintf (command, commandsz, "%s -f -h ", pr_program);
 	p = command + sizeof pr_program - 1 + 7;
 	p += quote_system_arg (p, name);
 	*p = 0;
@@ -711,8 +713,9 @@ analyze_hunk (struct change *hunk,
 char *
 concat (char const *s1, char const *s2, char const *s3)
 {
-  char *new = xmalloc (strlen (s1) + strlen (s2) + strlen (s3) + 1);
-  sprintf (new, "%s%s%s", s1, s2, s3);
+  size_t newsz;
+  char *new = xmalloc ((newsz = strlen (s1) + strlen (s2) + strlen (s3) + 1));
+  snprintf (new, newsz, "%s%s%s", s1, s2, s3);
   return new;
 }
 
