$MirOS$
--- source/amx/amx.c.orig	Tue Mar  4 10:13:23 2008
+++ source/amx/amx.c	Fri Aug  8 12:13:07 2008
@@ -42,7 +42,7 @@
 #include <stdlib.h>     /* for getenv() */
 #include <string.h>
 #include "osdefs.h"
-#if defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__
+#if defined __LINUX__ || defined BSD
   #include <sclinux.h>
   #if !defined AMX_NODYNALOAD
     #include <dlfcn.h>
@@ -52,7 +52,7 @@
     #include <sys/mman.h>
   #endif
 #endif
-#if defined __LCC__ || defined __LINUX__
+#if defined __LCC__ || defined __LINUX__ || defined __MirBSD__
   #include <wchar.h>    /* for wcslen() */
 #endif
 
@@ -396,7 +396,7 @@ typedef enum {
 #endif
 
 #if BYTE_ORDER==BIG_ENDIAN || PAWN_CELL_SIZE==16
-  static void swap16(uint16_t *v)
+  static void amx_swap16(uint16_t *v)
   {
     unsigned char *s = (unsigned char *)v;
     unsigned char t;
@@ -410,7 +410,7 @@ typedef enum {
 #endif
 
 #if BYTE_ORDER==BIG_ENDIAN || PAWN_CELL_SIZE==32
-  static void swap32(uint32_t *v)
+  static void amx_swap32(uint32_t *v)
   {
     unsigned char *s = (unsigned char *)v;
     unsigned char t;
@@ -428,7 +428,7 @@ typedef enum {
 #endif
 
 #if (BYTE_ORDER==BIG_ENDIAN || PAWN_CELL_SIZE==64) && (defined _I64_MAX || defined HAVE_I64)
-  static void swap64(uint64_t *v)
+  static void amx_swap64(uint64_t *v)
   {
     unsigned char *s = (unsigned char *)v;
     unsigned char t;
@@ -459,7 +459,7 @@ uint16_t * AMXAPI amx_Align16(uint16_t *
   assert_static(sizeof(*v)==2);
   assert(check_endian());
   #if BYTE_ORDER==BIG_ENDIAN
-    swap16(v);
+    amx_swap16(v);
   #endif
   return v;
 }
@@ -469,7 +469,7 @@ uint32_t * AMXAPI amx_Align32(uint32_t *
   assert_static(sizeof(*v)==4);
   assert(check_endian());
   #if BYTE_ORDER==BIG_ENDIAN
-    swap32(v);
+    amx_swap32(v);
   #endif
   return v;
 }
@@ -480,7 +480,7 @@ uint64_t * AMXAPI amx_Align64(uint64_t *
   assert(sizeof(*v)==8);
   assert(check_endian());
   #if BYTE_ORDER==BIG_ENDIAN
-    swap64(v);
+    amx_swap64(v);
   #endif
   return v;
 }
@@ -488,11 +488,11 @@ uint64_t * AMXAPI amx_Align64(uint64_t *
 #endif  /* AMX_ALIGN || AMX_INIT */
 
 #if PAWN_CELL_SIZE==16
-  #define swapcell  swap16
+  #define swapcell  amx_swap16
 #elif PAWN_CELL_SIZE==32
-  #define swapcell  swap32
+  #define swapcell  amx_swap32
 #elif PAWN_CELL_SIZE==64 && (defined _I64_MAX || defined HAVE_I64)
-  #define swapcell  swap64
+  #define swapcell  amx_swap64
 #else
   #error Unsupported cell size
 #endif
@@ -1174,12 +1174,12 @@ int AMXAPI amx_Init(AMX *amx,void *progr
   AMX_HEADER *hdr;
   int err,i;
   unsigned char *data;
-  #if (defined _Windows || defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__) && !defined AMX_NODYNALOAD
+  #if (defined _Windows || defined __LINUX__ || defined BSD) && !defined AMX_NODYNALOAD
     typedef int AMXEXPORT (_FAR *AMX_ENTRY)(AMX _FAR *amx);
     #if defined _Windows
       char libname[sNAMEMAX+8]; /* +1 for '\0', +3 for 'amx' prefix, +4 for extension */
       HINSTANCE hlib;
-    #elif defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__
+    #elif defined __LINUX__ || defined BSD
       char libname[_MAX_PATH];
       char *root;
       void *hlib;
@@ -1368,8 +1368,8 @@ int AMXAPI amx_Init(AMX *amx,void *progr
     return err;
 
   /* load any extension modules that the AMX refers to */
-  #if (defined _Windows || defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__) && !defined AMX_NODYNALOAD
-    #if defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__
+  #if (defined _Windows || defined __LINUX__ || defined BSD) && !defined AMX_NODYNALOAD
+    #if defined __LINUX__ || defined BSD
       root=getenv("AMXLIB");
     #endif
     hdr=(AMX_HEADER *)amx->base;
@@ -1377,7 +1377,7 @@ int AMXAPI amx_Init(AMX *amx,void *progr
     for (i=0; i<numlibraries; i++) {
       lib=GETENTRY(hdr,libraries,i);
       libname[0]='\0';
-      #if defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__
+      #if defined __LINUX__ || defined BSD
         if (root!=NULL && *root!='\0') {
           strcpy(libname,root);
           if (libname[strlen(libname)-1]!='/')
@@ -1395,7 +1395,7 @@ int AMXAPI amx_Init(AMX *amx,void *progr
           if (hlib<=HINSTANCE_ERROR)
             hlib=NULL;
         #endif
-      #elif defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__
+      #elif defined __LINUX__ || defined BSD
         strcat(libname,".so");
         hlib=dlopen(libname,RTLD_NOW);
       #endif
@@ -1409,7 +1409,7 @@ int AMXAPI amx_Init(AMX *amx,void *progr
         strcat(funcname,"Init");
         #if defined _Windows
           libinit=(AMX_ENTRY)GetProcAddress(hlib,funcname);
-        #elif defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__
+        #elif defined __LINUX__ || defined BSD
           libinit=(AMX_ENTRY)dlsym(hlib,funcname);
         #endif
         if (libinit!=NULL)
@@ -1445,7 +1445,7 @@ int AMXAPI amx_Init(AMX *amx,void *progr
       return !VirtualProtect(addr, len, p, &prev);
     }
 
-  #elif defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__
+  #elif defined __LINUX__ || defined BSD
 
     /* Linux already has mprotect() */
     #define ALIGN(addr) (char *)(((long)addr + sysconf(_SC_PAGESIZE)-1) & ~(sysconf(_SC_PAGESIZE)-1))
@@ -1522,7 +1522,7 @@ int AMXAPI amx_InitJIT(AMX *amx,void *co
 #if defined AMX_CLEANUP
 int AMXAPI amx_Cleanup(AMX *amx)
 {
-  #if (defined _Windows || defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__) && !defined AMX_NODYNALOAD
+  #if (defined _Windows || defined __LINUX__ || defined BSD) && !defined AMX_NODYNALOAD
     typedef int AMXEXPORT (_FAR *AMX_ENTRY)(AMX _FAR *amx);
     AMX_HEADER *hdr;
     int numlibraries,i;
@@ -1531,7 +1531,7 @@ int AMXAPI amx_Cleanup(AMX *amx)
   #endif
 
   /* unload all extension modules */
-  #if (defined _Windows || defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__) && !defined AMX_NODYNALOAD
+  #if (defined _Windows || defined __LINUX__ || defined BSD) && !defined AMX_NODYNALOAD
     hdr=(AMX_HEADER *)amx->base;
     assert(hdr->magic==AMX_MAGIC);
     numlibraries=NUMENTRIES(hdr,libraries,pubvars);
@@ -1544,14 +1544,14 @@ int AMXAPI amx_Cleanup(AMX *amx)
         strcat(funcname,"Cleanup");
         #if defined _Windows
           libcleanup=(AMX_ENTRY)GetProcAddress((HINSTANCE)lib->address,funcname);
-        #elif defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__
+        #elif defined __LINUX__ || defined BSD
           libcleanup=(AMX_ENTRY)dlsym((void*)lib->address,funcname);
         #endif
         if (libcleanup!=NULL)
           libcleanup(amx);
         #if defined _Windows
           FreeLibrary((HINSTANCE)lib->address);
-        #elif defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__
+        #elif defined __LINUX__ || defined BSD
           dlclose((void*)lib->address);
         #endif
       } /* if */
