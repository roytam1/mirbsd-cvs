$MirOS$
--- source/amx/amxprocess.c.orig	Fri Jan 25 16:46:01 2008
+++ source/amx/amxprocess.c	Fri Aug  8 13:43:06 2008
@@ -41,7 +41,7 @@
 #endif
 #if defined __WIN32__ || defined _Windows
   #include <windows.h>
-#elif defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__
+#elif defined __LINUX__ || defined BSD
   #include <unistd.h>
   #include <dlfcn.h>
   #include <sys/types.h>
@@ -104,7 +104,7 @@ static MODLIST ModRoot = { NULL };
 /* pipes for I/O redirection */
 #if defined __WIN32__ || defined _WIN32 || defined WIN32
   static HANDLE newstdin,newstdout,read_stdout,write_stdin;
-#elif defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__
+#elif defined __LINUX__ || defined BSD
   static int pipe_to[2]={-1,-1};
   static int pipe_from[2]={-1,-1};
   void *inst_ffi=NULL;          /* open handle for libffi */
@@ -157,7 +157,7 @@ static MODLIST _FAR *addlib(MODLIST *roo
       if (item->inst <= 32)
         item->inst = 0;
     #endif
-  #elif defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__
+  #elif defined __LINUX__ || defined BSD
     /* also load the FFI library, if this is the first call */
     inst_ffi=dlopen("libffi.so",RTLD_NOW);
     if (inst_ffi==NULL)
@@ -184,7 +184,7 @@ error:
     if (item->inst != 0) {
       #if defined __WIN32__ || defined _WIN32 || defined WIN32 || defined _Windows
         FreeLibrary((HINSTANCE)item->inst);
-      #elif defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__
+      #elif defined __LINUX__ || defined BSD
         dlclose((void*)item->inst);
       #else
         #error Unsupported environment
@@ -209,7 +209,7 @@ static int freelib(MODLIST *root, AMX *a
       assert(item->inst != 0);
       #if defined __WIN32__ || defined _WIN32 || defined WIN32 || defined _Windows
         FreeLibrary((HINSTANCE)item->inst);
-      #elif defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__
+      #elif defined __LINUX__ || defined BSD
         dlclose((void*)item->inst);
       #else
         #error Unsupported environment
@@ -220,7 +220,7 @@ static int freelib(MODLIST *root, AMX *a
       count++;
     } /* if */
   } /* for */
-  #if defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__
+  #if defined __LINUX__ || defined BSD
     if (amx==NULL && name==NULL && inst_ffi!=NULL)
       dlclose(inst_ffi);
   #endif
@@ -399,7 +399,7 @@ static cell AMX_NATIVE_CALL n_libcall(AM
   PARAM ps[MAXPARAMS];
   cell *cptr,result;
   LIBFUNC LibFunc;
-  #if defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__
+  #if defined __LINUX__ || defined BSD
     ffi_cif cif;
     ffi_type *ptypes[MAXPARAMS];
     void *pvalues[MAXPARAMS];
@@ -535,7 +535,7 @@ static cell AMX_NATIVE_CALL n_libcall(AM
      * function should remove the parameters from the stack)
      */
     result=LibFunc();
-  #elif defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__
+  #elif defined __LINUX__ || defined BSD
     /* use libffi (foreign function interface) */
     for (idx = 0; idx < paramidx; idx++) {
       /* copy parameter types */
@@ -670,7 +670,7 @@ static void closepipe(void)
       CloseHandle(write_stdin);
       write_stdin=NULL;
     } /* if */
-  #elif defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__
+  #elif defined __LINUX__ || defined BSD
     if (pipe_to[0]>=0) {
       close(pipe_to[0]);
       pipe_to[0]=-1;
@@ -706,7 +706,7 @@ static cell AMX_NATIVE_CALL n_procexec(A
     PROCESS_INFORMATION pi;
   #elif defined _Windows
     HINSTANCE hinst;
-  #elif defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__
+  #elif defined __LINUX__ || defined BSD
   	pid_t pid;
   #endif
 
@@ -763,7 +763,7 @@ static cell AMX_NATIVE_CALL n_procexec(A
     if (hinst<=32)
       hinst=0;
     return (cell)hinst;
-  #elif defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__
+  #elif defined __LINUX__ || defined BSD
     /* set up communication pipes first */
     closepipe();
     if (pipe(pipe_to)!=0 || pipe(pipe_from)!=0) {
@@ -833,7 +833,7 @@ static cell AMX_NATIVE_CALL n_procwrite(
     WriteFile(write_stdin,line,_tcslen(line),&num,NULL); //send it to stdin
     if (params[2])
       WriteFile(write_stdin,__T("\n"),1,&num,NULL);
-  #elif defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__
+  #elif defined __LINUX__ || defined BSD
     if (pipe_to[1]<0)
       return 0;
     write(pipe_to[1],line,_tcslen(line));
@@ -861,7 +861,7 @@ static cell AMX_NATIVE_CALL n_procread(A
         break;
       index++;
     } while (index<sizeof(line)/sizeof(line[0])-1 && line[index-1]!=__T('\n'));
-  #elif defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__
+  #elif defined __LINUX__ || defined BSD
     if (pipe_from[0]<0)
       return 0;
     do {
@@ -899,7 +899,7 @@ static cell AMX_NATIVE_CALL n_procwait(A
         Sleep(100);
       CloseHandle(hProcess);
     } /* if */
-  #elif defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__
+  #elif defined __LINUX__ || defined BSD
     waitpid((pid_t)params[1],NULL,WNOHANG);
   #endif
   return 0;
