$MirOS: ports/lang/pawn/toolkit/patches/patch-source_amx_amxargs_c,v 1.1.1.1 2008/08/08 15:53:57 tg Exp $
--- source/amx/amxargs.c.orig	Fri Jan 25 16:46:01 2008
+++ source/amx/amxargs.c	Fri Aug  8 19:58:31 2008
@@ -30,6 +30,7 @@
 #endif
 
 #include <ctype.h>
+#include <fcntl.h>
 #include <limits.h>
 #include <stdio.h>
 #include <stdlib.h>
@@ -92,8 +93,8 @@ static const TCHAR *rawcmdline(void)
   #if defined __WIN32__ || defined _WIN32 || defined WIN32
   #elif defined _Windows || defined __MSDOS__
     static char cmdbuffer[128];   /* DOS & Windows 3.1 are never in Unicode mode */
-  #elif defined __LINUX__
-    static char cmdbuffer[1024];  /* some arbitrary maximum */
+  #elif defined __LINUX__ || defined BSD
+    static char cmdbuffer[32768];  /* some arbitrary maximum */
   #endif
   const TCHAR *ptr;
   int skip = 0;
@@ -115,26 +116,32 @@ static const TCHAR *rawcmdline(void)
       if ((cmd == strchr(cmdbuffer, '\r')) != NULL)
         *cmd = '\0';    /* also erase \r after the last option (if any) */
       cmdline = cmdbuffer;
-    #elif defined __LINUX__
+    #elif defined __LINUX__ || defined BSD
       /* Options in /proc/<pid>/cmdline are delimited with '\0' characters
        * rather than spaces.
        */
-      FILE *fp;
+      int fd;
       size_t fsize;
       sprintf(cmdbuffer, "/proc/%d/cmdline", getpid());
-      if ((fp = fopen(cmdbuffer, "r")) != NULL) {
+      if ((fd = open(cmdbuffer, O_RDONLY)) >= 0) {
         char *ptr;
-        fseek(fp, 0, SEEK_END);
-        fsize = ftell(fp);
-        fseek(fp, 0, SEEK_SET);
+        if ((fsize = read(fd, cmdbuffer, sizeof (cmdbuffer))) == (size_t)-1) {
+	  close(fd);
+	  cmdbuffer[0] = '\0';
+	  return (cmdbuffer);
+	}
+	close(fd);
         if (fsize >= sizeof cmdbuffer)
-          fsize = sizeof cmdbuffer - 1;
-        fread(cmdbuffer, 1, fsize, fp);
-        fclose(fp);
+          fsize = sizeof cmdbuffer - 2;
+	if (cmdbuffer[fsize - 1] != '\0')
+		cmdbuffer[fsize++] = '\0';	/* BSD */
         cmdbuffer[fsize] = '\0';        /* terminate with double-zero */
         /* convert '\0' characters to spaces, for uniform parsing */
-        for (ptr = cmdbuffer; *ptr != ' '; ptr = strchr(ptr, '\0') + 1)
-          *ptr = ' ';
+	ptr = cmdbuffer;
+	do {
+		*ptr = ' ';
+		ptr = strchr(ptr, '\0');
+	} while (ptr[1]);
         cmdline = cmdbuffer;
         skip++;
       } /* if */
