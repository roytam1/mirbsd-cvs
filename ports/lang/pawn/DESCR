Porter's notes

These programmes needs the /proc filesystem mounted with -o linux and
accessible.

An embedded scripting language formerly called Small

pawn is a simple, typeless, 32-bit extension language with a C-like
syntax. A pawn "source" program is compiled to a binary file for optimal
execution speed. The pawn compiler outputs P-code (or bytecode) that
subsequently runs on an abstract machine. Execution speed, stability,
simplicity and a small footprint were essential design criteria for both
the language and the abstract machine.

Introduction

An introduction to the pawn language and abstract machine from a pro-
grammer's perspective was published in the October 1999 issue of Dr.
Dobb's Journal -- but at the time, the language was called Small. More
verbose than the article, and more appropriate for non-expert pro-
grammers, is the manual. The manual contains a brief (tutorial) overview
of the language, a language reference, programming notes on the abstract
machine, casual notes about the why and how of many language features,
and reference material.

 * pawn is a simple, C-like, language.
 * pawn is a robust language with a compiler that performs a maximum of
   static checks, and an abstract machine with (static) P-code verifi-
   cation and dynamic checks.
 * For porting purposes, pawn is written in ANSI C as much as possible;
   Big Endian versus Little Endian is handled.
 * To suit internationalization and localization, pawn supports Unicode
   (UCS-4) and UTF-8, as well as codepages. The compiler can convert
   source code entered in a particular codepage to Unicode; it also
   supports source code files in UTF-8 format.
 * pawn is quick (especially with Marc Peter's assembler implementation
   and/or his "just-in-time" compiler)
 * pawn is small. It has been fitted on an Atmel ATmega128 microcon-
   troller, Philips LPC2138 and LPC2106 microcontrollers (ARM7TDMI core
   with 32 kiB RAM), as well as on a Texas Instrument's MSP430F1611
   (MSP430 core with 10 kiB RAM and 48 kiB Flash ROM). Using code over-
   lays that are loaded on demand, pawn is able to run large scripts in
   little memory.
 * Documenting the source code can be done with "documentation com-
   ments"; the pawn compiler extracts those comments, combines them
   with information it deduces from the source code and writes an XML
   file that is immediately viewable (and printable) with a web browser.
 * pawn supports states and automatons in the language, including
   state-local variables.
 * pawn is free and published under the zLib license (this is a liberal
   license, and it allows using pawn in commercial applications).
 * More features... see the separate "feature page"

Why pawn now that there is Java, Lua, REXX, and countless others? Well,
when I needed a language toolkit whose executable code can be embedded
in resource files or animation file formats, that had a good interface
to native functions, that added little overhead to the main application
and could run on platforms and microcontrollers with (very) little RAM,
and that was pretty fast, I could not really find an existing toolkit
that fitted my needs. See also a list of language features.

Unlike many languages, pawn is not intended to write complete full-scale
applications in. pawn's purpose is to script the functionality provided
by an application or by a device. It is in purpose similar to Micro-
soft's "Visual Basic for Applications", only quicker and smaller (and
without the installation hassle).

pawn has been publicly available since 1998, and it has been steadily
improving: more error checking, several bugs slashed, new features, and
an increase in performance. There are still regular updates and patches:
to fix bugs, to add features, or simply to enhance the ease-of-used.
Recently, I adapted an existing IDE, Al Steven's Quincy, to work with
the pawn tool set.

A couple of other points are worth mentioning:
 * The current version of pawn is provided as is. Although I encourage
   you to send in (detailed) bug reports or requests for additions, I
   do not promise free support. Fortunately, other individual program-
   mers are taking up pawn and modifying it for their needs. With their
   help (and perhaps yours as well), pawn will continue to evolve.
 * The pawn toolkit consists of a compiler and an abstract machine (or
   "virtual machine"). In the default setup, the abstract machine is
   embedded in an application (for easy interfacing with the applica-
   tion's objects and for best performance), while the compiler is a
   separate executable that the application launches as an external
   process.

When embedding the compiler into an application, please note that the
main function of the compiler, pc_compile(), is not re-entrant. In other
words, compile only one script at a time.

Support

Please visit the pawn forum http://www.compuphase.com/bitboard/forum.php
for any questions that you have about pawn. If you are using pawn as
part of some product, you may get more respons if you ask your questions
on the forum of the product. (See also the page Where is pawn used?).

pawn is a free product that is maintained primarily in spare time. We
make no money from the product, neither from the software, nor from the
manual, nor from support. I therefore need to ask you for patience when
we are slow in responding to your questions or. Obviously, if you really
need support or a custom version of pawn, you can always hire us.

Help requested

1. As I said, my first priority is getting the bugs out. If you come
   across bad code generation problems or other errors, send me the
   shortest program that illustrates the bug. I will be grateful for it.
2. pawn is reported to run under Microsoft DOS, all versions of Micro-
   soft Windows (including Windows CE), Linux, MacOS, FreeBSD, XBox,
   PlayStation, FreeRTOS (on an ARM7-architecture), and µC/OS-II. If you
   have been able to port pawn to other environments, please send me the
   changes. Others will be grateful for it.
3. The documentation is getting better, I think, but I am not a good
   critic of my own work. Comments on my writing (especially errors and
   obscure paragraphs) are appreciated.

To contact me, send e-mail to <thiadmer@compuphase.com>. Note, however,
that I am regularly abroad and sometimes need 8 days to answer an email.

Copyright © 2008, Thiadmer Riemersma, ITB CompuPhase
Available under a Creative Commons CC-BY-SA-3.0 Licence.
