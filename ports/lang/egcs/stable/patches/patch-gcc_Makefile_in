$MirOS$
--- gcc/Makefile.in.orig	2003-01-28 21:53:45.000000000 +0000
+++ gcc/Makefile.in	2003-09-07 16:25:23.000000000 +0000
@@ -26,6 +26,11 @@
 
 # This is the default target.
 all:
+	@echo 'debug: CFLAGS=$(CFLAGS)'
+	@echo 'debug: BOOT_CFLAGS=$(BOOT_CFLAGS)'
+	@echo 'debug: CFLAGS_STAGE1=$(CFLAGS_STAGE1)'
+	@echo 'debug: CFLAGS_STAGE2=$(CFLAGS_STAGE2)'
+	@echo 'debug: STAGE1_CFLAGS=$(STAGE1_CFLAGS)'
 
 # Suppress smart makes who think they know how to automake Yacc files
 .y.c:
@@ -63,11 +68,11 @@ BOOT_LANGUAGES = c @all_boot_languages@
 # bootstrap compilations.
 # XCFLAGS is used for most compilations but not when using the GCC just built.
 # TCFLAGS is used for compilations with the GCC just built.
-XCFLAGS =
-TCFLAGS =
-CFLAGS = -g
-STAGE1_CFLAGS = -g @stage1_cflags@
-BOOT_CFLAGS = -g -O2
+XCFLAGS = -O2
+TCFLAGS = $(CFLAGS_STAGE1)
+CFLAGS = 
+STAGE1_CFLAGS = @stage1_cflags@ $(CFLAGS_STAGE2)
+BOOT_CFLAGS = $(CFLAGS_STAGE1)
 
 # The warning flags are separate from BOOT_CFLAGS because people tend to
 # override optimization flags and we'd like them to still have warnings
@@ -357,7 +362,7 @@ INSTALL_LIBGCC = install-libgcc
 
 # Options to use when compiling libgcc2.a.
 #
-LIBGCC2_DEBUG_CFLAGS = -g
+LIBGCC2_DEBUG_CFLAGS = 
 LIBGCC2_CFLAGS = -O2 $(LIBGCC2_INCLUDES) $(GCC_CFLAGS) $(TARGET_LIBGCC2_CFLAGS) $(LIBGCC2_DEBUG_CFLAGS) $(GTHREAD_FLAGS) -DIN_LIBGCC2 -D__GCC_FLOAT_NOT_NEEDED @inhibit_libc@
 
 # Additional options to use when compiling libgcc2.a.
@@ -655,7 +660,10 @@ ORDINARY_FLAGS_TO_PASS = \
 	"AR_FOR_TARGET=$(AR_FOR_TARGET)" \
 	"BISON=$(BISON)" \
 	"BISONFLAGS=$(BISONFLAGS)" \
-	"CFLAGS=$(CFLAGS) $(WARN_CFLAGS)" \
+	"BOOT_CFLAGS=$(CFLAGS_STAGE2)" \
+	"CFLAGS=$(CFLAGS_STAGE2)" \
+	"CFLAGS_STAGE1=$(CFLAGS_STAGE2)" \
+	"CFLAGS_STAGE2=$(CFLAGS_STAGE2)" \
 	"DESTDIR=$(DESTDIR)" \
 	"GCC_FOR_TARGET=$(GCC_FOR_TARGET)" \
 	"LDFLAGS=$(LDFLAGS)" \
@@ -1022,7 +1030,10 @@ libgcc.a: $(LIBGCC_DEPS)
 	  AR_FOR_TARGET="$(AR_FOR_TARGET)" \
 	  AR_CREATE_FOR_TARGET="$(AR_CREATE_FOR_TARGET)" \
 	  AR_FLAGS_FOR_TARGET="$(AR_FLAGS_FOR_TARGET)" \
-	  CFLAGS="$(CFLAGS) $(WARN_CFLAGS)" \
+	  BOOT_CFLAGS="$(CFLAGS_STAGE2)" \
+	  CFLAGS="$(CFLAGS_STAGE2)" \
+	  CFLAGS_STAGE1="$(CFLAGS_STAGE2)" \
+	  CFLAGS_STAGE2="$(CFLAGS_STAGE2)" \
 	  RANLIB_FOR_TARGET="$(RANLIB_FOR_TARGET)" \
 	  RANLIB_TEST_FOR_TARGET="$(RANLIB_TEST_FOR_TARGET)" \
 	  NM_FOR_TARGET="$(NM_FOR_TARGET)" AWK="$(AWK)" \
@@ -1064,7 +1075,10 @@ stmp-multilib: $(LIBGCC_DEPS)
 	  AR_FOR_TARGET="$(AR_FOR_TARGET)" \
 	  AR_CREATE_FOR_TARGET="$(AR_CREATE_FOR_TARGET)" \
 	  AR_FLAGS_FOR_TARGET="$(AR_FLAGS_FOR_TARGET)" \
-	  CFLAGS="$(CFLAGS) $(WARN_CFLAGS)" \
+	  BOOT_CFLAGS="$(CFLAGS_STAGE2)" \
+	  CFLAGS="$(CFLAGS_STAGE2)" \
+	  CFLAGS_STAGE1="$(CFLAGS_STAGE2)" \
+	  CFLAGS_STAGE2="$(CFLAGS_STAGE2)" \
 	  RANLIB_FOR_TARGET="$(RANLIB_FOR_TARGET)" \
 	  RANLIB_TEST_FOR_TARGET="$(RANLIB_TEST_FOR_TARGET)" \
 	  NM_FOR_TARGET="$(NM_FOR_TARGET)" AWK="$(AWK)" \
@@ -2740,7 +2754,10 @@ install-multilib: stmp-multilib installd
 	  AR_FOR_TARGET="$(AR_FOR_TARGET)" \
 	  AR_CREATE_FOR_TARGET="$(AR_CREATE_FOR_TARGET)" \
 	  AR_FLAGS_FOR_TARGET="$(AR_FLAGS_FOR_TARGET)" \
-	  CFLAGS="$(CFLAGS) $(WARN_CFLAGS)" \
+	  BOOT_CFLAGS="$(CFLAGS_STAGE2)" \
+	  CFLAGS="$(CFLAGS_STAGE2)" \
+	  CFLAGS_STAGE1="$(CFLAGS_STAGE2)" \
+	  CFLAGS_STAGE2="$(CFLAGS_STAGE2)" \
 	  RANLIB_TEST_FOR_TARGET="$(RANLIB_TEST_FOR_TARGET)" \
 	  NM_FOR_TARGET="$(NM_FOR_TARGET)" AWK="$(AWK)" \
 	  LIBGCC2_CFLAGS="$(LIBGCC2_CFLAGS)" \
@@ -2979,7 +2996,9 @@ VOL_FILES=`echo $(BACKEND) $(OBJS) $(C_O
 # WARN_CFLAGS setting can't be to the expansion of GCC_WARN_CFLAGS in
 # the context of the stage_x rule.
 STAGE2_FLAGS_TO_PASS = \
-	CFLAGS="$(BOOT_CFLAGS)" \
+	CFLAGS="$(CFLAGS_STAGE2)" \
+	CFLAGS_STAGE1="$(CFLAGS_STAGE2)" \
+	CFLAGS_STAGE2="$(CFLAGS_STAGE2)" \
 	LDFLAGS="$(BOOT_LDFLAGS)" \
 	WARN_CFLAGS="\$$(GCC_WARN_CFLAGS)" \
 	STRICT_WARN="$(STRICT2_WARN)" \
@@ -2995,7 +3014,8 @@ STAGE2_FLAGS_TO_PASS = \
 # overrideable (for a bootstrap build stage1 also builds gcc.info).
 stage1_build:
 	$(MAKE) CC="$(CC)" libdir=$(libdir) LANGUAGES="$(BOOT_LANGUAGES)" \
-		CFLAGS="$(STAGE1_CFLAGS)" MAKEINFO="$(MAKEINFO)" \
+		CFLAGS="$(CFLAGS_STAGE1)" MAKEINFO="$(MAKEINFO)" \
+		CFLAGS_STAGE1="$(CFLAGS_STAGE2)" CFLAGS_STAGE2="$(CFLAGS_STAGE2)" \
 		MAKEINFOFLAGS="$(MAKEINFOFLAGS)"
 	$(STAMP) stage1_build
 	echo stage1_build > stage_last
