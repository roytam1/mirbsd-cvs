$OpenBSD$
--- hotspot/src/os_cpu/bsd_i486/vm/os_bsd_i486.cpp.orig	Sun Aug 22 22:04:16 2004
+++ hotspot/src/os_cpu/bsd_i486/vm/os_bsd_i486.cpp	Mon Aug 23 11:01:23 2004
@@ -61,6 +61,8 @@ char* os::non_memory_address_word() {
 // on the same uc_link chain and bad or circular links. 
 //
 // XXXBSD: is it correct from FreeBSD point of view ?
+// OpenBSD dosn't have a uc_link so can't do this check
+#ifndef __OpenBSD__
 bool os::Bsd::valid_ucontext(Thread* thread, ucontext_t* valid, ucontext_t* suspect) {
   if (valid >= suspect || 
       valid->uc_stack.ss_flags != suspect->uc_stack.ss_flags ||
@@ -82,6 +84,7 @@ bool os::Bsd::valid_ucontext(Thread* thr
   }
   return true;
 }
+#endif // !__OpenBSD__
 
 // For Forte Analyzer AsyncGetCallTrace profiling support -
 // the thread is currently interrupted by SIGPROF
@@ -115,6 +118,13 @@ void SetThreadPC_Callback::execute(OSThr
   // success, if not we return failure and the caller can retry.
   // 
   _result = false;
+#ifdef __OpenBSD__
+  // OpenBSD doesn't have uc_link or uc_mcontext
+  if (uc->sc_eip == (int)_old_addr.pc() ) {
+    uc->sc_eip = (int)_new_addr.pc();
+    _result = true;
+  }
+#else
   if (uc->uc_mcontext.mc_eip == (int)_old_addr.pc() ) {
     uc->uc_mcontext.mc_eip = (int)_new_addr.pc();
     _result = true;
@@ -126,16 +136,21 @@ void SetThreadPC_Callback::execute(OSThr
       _result = true;
     }
   }
+#endif
 
   thread->safepoint_state()->notify_set_thread_pc_result(_result);
 
 #ifdef ASSERT
   if (!_result) { 
+#ifdef __OpenBSD__
+    tty->print_cr("set_thread_pc: failed to set pc " INTPTR_FORMAT " -> " INTPTR_FORMAT, _old_addr.pc(), _new_addr.pc()); 
+#else
     if (uc->uc_link != NULL) { 
       tty->print_cr("set_thread_pc:(nested) failed to set pc " INTPTR_FORMAT " -> " INTPTR_FORMAT, _old_addr.pc(), _new_addr.pc()); 
     } else { 
       tty->print_cr("set_thread_pc: failed to set pc " INTPTR_FORMAT " -> " INTPTR_FORMAT, _old_addr.pc(), _new_addr.pc()); 
     } 
+#endif
   } 
 #endif
 }
@@ -154,7 +169,11 @@ void GetThreadPC_Callback::execute(OSThr
 
   assert(ProfileVM && thread->is_VM_thread(), "just checking");
     
+#ifdef __OpenBSD__
+  ExtendedPC new_addr((address)uc->sc_eip);
+#else
   ExtendedPC new_addr((address)uc->uc_mcontext.mc_eip);
+#endif
   _addr = new_addr;
 }
 
@@ -228,7 +247,11 @@ int JVM_handle_bsd_signal(int sig, sigin
   //%note os_trap_1
   if (info != NULL && thread != NULL) {
     // factor me: getPCfromContext
+#ifdef __OpenBSD__
+    pc = (address) uc->sc_eip;
+#else
     pc = (address) uc->uc_mcontext.mc_eip;
+#endif
     #ifndef CORE
     adjusted_pc = thread->safepoint_state()->compute_adjusted_pc(pc);
     #else
@@ -403,7 +426,11 @@ int JVM_handle_bsd_signal(int sig, sigin
     // 12/02/99: On Sparc it appears that the full context is alsosaved
     // but as yet, no one looks at or restores that saved context
     // factor me: setPC
+#ifdef __OpenBSD__
+    uc->sc_eip = (int)stub;
+#else
     uc->uc_mcontext.mc_eip = (int)stub;
+#endif
     return true;
   }
 
@@ -449,7 +476,11 @@ int JVM_handle_bsd_signal(int sig, sigin
   }
 
   if (pc == NULL && uc != NULL) {
+#ifdef __OpenBSD__
+    pc = (address) uc->sc_eip;
+#else
     pc = (address) uc->uc_mcontext.mc_eip;
+#endif
   }
 
 #ifndef PRODUCT
@@ -488,7 +519,11 @@ int JVM_handle_bsd_signal(int sig, sigin
        // QQQ will we need a stub to bridge into continue_with_dump so that a reasonable
        // return address will be present and the stack looks ok.
        //
+#ifdef __OpenBSD__
+       uc->sc_eip = (int)&continue_with_dump;
+#else
        uc->uc_mcontext.mc_eip = (int)&continue_with_dump;
+#endif
        return true;
     }
   }
@@ -515,7 +550,18 @@ void os::Bsd::init_thread_fpu_state(void
   static int code_template[] = {
     0x00027f68, 0x246cd900, 0x90c35800, 0x90909090
   };
+#ifdef __OpenBSD__
+  static void (*fixcw)(void);
+  if (fixcw == NULL) {
+       fixcw = CAST_TO_FN_PTR(void (*)(void),
+           ::mmap(NULL, PAGE_SIZE, PROT_READ | PROT_WRITE,
+                  MAP_PRIVATE | MAP_ANON, -1, 0));
+       memcpy((void *)fixcw, code_template, sizeof(code_template));
+       mprotect((void *)fixcw, PAGE_SIZE, PROT_EXEC | PROT_READ);
+  }
+#else
   static void (*fixcw)(void) = CAST_TO_FN_PTR(void (*)(void), code_template);
+#endif
 
   fixcw();
 }
