$OpenBSD$
--- hotspot/src/os/bsd/vm/os_bsd.cpp.orig	Fri Aug 20 23:06:29 2004
+++ hotspot/src/os/bsd/vm/os_bsd.cpp	Fri Aug 20 23:49:36 2004
@@ -45,7 +45,7 @@
 # include <semaphore.h>
 # include <unistd.h>
 
-# ifdef __FreeBSD__
+# if defined(__FreeBSD__) || defined(__OpenBSD__)
 #  include <pthread_np.h>
 # endif
 
@@ -75,7 +75,12 @@ void os::Bsd::remove_alternate_signal_st
 }
 
 address os::current_stack_base() {
-
+#ifdef __OpenBSD__
+  stack_t ss;
+  if (pthread_stackseg_np(pthread_self(), &ss))
+         goto err;
+  return (address) ss.ss_sp;
+#else
   uintptr_t addr = NULL;
   pthread_attr_t attr;
   void *mystack = NULL;
@@ -94,6 +99,7 @@ address os::current_stack_base() {
 
     return (address) addr;
   }
+#endif
 
 err:
   fatal("Unable to get current thread stack base pointer");
@@ -101,7 +107,11 @@ err:
 }
 
 size_t os::current_stack_size() {
-
+#ifdef __OpenBSD__
+  stack_t ss;
+  if (!pthread_stackseg_np(pthread_self(), &ss))
+    return ss.ss_size;
+#else
   pthread_attr_t attr;
   size_t sizep = 0;
 
@@ -112,6 +122,7 @@ size_t os::current_stack_size() {
     pthread_attr_destroy(&attr);
     return sizep;
   }
+#endif
 
   fatal("Unable to get current thread stack base size");
 }
@@ -494,8 +505,12 @@ extern "C" {
     Thread* thread = (Thread*)data;
     OSThread* osthr = thread->osthread();
 
+#ifdef __OpenBSD__
+    stack_t ss;
+#else
     pthread_attr_t attr;
     void *mystack;
+#endif
 
     assert(osthr->get_state() == RUNNABLE, "invalid os thread state");
 
@@ -503,6 +518,11 @@ extern "C" {
      * Make sure that pthread_attr_get_np() is always returns not NULL
      */
     if (_pthread_functionality_checked == 0) {
+#ifdef __OpenBSD__
+      if (pthread_stackseg_np(pthread_self(), &ss) !=0 || ss.ss_sp == NULL) {
+	fatal("pthread_functionality_check failed");
+      }
+#else
       mystack == NULL;
       if (pthread_attr_init(&attr) == 0) {
         if (pthread_attr_get_np(pthread_self(), &attr) != 0)
@@ -514,6 +534,7 @@ extern "C" {
 	}
         pthread_attr_destroy(&attr);
       }
+#endif
       _pthread_functionality_checked = 1;
     }
     
@@ -707,8 +728,11 @@ err:
 
   // Set the default thread priority otherwise use NormalPriority
   if ( UseThreadPriorities ) {
+    //pthread_setprio is not supported yet on OpenBSD
+#ifndef __OpenBSD__
      pthread_setprio(tid, (DefaultThreadPriority == -1) ? NormalPriority : 
                                                       DefaultThreadPriority);
+#endif
   }
 
   // Initial thread state is INITIALIZED, not SUSPENDED
@@ -1638,8 +1662,13 @@ int os::java_to_os_priority[MaxPriority 
 
 OSReturn os::set_native_priority(Thread* thread, int newpri) {
   assert(newpri >= MinimumPriority && newpri <= MaximumPriority, "bad priority mapping");
+#ifdef __OpenBSD__
+  // OpenBSD doesn't support pthread_setprio yet
+  return OS_OK;
+#else
   int status = pthread_setprio(thread->osthread()->thread_id(), newpri);
   return (status == 0) ? OS_OK : OS_ERR;
+#endif
 }
 
 
@@ -1673,8 +1702,10 @@ inline int OSThread_priority(OSThread* t
 }
 
 inline void OSThread_set_priority(OSThread* t, int prio) {
+#ifndef __OpenBSD__
   int sts = pthread_setprio(t->thread_id(), prio);
   assert(sts == 0, "pthread_setprio failed");
+#endif
 }
 
 
