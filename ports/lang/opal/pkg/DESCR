The OPAL Project
================

The OPAL project is concerned with research into a programming environ-
ment in which advanced language concepts and formal development methods
can be used for creating production-quality software. At the core of
the project is the algebraic programming language, OPAL, which integra-
tes both concepts of algebraic specification and functional program-
ming. An ever-expanding set of tools supporting the language constitu-
tes the OPAL compilation system OCS.


The Opal Language
=================

Opal is a strongly typed, higher-order, strict, pure functional langu-
age, and as such can be classified alongside ML, Haskell, and other mo-
dern functional programming languages. However, the language also has a
distinctive algebraic flavour in the tradition of languages such as
CIP-L, Obj, and others.

The language includes what we consider to be mandatory for research and
teaching on:
* optimizing compilation of algebraic languages
* formal programming methodology
* methodology of implementing large software systems

The following characteristics give an overview of the language design:

* Modularization by means of separated signature and implementation
  parts of structures.
* Selective imports of items from structures.
* Parameterized structure, with support to shortcut the notation of
  actualization morphisms, or to let them be inferred by the compiler.
* Free constructor views on sorts, which allow pattern-based function
  definitions in spite of quite different implementations.
* Unrestricted overloading of names, considering complex contexts for
  the overloading resolution.
* Puristic scheme language with no built-in data types (except of
  booleans and denotations).

A detailed introduction to the functional core of Opal can be found in
the tutorial[1].

Opal-1 and its predecessor Opal-0 have been used for some time at the
Technical University of Berlin in basic and advanced computer science
courses, as well as in several research projects. Opal has been used to
implement its own compiler.

[1] http://uebb.cs.tu-berlin.de/cgi/singlelit.cgi?citation=exn94a


Porter's comments
=================

This port has only been tested on MirOS BSD/i386 and might not run
anywhere else. Its build system is very weird, it does everything
in the install (fake) stage, builds partially, intermixed with the
subproject installations, but its installation is said to be movable
so we do it like this. GNU sed is required. We could use any version
of TCL/TK but must determine correct flags. Configuration is a mess.

This port is "just great" - it made me tempt using FAKE=no here...
but I resisted. Instead, there are wrappers. TCL/TK works, dynamic
loading of functions probably fails due to it not being SunOS/Linux,
and reflections partly work (maybe PEBKAC on the failing case).
