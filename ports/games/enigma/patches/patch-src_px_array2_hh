$MirOS$

	Patch taken from Debian #258651

--- src/px/array2.hh.orig	Mon May 19 12:14:14 2003
+++ src/px/array2.hh	Sat Aug 29 14:11:56 2009
@@ -70,14 +70,14 @@ namespace px
         // Destructor
         ~Array2() { destroy_elements(); }
 
-        iterator begin() { return first; }
-        iterator end() { return last; }
-        const_iterator begin() const { return first; }
-        const_iterator end() const { return last; }
-        iterator row_begin(size_type y) { return first + y*w; }
-        iterator row_end(size_type y) { return first + y*w + w; }
-        const_iterator row_begin(size_type y) const { return first + y*w; }
-        const_iterator row_end(size_type y) const { return first + y*w + w; }
+        iterator begin() { return this->first; }
+        iterator end() { return this->last; }
+        const_iterator begin() const { return this->first; }
+        const_iterator end() const { return this->last; }
+        iterator row_begin(size_type y) { return this->first + y*w; }
+        iterator row_end(size_type y) { return this->first + y*w + w; }
+        const_iterator row_begin(size_type y) const { return this->first + y*w; }
+        const_iterator row_end(size_type y) const { return this->first + y*w + w; }
 
 
         void swap(Array2<T,A> &a2);
@@ -86,13 +86,13 @@ namespace px
         size_type height()const { return h; }
 
 
-        T&	 get(size_type x, size_type y) { return first[y*w+x]; }
-        const T& get(size_type x, size_type y) const { return first[y*w+x]; }
+        T&	 get(size_type x, size_type y) { return this->first[y*w+x]; }
+        const T& get(size_type x, size_type y) const { return this->first[y*w+x]; }
         T& 	 operator()(size_type x, size_type y) { return get(x,y); }
         const T& operator()(size_type x, size_type y) const { return get(x,y); }
 
         void 	 set(size_type x, size_type y, const T& val) {
-            first[y*w+x] = val;
+            this->first[y*w+x] = val;
         }
 
         /*! Fill the array with some value or the default value. */
@@ -112,19 +112,19 @@ namespace px
     Array2<T,A>::Array2(int ww, int hh, const T& val, const A& a)
     : Array2Base<T,A>(a, ww*hh), w(ww), h(hh)
     {
-        std::uninitialized_fill(first, last, val);
+        std::uninitialized_fill(this->first, this->last, val);
     }
 
     template <class T, class A>
     Array2<T,A>::Array2(const Array2<T,A> &a)
     : Array2Base<T,A>(a.alloc, a.last-a.first)
     {
-        std::uninitialized_copy(a.begin(), a.end(), first);
+        std::uninitialized_copy(a.begin(), a.end(), this->first);
     }
 
     template <class T, class A>
     void Array2<T,A>::destroy_elements() {
-        for (T* p=first; p!=last; ++p)
+        for (T* p=this->first; p!=this->last; ++p)
             p->~T();
     }
 
@@ -132,7 +132,7 @@ namespace px
     void Array2<T,A>::fill (const T& val)
     {
         destroy_elements();
-        std::uninitialized_fill(first, last, val);
+        std::uninitialized_fill(this->first, this->last, val);
     }
 
     /*! Resize the array in place, but discard any old array
@@ -142,7 +142,7 @@ namespace px
     {
         destroy_elements();
         Array2Base<T,A>::resize(w_*h_);
-        std::uninitialized_fill(first, last, val);
+        std::uninitialized_fill(this->first, this->last, val);
         w = w_;
         h = h_;
     }
@@ -150,8 +150,8 @@ namespace px
     template <class T, class A>
     void Array2<T,A>::swap(Array2<T,A> &a2)
     {
-        std::swap(first, a2.first);
-        std::swap(last, a2.last);
+        std::swap(this->first, a2.first);
+        std::swap(this->last, a2.last);
         std::swap(w, a2.w);
         std::swap(h, a2.h);
     }
