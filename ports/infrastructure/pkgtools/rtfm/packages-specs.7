.\" $MirOS: ports/infrastructure/pkgtools/rtfm/packages-specs.7,v 1.5 2008/03/14 16:46:01 tg Exp $
.\" $OpenBSD: packages-specs.7,v 1.7 2003/09/02 18:37:08 jmc Exp $
.\"
.\" Copyright (c) 2001 Marc Espie
.\"
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE DEVELOPERS ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE DEVELOPERS BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"-
.\" Copyright (c) 2008, 2009
.\"	Thorsten “mirabilos” Glaser <tg@mirbsd.org>
.\"-
.\" Try to make GNU groff and AT&T nroff more compatible
.\" * ` generates ‘ in gnroff, so use \`
.\" * ' generates ’ in gnroff, \' generates ´, so use \*(aq
.\" * - generates ‐ in gnroff, \- generates −, so .tr it to -
.\"   thus use - for hyphens and \- for minus signs and option dashes
.\" * ~ is size-reduced and placed atop in groff, so use \*(TI
.\" * ^ is size-reduced and placed atop in groff, so use \*(ha
.\" * \(en does not work in nroff, so use \*(en
.\" The section after the "doc" macropackage has been loaded contains
.\" additional code to convene between the UCB mdoc macropackage (and
.\" its variant as BSD mdoc in groff) and the GNU mdoc macropackage.
.\"
.ie \n(.g \{\
.	if \*[.T]ascii .tr \-\N'45'
.	if \*[.T]latin1 .tr \-\N'45'
.	if \*[.T]utf8 .tr \-\N'45'
.	ds <= \[<=]
.	ds >= \[>=]
.	ds Rq \[rq]
.	ds Lq \[lq]
.	ds sL \(aq
.	ds sR \(aq
.	if \*[.T]utf8 .ds sL `
.	if \*[.T]ps .ds sL `
.	if \*[.T]utf8 .ds sR '
.	if \*[.T]ps .ds sR '
.	ds aq \(aq
.	ds TI \(ti
.	ds ha \(ha
.	ds en \(en
.\}
.el \{\
.	ds aq '
.	ds TI ~
.	ds ha ^
.	ds en \(em
.\}
.\"
.\" Implement .Dd with the Mdocdate RCS keyword
.\"
.rn Dd xD
.de Dd
.ie \\$1$Mdocdate: \{\
.	xD \\$2 \\$3, \\$4
.\}
.el .xD \\$1 \\$2 \\$3 \\$4 \\$5 \\$6 \\$7 \\$8
..
.\"
.\" .Dd must come before definition of .Mx, because when called
.\" with -mandoc, it might implement .Mx itself, but we want to
.\" use our own definition. And .Dd must come *first*, always.
.\"
.Dd $Mdocdate: November 17 2009 $
.\"
.\" Check which macro package we use
.\"
.ie \n(.g \{\
.	ie d volume-ds-1 .ds tT gnu
.	el .ds tT bsd
.\}
.el .ds tT ucb
.\"
.\" Implement .Mx (MirBSD)
.\"
.ie "\*(tT"gnu" \{\
.	eo
.	de Mx
.	nr curr-font \n[.f]
.	nr curr-size \n[.ps]
.	ds str-Mx \f[\n[curr-font]]\s[\n[curr-size]u]
.	ds str-Mx1 \*[Tn-font-size]\%MirOS\*[str-Mx]
.	if !\n[arg-limit] \
.	if \n[.$] \{\
.	ds macro-name Mx
.	parse-args \$@
.	\}
.	if (\n[arg-limit] > \n[arg-ptr]) \{\
.	nr arg-ptr +1
.	ie (\n[type\n[arg-ptr]] == 2) \
.	as str-Mx1 \~\*[arg\n[arg-ptr]]
.	el \
.	nr arg-ptr -1
.	\}
.	ds arg\n[arg-ptr] "\*[str-Mx1]
.	nr type\n[arg-ptr] 2
.	ds space\n[arg-ptr] "\*[space]
.	nr num-args (\n[arg-limit] - \n[arg-ptr])
.	nr arg-limit \n[arg-ptr]
.	if \n[num-args] \
.	parse-space-vector
.	print-recursive
..
.	ec
.	ds sP \s0
.	ds tN \*[Tn-font-size]
.\}
.el \{\
.	de Mx
.	nr cF \\n(.f
.	nr cZ \\n(.s
.	ds aa \&\f\\n(cF\s\\n(cZ
.	if \\n(aC==0 \{\
.		ie \\n(.$==0 \&MirOS\\*(aa
.		el .aV \\$1 \\$2 \\$3 \\$4 \\$5 \\$6 \\$7 \\$8 \\$9
.	\}
.	if \\n(aC>\\n(aP \{\
.		nr aP \\n(aP+1
.		ie \\n(C\\n(aP==2 \{\
.			as b1 \&MirOS\ #\&\\*(A\\n(aP\\*(aa
.			ie \\n(aC>\\n(aP \{\
.				nr aP \\n(aP+1
.				nR
.			\}
.			el .aZ
.		\}
.		el \{\
.			as b1 \&MirOS\\*(aa
.			nR
.		\}
.	\}
..
.\}
.\"-
.Dt PACKAGES-SPECS 7
.Os
.Sh NAME
.Nm packages-specs
.Nd binary package names specifications
.Sh DESCRIPTION
Each package has a name consisting of at most four parts:
.Bd -literal -offset indent
stem-version-patchlevel[-flavours]
.Ed
.Pp
The
.Ar stem
part identifies the package.
It may contain some dashes, but its form is mostly conventional.
For instance, japanese packages usually
start with a
.Sq ja
prefix, e.g.,
.Qq ja-kterm-6.2.0-0 .
.Pp
The
.Ar version
part starts at the first digit that follows a
.Sq - ,
and goes on up to the following
.Sq - .
All packages must have a version number and a patch level.
Normally, the version number directly matches the original software
distribution version number, or release date.
The patch level is set to 0 on the first revision published of a port.
When the package contents change and the version stays the same, the
patch level is incremented.
When the port is updated to a new version, the patch level is set back
to 0.
A patch level is always a simple integer number.
For example, when libtiff was updated to version 3.7.2, the resulting
package was named
.Qq tiff-3.7.2-0 .
When a patch was applied that made the package contents change, the new
package was called
.Qq tiff-3.7.2-1 .
Obviously, these specific markers are reserved for MirPorts purposes.
.Pp
Flavoured packages will also contain a list of flavours after the version
identifier, in a canonical order determined by
.Ev FLAVOURS
in the corresponding port's
.Pa Makefile .
For instance, kterm has an xaw3d flavour:
.Qq ja-kterm-xaw3d .
.Pp
Note that, to uniquely identify the version part, no flavour shall ever
start with a digit.
Usually, flavoured packages are slightly different versions of the same
package that offer very similar functionalities.
.Sh CONFLICTS
Most conflicts between packages are handled on a package name basis.
Unless the packages have been specially prepared, it is
normally not possible to install two packages with the same
.Ar stem .
.Pp
Note that the
.Ar stem
ends at the
.Ar version
part.
So, for instance,
.Qq kdelibs-1.1.2
and
.Qq kdelibs-2.1.1
conflict.
But
.Qq openldap-2.0.7
and
.Qq openldap-client-2.0.7
don't.
Neither do
.Qq qt-1.45
and
.Qq qt2-3.0 .
.Sh DEPENDENCIES
Packages may depend on other packages, as specified by their port's
Makefile.
The
.Ar directory,[-multi],[flavour...]
part of the dependency is always used to obtain the default dependency for
the given package (the package that will be installed if no package
is found).
The corresponding package name is also used as a package specification,
unless a more specific specification has been given.
.Pp
Package specifications are extended package names, which may use
.Xr sh 1
-style wildcards, like
.Sq *
or
.Sq \&? .
.Pp
A specification such as
.Qq ghostscript-*
may be used to ask for any version of package ghostscript,
or a more specific wildcard may be used, such as
.Qq png-1.0.* .
Version numbers may also include ranges, separated by commas, so for
instance,
.Qq foo-1.0.*,>=1.3,<1.5
would match either foo-1.0.something, or any version of foo between 1.3
and 1.5.
.Pp
If the flavour specification is left blank, any flavour will do.
Note that most default package names don't contain flavour specification,
which means that any flavour will do.
For instance, in
.Bd -literal -offset indent
LIB_DEPENDS=aa.1.2::graphics/aalib
.Ed
.Pp
both
.Qq aalib-1.2
and
.Qq aalib-1.2-no_x11
will do.
To restrict the specification to packages that match flavour
.Sq f ,
append
.Sq -f .
To restrict the specification to packages that do not match flavour
.Sq f ,
append
.Sq -!f .
In the preceding case, one may use
.Bd -literal -offset indent
LIB_DEPENDS=aa.1.2:aalib-1.2-!no_x11:graphics/aalib
.Ed
.Pp
to ensure the no_x11 flavour is not picked.
.Sh DEPENDENCIES RESOLUTION
Several packages may be specified for a dependency:
.Qq foo|bar
will match either package foo, or package bar.
In the general case, each package holds a tree of dependencies.
Resolution occurs at
.Xr pkg_add 1
time, and all dependencies are tracked only as far as needed.
.Pp
For instance, if package
.Qq foo
depends on either
.Qq bar
or
.Qq fuzz ,
and
.Qq bar
depends
on
.Qq toughluck ,
.Xr pkg_add 1
will first check whether
.Qq bar
or
.Qq fuzz
is installed.
If either is there, the
.Qq toughluck
dependency will never be examined.
It would only be used in the case where neither
.Qq bar
nor
.Qq fuzz
are present, thus
.Xr pkg_add 1
would decide to bring in
.Qq bar ,
and so would check on
.Qq toughluck .
.Sh SEE ALSO
.Xr pkg_add 1 ,
.Xr bsd.port.mk 5 ,
.Xr library-specs 7 ,
.Xr packages 7 ,
.Xr ports 7
.Sh HISTORY
Support for these package specifications first appeared in
.Ox 2.9 .
Mandatory patch levels were introduced by
.Mx
in 2005.
