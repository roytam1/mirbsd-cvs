.\" $MirOS: ports/infrastructure/pkgtools/rtfm/rcdb.3,v 1.9 2009/11/22 18:23:36 tg Exp $
.\"-
.\" Copyright (c) 2004, 2005, 2008
.\"	Thorsten “mirabilos” Glaser <tg@mirbsd.org>
.\"
.\" Provided that these terms and disclaimer and all copyright notices
.\" are retained or reproduced in an accompanying document, permission
.\" is granted to deal in this work without restriction, including un-
.\" limited rights to use, publicly perform, distribute, sell, modify,
.\" merge, give away, or sublicence.
.\"
.\" This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
.\" the utmost extent permitted by applicable law, neither express nor
.\" implied; without malicious intent or gross negligence. In no event
.\" may a licensor, author or contributor be held liable for indirect,
.\" direct, other damage, loss, or other issues arising in any way out
.\" of dealing in the work, even if advised of the possibility of such
.\" damage or existence of a defect, except proven that it results out
.\" of said person's immediate fault when using the work as intended.
.\"-
.\" Try to make GNU groff and AT&T nroff more compatible
.\" * ` generates ‘ in gnroff, so use \`
.\" * ' generates ’ in gnroff, \' generates ´, so use \*(aq
.\" * - generates ‐ in gnroff, \- generates −, so .tr it to -
.\"   thus use - for hyphens and \- for minus signs and option dashes
.\" * ~ is size-reduced and placed atop in groff, so use \*(TI
.\" * ^ is size-reduced and placed atop in groff, so use \*(ha
.\" * \(en does not work in nroff, so use \*(en
.\" The section after the "doc" macropackage has been loaded contains
.\" additional code to convene between the UCB mdoc macropackage (and
.\" its variant as BSD mdoc in groff) and the GNU mdoc macropackage.
.\"
.ie \n(.g \{\
.	if \*[.T]ascii .tr \-\N'45'
.	if \*[.T]latin1 .tr \-\N'45'
.	if \*[.T]utf8 .tr \-\N'45'
.	ds <= \[<=]
.	ds >= \[>=]
.	ds Rq \[rq]
.	ds Lq \[lq]
.	ds sL \(aq
.	ds sR \(aq
.	if \*[.T]utf8 .ds sL `
.	if \*[.T]ps .ds sL `
.	if \*[.T]utf8 .ds sR '
.	if \*[.T]ps .ds sR '
.	ds aq \(aq
.	ds TI \(ti
.	ds ha \(ha
.	ds en \(en
.\}
.el \{\
.	ds aq '
.	ds TI ~
.	ds ha ^
.	ds en \(em
.\}
.\"
.\" Implement .Dd with the Mdocdate RCS keyword
.\"
.rn Dd xD
.de Dd
.ie \\$1$Mdocdate: \{\
.	xD \\$2 \\$3, \\$4
.\}
.el .xD \\$1 \\$2 \\$3 \\$4 \\$5 \\$6 \\$7 \\$8
..
.\"
.\" .Dd must come before definition of .Mx, because when called
.\" with -mandoc, it might implement .Mx itself, but we want to
.\" use our own definition. And .Dd must come *first*, always.
.\"
.Dd $Mdocdate: November 22 2009 $
.\"
.\" Check which macro package we use
.\"
.ie \n(.g \{\
.	ie d volume-ds-1 .ds tT gnu
.	el .ds tT bsd
.\}
.el .ds tT ucb
.\"
.\" Implement .Mx (MirBSD)
.\"
.ie "\*(tT"gnu" \{\
.	eo
.	de Mx
.	nr curr-font \n[.f]
.	nr curr-size \n[.ps]
.	ds str-Mx \f[\n[curr-font]]\s[\n[curr-size]u]
.	ds str-Mx1 \*[Tn-font-size]\%MirOS\*[str-Mx]
.	if !\n[arg-limit] \
.	if \n[.$] \{\
.	ds macro-name Mx
.	parse-args \$@
.	\}
.	if (\n[arg-limit] > \n[arg-ptr]) \{\
.	nr arg-ptr +1
.	ie (\n[type\n[arg-ptr]] == 2) \
.	as str-Mx1 \~\*[arg\n[arg-ptr]]
.	el \
.	nr arg-ptr -1
.	\}
.	ds arg\n[arg-ptr] "\*[str-Mx1]
.	nr type\n[arg-ptr] 2
.	ds space\n[arg-ptr] "\*[space]
.	nr num-args (\n[arg-limit] - \n[arg-ptr])
.	nr arg-limit \n[arg-ptr]
.	if \n[num-args] \
.	parse-space-vector
.	print-recursive
..
.	ec
.	ds sP \s0
.	ds tN \*[Tn-font-size]
.\}
.el \{\
.	de Mx
.	nr cF \\n(.f
.	nr cZ \\n(.s
.	ds aa \&\f\\n(cF\s\\n(cZ
.	if \\n(aC==0 \{\
.		ie \\n(.$==0 \&MirOS\\*(aa
.		el .aV \\$1 \\$2 \\$3 \\$4 \\$5 \\$6 \\$7 \\$8 \\$9
.	\}
.	if \\n(aC>\\n(aP \{\
.		nr aP \\n(aP+1
.		ie \\n(C\\n(aP==2 \{\
.			as b1 \&MirOS\ #\&\\*(A\\n(aP\\*(aa
.			ie \\n(aC>\\n(aP \{\
.				nr aP \\n(aP+1
.				nR
.			\}
.			el .aZ
.		\}
.		el \{\
.			as b1 \&MirOS\\*(aa
.			nR
.		\}
.	\}
..
.\}
.\"-
.Dt RCDB 3
.Os
.Sh NAME
.Nm rcdb
.Nd plain-text key/value pair database
.Sh SYNOPSIS
.Fd #include <sys/types.h>
.Fd #include <db.h>
.Ft DBT *
.Fn rcdb_alloc "void *item" "const size_t length"
.Ft DBT *
.Fn rcdb_string "char *text"
.Ft void
.Fn rcdb_split "RCDB *handle" "int64_t *value" "char **key"
.Ft RCDB *
.Fn rcdb_open "const char * const dbfile"
.Ft int
.Fn rcdb_close "RCDB *handle"
.Ft int
.Fn rcdb_rawread "RCDB *handle" "recno_t nr" "char **bstr"
.Ft int
.Fn rcdb_rawrite "RCDB *handle" "recno_t nr" "char **bstr"
.Ft int
.Fn rcdb_delete "RCDB *handle" "recno_t nr"
.Ft recno_t
.Fn rcdb_lookup "RCDB *handle" "const char *const searchkey"
.Ft int
.Fn rcdb_retrieve "RCDB *handle" "recno_t nr" "int64_t *value" "char **key"
.Ft int
.Fn rcdb_read "RCDB *handle" "recno_t nr" "int64_t *value"
.Ft int
.Fn rcdb_modify "RCDB *handle" "recno_t nr" "int64_t value" \
    "const char *const key"
.Ft int
.Fn rcdb_write "RCDB *handle" "recno_t nr" "int64_t value"
.Ft recno_t
.Fn rcdb_store "RCDB *handle" "int64_t value" "const char *const key"
.Sh DESCRIPTION
The
.Nm
function suite has been developed as an interface to the
.Xr dbopen 3
suite of functions with a
.Xr recno 3
back-end and database file.
.Nm
databases save key/value pairs, with the key consisting of
a C string and the value being a signed 64-bit integer.
In this implementation, the value is being saved as a hexadecimal
value by default, but octal and decimal values can be written
into the exposed database manually as well due to usage of the
.Xr strtoll 3
function to parse the values (called reference counts in former
versions of this manual page).
.Pp
The character set to be used is \fBISO_646.irv:1991\fR, which limits
the separator character to be within the range of 1 to 126 decimally,
or 0x01 to 0x7E hexadecimal, including the range boundaries, but
excluding the newline character (10 or 0x0A by default).
If you want to save a more broad range of characters within the key or
raw string, you are encouraged to use the UTF-7 encoding of the recent
Unicode character set, because UTF-8 peruses the eigth bit and is not
guaranteed to be handled the same on all operating environments.
On the other hand, using UTF-8 makes the support for high-bit characters
transparent and allows strictly conforming systems to still look up
keys which only use plain
.Xr ascii 7 .
.Pp
The
.Nm
function suite is defined in the
.Aq Pa db.h
include file and is drawn around the following structure:
.Bd -literal
typedef struct {
	DB *database;
	recno_t key;
	recno_t currec;
	recno_t lastrec;
	DBT dbt_key;
	DBT dbt_data;
	char sep;
} RCDB;
.Ed
.Pp
Direct access to the database, circumventing the
.Nm
routines, is possible via the
.Va RCDB\-\*(Gtdatabase
field, but this should be avoided if possible.
You actually
.Em can
change the newline character, but the resulting database might
not be binary-compatible.
Optimally, the RCDB structure should be handled as opaque.
The separator character, \*(aq\*(Ba\*(aq by default, can appear within the key.
.Sh API LEVEL
Within
.Aq Pa db.h ,
the
.Dv _DB_RCDB_API
macro is defined to the version of the current
application programming interface level.
This version of the
.Nm
manual page describes API version 3.
The
.Dv _DB_RCDB_MAJOR
macro is defined as the lowest API supported by that version of
.Aq Pa db.h .
.Sh API FUNCTIONS
.Bl -tag -width XXXXXX
.It Fn rcdb_alloc item length
allocates storage for a DBT structure using
.Xr malloc 3
and initializes it to point to
.Va item
and contain
.Va length .
In case of an error,
.Dv NULL
is returned, else a pointer to the newly allocated DBT structure.
.br
This function is \fB__DBINTERFACE_PRIVATE\fR.
.It Fn rcdb_string text
calls
.Xr rcdb_alloc 3
with
.Va text
and its length (without the trailing zero byte) as parameters.
.br
This function is \fB__DBINTERFACE_PRIVATE\fR.
.It Fn rcdb_split handle value key
splits the contents of the DBT data component into two components.
The first one is assumed being a signed 64-bit integer in decimal
notation (octal if starting with a zero, hexadecimal if starting
with \fB0x\fR).
Separated by the separator character, the second value until the end of
the data string but before the end mark, is assumed to be the key.
Appropriate space for the key is allocated using
.Xr malloc 3 .
If handle or handle\-\*(Gtdbt_data.data was
.Dv NULL ,
no action is performed at all.
If an error occured, key is guaranteed to contain
.Dv NULL .
If the separator character was found to be invalid,
.Dv EDOM
is stored in the global variable errno, and
.Dv EFTYPE
if the separator character is missing (opaque raw access).
.br
This function is \fB__DBINTERFACE_PRIVATE\fR.
.It Fn rcdb_open dbfile
calls
.Xr dbopen 3
to open the
.Xr recno 3
database file
.Va dbfile .
It allocates storage for an RCDB structure using
.Xr malloc 3
and initializes it, then returns a pointer to the structure.
If an error occurs,
.Dv NULL
is returned.
.It Fn rcdb_close handle
takes an RCDB handle and tries to close the database and
.Xr free 3
the memory associated with it.
If the RCDB pointer or the RCDB\-\*(Gtdatabase pointer are already
.Dv NULL ,
no action is taken on them.
If the database was open and the attempt to close it was successful,
0 is returned, else 1 is returned.
In any case, the memory associated with the handle is freed.
.It Fn rcdb_rawread handle nr bstr
reads the record
.Va nr
from the database and stores a copy of its content in
.Va *bstr
unless
.Va bstr
is
.Dv NULL
(in which case you can use handle\-\*(Gtdbt_data to access the content).
On error, \-1 is returned and
.Va *bstr
is set to NULL if possible.
.It Fn rcdb_rawrite handle nr bstr
writes the data contained in the C string
.Va *bstr
into the database, overwriting record
.Va nr
unless
.Va nr
is zero, in which case a new record is created and
appended at the end of the database text file.
On error, \-1 is returned.
.Va *bstr
is never modified.
.It Fn rcdb_lookup handle searchkey
searches the database from beginning to the end for a record wirh the key
.Va searchkey .
In case of an error,
.Dv (recno_t)\-1
is returned.
If the record is found, its number is returned, else zero.
So-called opaque records, these on which
.Xr rcdb_split 3
returns EFTYPE, that is, are skipped during the comparison
and do not constitute an error.
.It Fn rcdb_retrieve handle nr value key
retrieves the record with the number
.Va nr
and writes its key into
.Va *key
and its value into
.Va *value .
If an error occurs, \-1 is returned, the content of
.Va *value
is undefined, and *key is most likely set to
.Dv NULL .
If the operation was successful, 0 is returned.
An invalid separator character causes an error of
.Dv EDOM ,
and
.Dv EINVAL
is yielded if the record number is zero.
.It Fn rcdb_read handle nr value
retrieves the record with the recno
.Va nr
and writes its value into
.Va *value .
If an error occurs, \-1 is returned and the content of
.Va *value
is undefined, else the result is 0.
.It Fn rcdb_delete handle nr
tries to delete the record
.Va nr
and returns 0 on success and \-1 on failure.
.It Fn rcdb_modify handle nr value key
allocates necessary space to handle a record containing a
hexadecimal 64-bit number preceded by \fB0x\fR and followed
by the separator character and
.Va key ,
trailed by the zero character.
It then fills the space with content generated from
.Va value
and
.Va key ,
and writes it into the database.
If
.Va nr
is zero, a new record is appended at the end of the file.
If a record to be overwritten does not exist, the behaviour
is unspecified due to a limitation in the underlying libdb.
Memory allocated during the operation is freed before exit.
If the operation fails, \-1 is returned, else zero.
.br
This function is not intended to be called by an end-user, because
.Xr rcdb_write 3
and
.Xr rcdb_store 3
already provide powerful interfaces to the database.
However, if you know what you are doing, this function is
most likely more performant and thus not private.
This is the most low-level write interface.
.It Fn rcdb_write handle nr value
can be used to write a new value to a known key/recno into the database.
.It Fn rcdb_store handle value key
writes the key/value pair
into the database, overwriting a probably already
existing entry with the same key, appending if it did not already exist.
It is the high-level write interface to this library.
If an error occured, \-1 is returned, else the recno
of the record just written.
.El
.Sh RETURN VALUES
The return values of the functions are already described in the
.Sx API FUNCTIONS
section above.
As a rule of thumb, the functions return \fB\-1\fR if an error occured,
and \fB0\fR or a recno if the operation completed successfully.
.Pp
Caveat:
.Fn rcdb_lookup
and
.Fn rcdb_store
return \fB\-1\fR casted to
.Ft recno_t
on error, so be sure to compare it to
.Li \fB(recno_t)\-1\fR
because in the current implementation, the value is unsigned.
.Sh ERRORS
In most cases, if an error occured, the
.Nm db ,
.Nm recno
or
.Nm
functions are setting
.Va errno
to an appropriate error number.
In addition to this rule, the
.Xr recno 3
and
.Xr dbopen 3
manual pages also describe return values which can be yielded
from the
.Nm
functions.
The memory allocation functions can also write to errno.
.Sh SEE ALSO
.Xr ascii 7 ,
.Xr dbopen 3 ,
.Xr recno 3
.Sh HISTORY
.Nm
appeared in
.Mx
.Em MirPorts
in 2004.
.Sh AUTHORS
.No Copyright (c) 2004 An Thorsten Glaser Aq tg@mirbsd.org
.Pp
This product includes material provided by Thorsten Glaser.
.Sh BUGS
Probably some.
If you encounter one, feedback is highly appreciated.
