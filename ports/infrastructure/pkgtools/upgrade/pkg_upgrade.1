.\"	$MirOS: ports/infrastructure/pkgtools/upgrade/pkg_upgrade.1,v 1.2 2006/08/08 19:07:26 tg Exp $
.\"
.\" Copyright (c) 2006
.\"	Benny Siegert <bsiegert@gmx.de>
.\"
.\" Licensee is hereby permitted to deal in this work without restric-
.\" tion, including unlimited rights to use, publicly perform, modify,
.\" merge, distribute, sell, give away or sublicence, provided all co-
.\" pyright notices above, these terms and the disclaimer are retained
.\" in all redistributions or reproduced in accompanying documentation
.\" or other materials provided with binary redistributions.
.\"
.\" Licensor hereby provides this work "AS IS" and WITHOUT WARRANTY of
.\" any kind, expressed or implied, to the maximum extent permitted by
.\" applicable law, but with the warranty of being written without ma-
.\" licious intent or gross negligence; in no event shall licensor, an
.\" author or contributor be held liable for any damage, direct, indi-
.\" rect or other, however caused, arising in any way out of the usage
.\" of this work, even if advised of the possibility of such damage.
.\"-
.\"
.Dd August 8, 2006
.Dt PKG_UPGRADE 1
.Os
.Sh NAME
.Nm pkg_upgrade
.Nd upgrade an installed package in-place
.Sh SYNOPSIS
.Nm
.Op Fl afq
.Ar pkgname.cgz
.Sh DESCRIPTION
The
.Nm
command is used to upgrade an installed package in-place.
If no other version of the package is installed and
.Fl a
is not given,
.Nm
simply calls
.Xr pkg_add 1 .
Otherwise, the installed package is deleted and the new version is added,
keeping dependencies intact.
.Pp
The following command line options are supported:
.Bl -tag -width indent
.It Fl a
Ignore packages for which no older version is installed
.Pq auto .
.It Fl f
Also upgrade the package if the exact same version is already installed
.Pq force .
Useful if you rebuilt a package from source.
.It Fl q
Don't print less important messages
.Pq quiet .
.It Fl s
Enable special treatment for shared libraries, see below
.Pq shlibs .
.El
.Sh SHARED LIBRARY SUPPORT
.Nm
has a special mode for upgrading shared library packages.
Consider the following situation: You have installed a package
.Pa foo
that contains
.Pa libfoo.so.1.0 .
Package
.Pa bar
is also installed and contains a binary that depends on this version
of libfoo.
Now you upgrade the
.Pa foo
package, the new version contains
.Pa libfoo.so.2.0
instead.
The other binary will no longer run.
.Pp
For this reason, systems like Debian split their library packages in
two: the library itself and a 
.Qq developer 
package containing headers and so on.
Instead, 
.Nm
creates a
.Qq stub package
from the installed package.
Basically, the installed package is split in two.
The old libraries are kept as a package named
.Pa stub - Ns Ar pkgname
while the rest is deleted and replaced by the new version.
.Pp
In the general case, this should work but you may still run into
situations where you will need to rebuild dependent packages from
source.
In any case, you can delete unused stub packages after you have
rebuilt dependent packages.
.Sh SEE ALSO
.Xr pkg_add 1 ,
.Xr pkg_create 1 ,
.Xr pkg_delete 1 ,
.Xr ports 7
.Sh AUTHORS
.Bl -tag -width indent -compact
.An Benny Siegert Aq bsiegert@mirbsd.org
came up with the idea for
.Nm "" ,
wrote the first version and this manual page.
.An Thorsten Glaser Aq tg@mirbsd.org
improved option handling and overall robustness.
.El
.Sh BUGS
.Nm
can easily render other packages unusable if you install a new version
of a shared library while the other package still uses the old one.
Use the
.Fl s
switch to prevent this situation.
.Pp
Shared library support needs much work.
.Pp
.Nm
does not handle the case of paralelly installed,
non-conflicting packages, such as
.Li autoconf\-2.13.20050228\-1
and
.Li autoconf\-2.60\-2 ,
well.
