#!/usr/bin/perl -w

# $MirOS: ports/infrastructure/scripts/make-plist,v 1.10 2005/11/15 19:34:01 tg Exp $
# $OpenBSD: make-plist,v 1.32 2003/12/26 00:26:01 espie Exp $

#  Copyright (c) 1999 Marc Espie
#  Copyright (c) 2003, 2004, 2005 Thorsten Glaser
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND
#  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
#  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
#  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#  SUCH DAMAGE.
#


use strict;


use IO::File;
use File::Find;
use File::Spec;
use File::Temp qw/ tempdir /;

my $manual = 0;
my (%out, %ignored);
my @has_shared;
my ($plist, $pshared, $pdylib);

{
package Annotation;

# short explanation:
# this object class is in principle a simple hash. Each plist fragment
# has one annotation. Keys are file names, and values for each key are
# a list of lists. The lists correspond to the entry/entries for the
# file in the various plist fragments. Annotations are written in
# annotate() and used in handle_file().
# 
# Three types of entries exist:
# - list with two elements: normal entry
# - list with three elements: @comment filename (hardcoded)
# - list with six elements: file with options (mode, etc.)


sub new {
    my $class = shift;
    bless {}, $class;
}

sub add {
    my $object = shift;
    my $key = shift;
    unless (defined $object->{$key}) {
    	$object->{$key} = [];
    }
    push(@{$object->{$key}}, @_);
}
}

my $annotated = new Annotation;
my $annotated_dir = new Annotation;
my $info_file = new Annotation;
my $samples = new Annotation;

sub annotate
{
	my $oldfh = shift;
	my $name = shift;
	my $newfh = shift;
	my $our_rcsid_seen = 0;
	my ($mode, $owner, $group, $nocheck) = ('', '', '', '');
	my $last_file = '';
	my @output = ();
	while(<$oldfh>) {
		chomp;
		if (m/^\@mode\s*/) {
			$mode = $';
		} elsif (m/^\@owner\s*/) {
			$owner = $';
		} elsif (m/^\@group\s*/) {
			$group = $';
		} elsif (m/^\@comment\s+no checksum$/) {
			$nocheck = 1;
		} elsif (m/^\@option no-default-conflict/||m/^\@pkgcfl/) {
			push(@output, "$_\n");
		} elsif (m/^\@option base-package/) {
			push(@output, "$_\n");
		} elsif (m/^\@exec\s+/ || m/^\@unexec\s+/) {
			$_=$';
			# we don't warn for stuff we probably added...
			next if m/^mkdir -p/||m/^install-info /;
			$manual = 1;
		} elsif (m/^\@comment\s+\$OpenBSD(\: .*)?\$$/) {
			push(@output, "$_\n");
			next;
		} elsif (m/^\@comment\s+\$MirOS(\: .*)?\$$/) {
			push(@output, "$_\n");
			$our_rcsid_seen = 1;
			next;
		} elsif (m/^\@sample\s+(.*)$/) {
			if ($last_file eq '') {
				push(@output, "$_\n");
				next;
			}
			if (!defined($samples->{$last_file})) {
				$samples->add($last_file, [ $name, $newfh, $_ ]);
				next;
			}
			foreach my $ent (@{$samples->{$last_file}}) {
				if ($ent->[0] eq $name) {
					$ent->[2] .= "\n$_";
					$_ = '';
				}
			}
			if ($_ ne '') {
				$samples->add($last_file, [ $name, $newfh, $_ ]);
			}
			next;
		} elsif (m/^\@comment\s+/) {
			$_ = $';
			if (m/^\@dirrm\s+/) {
				$_ = $';
				$annotated_dir->add($_,  [ $name, $newfh, 'comment']);
				next;
			} else {
				$annotated->add($_, [ $name, $newfh, 'comment'] );
			}
			next;
		} elsif (m/^\@dirrm\s+/) {
			$_=$';
			$annotated_dir->add($_, [ $name, $newfh ]);
			next;
		} elsif (m/^\@/) {
			next;
		} elsif (m/^\!?\%\%(.*)\%\%/) {
			my $frag = $1;
			if ($frag ne "SHARED") {
				push(@output, "$_\n");
				$manual = 1;
			}
		} elsif (m/\$\{.*\}/) {
			$manual = 1;
		}

		if ("$mode$owner$group$nocheck" ne '') {
			$annotated->add($_, [ $name, $newfh, $mode, $owner, $group, $nocheck ]);
			$nocheck = '';
		} else {
			$last_file = $_;
			$annotated->add($_, [ $name, $newfh ]);
		}
		if (m/\.info$/) {
			$last_file = $_;
			$info_file->add($_, [ $name, $newfh ]);
		}
	}
	print $newfh "\@comment \$MirOS\$\n" unless $our_rcsid_seen;
	foreach (@output) {
		print $newfh $_;
	}
}

# read an mtree file, and produce the corresponding directory hierarchy
sub parse_mtree
{
	# start under current DESTDIR, usually
	my $current = shift;
	local(*FILE);
	my %mtree;
	open FILE, $ENV{MTREE_FILE};
	while(<FILE>) {
		chomp;
		s/^\s*//;
		next if /^\#/ || /^\//;
		s/\s.*$//;
		next if /^$/;
		if ($_ eq '..') {
			$current =~ s|/[^/]*$||;
			next;
		} else {
			$current.="/$_";
		}
		$_ = $current;
		while (s|/\./|/|)	{}
		$mtree{$_} = 1;
	}
	close FILE;
	return \%mtree;
}

# prefix to remove from everything
my $base = $ENV{PREFIX};
my @backsubst;

sub strip
{
	local($_) = shift;
	s|^\Q$base\E/||;
	for my $l (@backsubst) {
		my $v = $l->[1];
		my $r = $l->[0];
		s/\Q$v\E/$r/g;
	}
	# If the resulting name is arch-dependent, we warn.
	# We don't fix it automatically, as this may need special handling.
	if (m/i386|m68k|sparc/) {
	    print STDERR "make-plist: generated plist contains arch-dependent\n";
	    print STDERR "\t$_\n";
	}
	return $_;
}

sub add_info
{
	my ($header, $info_dir) = @_;
	for my $d (sort (keys %$info_dir) ) {
	    for my $f (sort @{$info_dir->{$d}}) {
		my $d2 = strip($d);
		my $f2 = "$d2/$f";
		if (defined $info_file->{$f2}) {
		    for my $l (@{$info_file->{$f2}}) {
			$l->[1]->print("$header --info-dir=\%D/$d2 \%D/$f2\n");
		    }
		} else {
		    $out{$plist}->print("$header --info-dir=\%D/$d2 \%D/$f2\n");
		}
	    }
	}
}

sub handle_file
{
    my $fname = strip(shift);
    my $out = shift;
    my $string = "$fname\n";

    if (defined $annotated->{$fname}) {
	for my $l (@{$annotated->{$fname}}) {
	    if (@$l == 3) {
		    $l->[1]->print("\@comment $string");
	    } elsif (@$l == 2) {
		    $l->[1]->print($string);
	    } else {
		my ($outname, $fh, $mode, $owner, $group, $nocheck) = @$l;
		if ($mode ne '') {
			$string="\@mode $mode\n$string\@mode\n";
		}
		if ($owner ne '') {
			$string="\@owner $owner\n$string\@owner\n";
		}
		if ($group ne '') {
			$string="\@group $group\n$string\@group\n";
		}
		if ($nocheck ne '') {
			$string="\@comment no checksum\n$string";
		}
		print $fh $string;
	    }
	}
    } else {
    	print $out $string;
    }
    if (defined($samples->{$fname})) {
	for my $l (@{$samples->{$fname}}) {
	    $l->[1]->print($l->[2] . "\n");
	}
    }
	
}

# Given the name of a .la file, return a list of files referenced by it.
sub libtoolise_plist
{
	my $file = shift;
	my $prefix;
	my @libnames;
	local $_;

	open(FILE, '<', $file) || die "Cannot open $file";
	while (<FILE>) {
		chomp;
		next unless m/^([^=]+)='(.*)'$/;
		if ($1 eq 'libdir') {
			$prefix = File::Spec->abs2rel($2, $ENV{LOCALBASE});
		} elsif (	  ($1 eq 'dlname')
				||($1 eq 'library_names')
				||($1 eq 'old_library')) {
			push(@libnames, split(/ /, $2));
		}
	}
	close(FILE);

	foreach (@libnames) {
		$_ = File::Spec->catfile($prefix, $_);
	}
	# remove duplicates
	return %{{ map { $_ => 1 } File::Spec->no_upwards(@libnames) }};
}

sub may_annotate_and_move
{
	my $p = shift;

	if (-e $p) {
	    if (defined $out{$p}) {
	    	die "File handle for $p already exists";
	    }
	    my $fh = new IO::File "<$p";
	    rename($p, "$p.orig") or die "Can't rename $p to $p.orig";
	    my $newfh = new IO::File ">$p";
	    annotate($fh, $p, $newfh);
	    close $fh;
	    $out{$p} = $newfh;
	    return 1;
    	} else {
		return 0;
	}
}


my (%newdir, %occupied, %ldconfig, %dyldconfig, %has_stuff, %info_dir, @files, @libfiles, @dylibfiles);
die "Update bsd.port.mk" if @ARGV == 0;
my $plistdir = shift;
die "Update bsd.port.mk" if -f $plistdir;
die "Update bsd.port.mk"
    unless
#defined $ENV{'DEPS'} and  #	not for MirPorts, after all we've
#				got rcdb to take care of deps...
	   defined $ENV{'PKGREPOSITORY'};
die "Update bsd.port.mk"
    unless defined $ENV{'PLIST'} and defined $ENV{'PFRAG'};
$plist = $ENV{'PLIST'};
$pshared = $ENV{'PFRAG'}.'.shared';
$pdylib = $ENV{'PFRAG'}.'.dylib';
if (-e "$plist.orig" or -e "$pshared.orig" or -e "$pdylib.orig") {
	die "You must clean up old files first";
}

my $destdir = $ENV{DESTDIR};

my $mtree = parse_mtree($destdir);

# and directories for dependencies as well
my $tmpdir = tempdir( CLEANUP => 1);
chdir($tmpdir);

may_annotate_and_move($plist);
may_annotate_and_move($pshared) and push(@has_shared, $out{$plist});
may_annotate_and_move($pdylib);

# Subpackage rules... better way would be to ask bsd.port.mk directly
my $plist2 = $plist;
$plist2 =~ s/PLIST.*$/PLIST/;

my $multi = $ENV{'MULTI_PACKAGES'};
# Normalize
$multi =~ s/^\s+//;
$multi =~ s/\s+$//;
unless ($multi eq '') {
	for my $sub (split(/\s+/, $multi)) {
		may_annotate_and_move("$plist$sub") or
		    may_annotate_and_move("$plist2$sub");
		may_annotate_and_move("$pshared$sub") and push(@has_shared, $out{"$plist$sub"});
		may_annotate_and_move("$pdylib$sub");
	}
}

for (@ARGV) {
	if (m/\=/) {
		my $back = $`;
		my $v = $';
		push(@backsubst, ["\${$back}", $v]) if $v ne '';
	}
}

my ($name, $fh);
while (($name, $fh) = each %out) {
}

# compare all files against those dates
my @date = (stat $ENV{INSTALL_PRE_COOKIE})[9, 10];

my %okay_files=map { $_=>1 } split(/\s+/, $ENV{'OKAY_FILES'});

# first, find any .la files for ignoring
find(
	sub {
		return unless /\.la$/;
		%ignored = (%ignored, libtoolise_plist($File::Find::name));
	}, $destdir);

# check the installation directory, try to make certain there is
# no file or directory outside of $base
find(
	sub {
		if ($File::Find::name eq $base) {
			$File::Find::prune = 1;
			return;
		}
		if (-d $_) {
			return if $File::Find::name eq $destdir;
			if (defined $mtree->{$File::Find::name}) {
				return;
			} else {
				print STDERR "Bogus directory: $File::Find::name\n";
			}
		} else {
			return if defined $okay_files{$File::Find::name};
			print STDERR "Bogus file: $File::Find::name\n";
		}
	}, $destdir);

# recursive traversal: mark specific 'info' dirs, 'ldconfig' dirs,
# and potentially modified dirs

find(
	sub {
		my @cdate = (lstat $_)[9, 10];
		if ($cdate[0] >= $date[0] || $cdate[1] >= $date[1]) {
			$has_stuff{$File::Find::dir} = 1;
			if (-d _) {
				$newdir{$File::Find::name} = 1;
			} else {
				return if defined $ignored{File::Spec->abs2rel(
					   $File::Find::name, $base)};
				if (/\.so\.\d+\.\d+$/) {
					$ldconfig{$File::Find::dir} = 1;
					push(@libfiles, $File::Find::name);
				} elsif (-l && /\.so\.\d+$/) {
				} elsif (-l && /\.so$/) {
				} elsif (/\.dylib$/) {
					$dyldconfig{$File::Find::dir} = 1;
					push(@dylibfiles, $File::Find::name);
				} else {
					push(@files, $File::Find::name);
					if (/\.info$/) {
						my $d = $File::Find::dir;
						$info_dir{$d} = [] unless defined $info_dir{$d};
						push(@{$info_dir{$d}}, $_);
					}
				}
			}
		} else {
			$occupied{$File::Find::dir} = 1;
		}
	}, $base);


# occupied marks a dir that was already there...
# so all parents had to be around too
for my $d (keys %occupied) {
	while ($d ne '') {
		undef $newdir{$d} if defined $newdir{$d};
		$d =~ s|/.*?/?$||;
	}
}

# make sure mtree is removed
for my $d (keys %$mtree) {
	undef $newdir{$d}
}

unless (defined $out{$plist}) {
	$out{$plist} = new IO::File ">$plist";
	$out{$plist}->print("\@comment \$MirOS\$\n");
}

add_info('@unexec install-info --delete', \%info_dir);

for my $f (sort @files) {
	handle_file($f, $out{$plist}) unless ($f =~ m|/dir$|) && (defined $info_dir{$`});
}

for my $fh (@has_shared) {
    	$fh->print("\%\%SHARED\%\%\n");
}


if (@libfiles > 0) {
	unless (defined $out{$pshared}) {
		$out{$pshared} = new IO::File ">$pshared";
		$out{$pshared}->print("\@comment \$MirOS\$\n");
	}

    	$out{$plist}->print("\%\%SHARED\%\%\n") if @has_shared == 0;
	for my $f (sort @libfiles) {
	    handle_file("\@lib " . strip($f), $out{$pshared});
	}
} elsif (@dylibfiles > 0) {
	rename("$pshared.orig", $pshared) or die "Can't rename $pshared.orig to $pshared";
}

if (@dylibfiles > 0) {
	unless (defined $out{$pdylib}) {
		$out{$pdylib} = new IO::File ">$pdylib";
		$out{$pdylib}->print("\@comment \$MirOS\$\n");
	}

    	$out{$plist}->print("\%\%SHARED\%\%\n") if @has_shared == 0;
	for my $f (sort @dylibfiles) {
	    handle_file(strip($f), $out{$pdylib});
	}
}

for my $d (sort { $b cmp $a } (grep { $newdir{$_} } (keys %newdir) ) ) {
	my $dname = strip($d);
	if (defined $annotated_dir->{$dname}) {
		for my $l (@{$annotated_dir->{$dname}}) {
		    if (!$has_stuff{$d}) {
			    $l->[1]->print("\@exec mkdir -p \%D/$dname\n");
		    }
		    if (@$l == 3) {
			    $l->[1]->print("\@comment \@dirrm $dname\n");
		    } else {
			    $l->[1]->print("\@dirrm $dname\n");
		    }
		}
	} else {
		# case of new directory that does not hold anything: it's marked
		# for removal, but it must exist first
		if (!$has_stuff{$d}) {
			$out{$plist}->print("\@exec mkdir -p \%D/$dname\n");
		}
		$out{$plist}->print("\@dirrm $dname\n");
	}
}

add_info('@exec install-info', \%info_dir);

if ($manual) {
	print STDERR "make plist: subst/frag/exec/unexec spotted in original file\n";
	print STDERR "\tMay require manual intervention\n";
}
