#!/usr/bin/perl -W

use strict;
use File::Spec::Functions qw(catfile);
use Data::Dumper;

my $PORTSDIR = $ENV{PORTSDIR} || "/usr/ports";
die "Cannot find MirPorts under $PORTSDIR" unless (-d $PORTSDIR);
my $BULKDIR = $ENV{BULKDIR} || catfile($PORTSDIR, "Bulk");
my $LOGDIR = catfile($PORTSDIR, "Logs");

my $starttime = localtime;
my $in_category = 0;
my $category;
my %totals = ( 	ok => 0,
		skipped => 0,
		broken => 0,
		failed => 0 );

sub start_output {
	# XXX
	my $arch = `cd $PORTSDIR/essentials/pkgtools && mmake show=OStriplet`;
	print <<EOF
<html><head><title>MirPorts Bulk Build, $starttime</title>
<style type="text/css">
td.skipped {
	width: 5em;
	text-align: center;
	font-weight: bold;
	color: black;
	background-color: white;
}

td.broken {
	width: 5em;
	text-align: center;
	font-weight: bold;
	color: black;
	background-color: #fc0;
}

td.failed {
	width: 5em;
	text-align: center;
	font-weight: bold;
	color: white;
	background-color: #f00;
}

td.ok {
	width: 5em;
	text-align: center;
	font-weight: bold;
	color: white;
	background-color: #0a0;
}
</style>
</head>
<body>
<h1>MirPorts Bulk build overview</h1>
<p>Created on $starttime for $arch</p>
<hr />
EOF
}

sub end_output {
	print "</table>\n\n" if $in_category;

	print "<hr>\n";
	print "<p><b>Totals</b>: $totals{'ok'} ok, $totals{'broken'} broken, "; 
	print "$totals{'skipped'} skipped, $totals{'failed'} failed.</p>"; 
	print "</body></html>\n";
}

sub new_category {
	my $cat = shift;

	print "</table>\n\n" if $in_category;
	print "<h2>$cat</h2>\n\n";
	print "<table border=\"1\">\n";
	$in_category = 1;
}

sub print_entry {
	my ($name, $dir, $status) = @_;

	$status = $status || "skipped";
	$totals{$status}++;

	print "<tr>";
	print "<td class=\"$status\">$status</td>";
	if (-f catfile($LOGDIR, $name . ".log")) {
		print "<td><a href=\"Logs/$name.log\">$dir</a></td>";
	} else {
		print "<td>$dir</td>";
	}
	print "<td>$name</td>";
	print "</tr>\n";
}


######################################################################

my %index = ();

open INDEX, "<", catfile($PORTSDIR, "INDEX") or die "Cannot open INDEX: $!";
while (<INDEX>) {
	chomp;
	# pkgname, dir, prefix, comment, homepage, path_to_descr, responsible,
	# categories, lib, build, run_depends, only_for_platform, 
	# not_for_platform, permit_{package,distfiles}_{cdrom,ftp}
	my ($pkgname, $dir, undef, $comment, undef, undef, undef, undef, $libdeps,
		$builddeps, $rundeps) = split(/\|/);
	my %deps = ();

	# dependencies
	foreach my $i (split(' ', $libdeps." ".$builddeps." ".$rundeps)) {
		my @d = split(':', $i);
		$deps{$d[$#d]} = 1;
	}

	$index{$pkgname} = {dir	=> $dir,
			deps	=> \%deps };

	$index{$pkgname}->{"status"} = "broken" if ($comment =~ m/\(broken\)/);
}
close INDEX;

opendir(BULK, $BULKDIR) or die "Cannot open bulk cookie directory: $!";
while ($_ = readdir BULK) {
	next if m/^\./;
	print STDERR "$_: not in index!\n" if !exists $index{$_};
	$index{$_}->{"status"} = "ok";
	$index{$_}->{"dir"} = "" unless $index{$_}->{"dir"};
}
closedir(BULK);

if (open(FAILED, catfile($PORTSDIR, "Failed"))) {
	while (<FAILED>) {
		chomp;
		my $dir = $_;
		map { $index{$_}->{"status"} = "failed"
			if $index{$_}->{"dir"} eq $dir } keys %index;
	}
	close FAILED;
}
		
# Begin the output
start_output();

foreach my $j (sort { $index{$a}->{"dir"} cmp $index{$b}->{"dir"} } keys %index) {
	$index{$j}->{"dir"} =~ m/(.+?)\//;
	my $c = $1 || "No category";
	unless ($c eq $category) {
		new_category($c);
		$category = $c;
	}

	print_entry($j, $index{$j}->{"dir"}, $index{$j}->{"status"});
	# print $index{$j}->{"dir"} . " ($j): ";
	# map { print "$_ " } keys %{$index{$j}->{"deps"}};
	# print ($index{$j}->{"status"} || "unknown");
	# print "\n";
}

end_output();
