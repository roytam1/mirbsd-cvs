#!/usr/bin/env perl -W
# $MirOS: ports/infrastructure/scripts/cpan2port,v 1.2 2009/01/03 20:56:55 bsiegert Exp $
#-
# Copyright (c) 2008, 2009,
#	Benny Siegert <bsiegert@gmx.de>
#
# Licensee is hereby permitted to deal in this work without restric-
# tion, including unlimited rights to use, publically perform, modi-
# fy, merge, distribute, sell, give away or sublicence, provided the
# above copyright notices, these terms and the disclaimer are retai-
# ned in all redistributions, or reproduced in accompanying documen-
# tation or other materials provided with binary redistributions.
#
# Licensor hereby provides this work "AS IS" and WITHOUT WARRANTY of
# any kind, expressed or implied, to the maximum extent permitted by
# applicable law, but with the warranty of being written without ma-
# licious intent or gross negligence; in no event shall licensor, an
# author or contributor be held liable for any damage, direct, indi-
# rect or other, however caused, arising in any way out of the usage
# of covered work, even if advised of the possibility of such damage.
#-

use strict;
use File::Spec::Functions qw(catfile);
use File::chdir;
use CPAN;
use Pod::Text;
use ExtUtils::MakeMaker qw(prompt);
use File::Copy;
use Data::Dumper; # DEBUG

my $PORTSDIR = $ENV{PORTSDIR} || "/usr/ports";
die "Cannot find MirPorts under $PORTSDIR" unless (-d $PORTSDIR);

#### Exceptions and inconsistencies
# ports ("base" is a special value)
my %mp_exceptions = (
	"TimeDate" 		 => "devel/p5-TimeDate",
	"TermReadKey"		 => "devel/p5-Term-ReadKey",
	"ANSIColor"		 => "base",
	"Attribute-Handlers"	 => "base",
	"CGI"			 => "base",
	"CGI.pm"		 => "base",
	"constant"		 => "base",
	"Digest"		 => "base",
	"Exporter"		 => "base",
	"ExtUtils-MakeMaker"	 => "base",
	"File-Path"		 => "base",
	#"File-Temp"		 => "base",
	"Filter-Simple"		 => "base",
	#"Getopt-Long"		 => "base",
	"IO"			 => "base",
	"libnet"		 => "base",
	"Locale-Codes"		 => "base",
	"Locale-Maketext"	 => "base",
	"Math-BigInt"		 => "base",
	"Memoize"		 => "base",
	"NEXT"			 => "base",
	"PerlIO-via-QuotedPrint" => "base",
	"Pod-parser"		 => "base",
	"Pod-LaTeX"		 => "base",
	"Pod-Perldoc"		 => "base",
	"podlators"		 => "base",
	"SelfLoader"		 => "base",
	"Shell"			 => "base",
	"Storable"		 => "base",
	"Switch"		 => "base",
	"Term-Cap"		 => "base",
	"Test"			 => "base",
	"Test-Simple"		 => "base",
	"Test-Harness"		 => "base",
	"Text-Balanced"		 => "base",
	"Text-ParseWords"	 => "base",
	"Text-Soundex"		 => "base",
	"Text-Tabs+Wrap"	 => "base",
	"Thread-Queue"		 => "base",
	"Thread-Semaphore"	 => "base",
	"Tie-File"		 => "base",
	"Tie-RefHash"		 => "base",
	"Time-Local"		 => "base",
	"Unicode-Collate"	 => "base"
);

# non-CPAN distribution
my %cpan_exceptions = (
	"SVN::Core"		=> "devel/subversion"
);

######################################################################

sub is_port {
	my $name = shift;

	return $mp_exceptions{$name} if $mp_exceptions{$name};

	local $CWD = $PORTSDIR;
	my @dirs = glob("*/*p5-" . $name);
	return $dirs[0];
}

sub write_descr {
	my $p = shift;		# params reference

	my $file;
	my $indescr = 0;
	my $inname = 0;

	$file =  catfile($p->{"dist"}->dir, "lib", split /::/,
			($p->{"mod"} ? $p->{"mod"}->id : $p->{"dist"}->containsmods()->[0]));
	unless (open MOD, "<", $file . ".pod") {
		unless (open MOD, "<", $file . ".pm") {
			print STDERR "Warning: Cannot open module to guess description\n";
			return;
		}
	}

	unless (open DESCR, ">", "DESCR") {
		print STDERR "Cannot open DESCR for writing: $!\n";
		return;
	}
	my $parser = Pod::Text->new(indent => 0, width => 72);
	$parser->output_fh(*DESCR);

	while (<MOD>) {
		if ($inname == 0 and m/^=head1\s+NAME/) {
			$inname = 1;
			next;
		}
		if ($indescr == 0 and m/^=head1\s+DESCRIPTION/) {
			$indescr = 1;
			$parser->parse_lines("=pod");
			next;
		}

		if ($inname) {
			chomp;
			next if $_ eq "";
			$inname = 0 if m/^=/;
			m/\s-+\s+(.*)$/;
			$p->{"COMMENT"} = lcfirst $1 if $1;
		}
		if ($indescr) {
			last if m/^=/;
			$parser->parse_lines($_);
		}
	}

	$parser->parse_lines(undef);
	close MOD;
	close DESCR;
}

sub has_xs {
	my $dist = shift;
	local $CWD = $dist->dir;

	return "" if (glob "*.c" or glob "*.xs");
	return "\nPKG_ARCH=\t\t*\n";
}

sub handle_prereq {
	my $prereq = shift;
	my %mp_prereq = ();
	my ($mod, $dist, $port, $key);
	my $dep = ""; # returns a string for the dependencies
	my @incomplete;	

	print "====> Dependencies:\n\n" if (keys %$prereq);

	foreach $key (keys %$prereq) {
		$mod = CPAN::Shell->expand("Module", $key);
		$dist = CPAN::Shell->expand("Distribution", $mod->cpan_file);

		if (!$dist) {
			print "- $key: distribution not in CPAN\n";
			delete $prereq->{$key} unless $cpan_exceptions{$key};
			next;
		}
		if ($dist->isa_perl) {
			print "- $key: is part of perl\n";
			delete $prereq->{$key};
			next;
		}

		my %id = split_id($dist->id);
		$port = is_port($id{"NAME"});
		if ($port) {
			print "- $key: is in $port\n";
			next;
		}
		
		# no port, we need to do one
		push @incomplete, $key;
	}

	print "\n";
	
	if (@incomplete) {
		my $cmd = "perl " . catfile($PORTSDIR,
			"infrastructure", "scripts", "cpan2port");
		print "The following dependencies need to be ported:\n\n";
		map { print "- $_\n"; $cmd .= " $_" } @incomplete;
		system ($cmd) if (prompt("\nContinue?", "y") eq "y");
	}

	# do a second pass over the dependencies, we now have the ports (?)
	foreach $key (keys %$prereq) {
		if ($cpan_exceptions{$key}) {
			$port = $cpan_exceptions{$key};
		} else {
			$mod = CPAN::Shell->expand("Module", $key);

			my %id = split_id($mod->cpan_file);
			$port = is_port($id{"NAME"});
			die $id{"NAME"} . ": dependency still unsatisfied!"
				unless $port;
		}
		# put portpath and min_version into a hash so we eliminate
		# duplicates
		$mp_prereq{$port} = $prereq->{$key};
	}

	# and a third pass, where we construct the dependency string ...
	foreach $key (keys %mp_prereq) {
		next if $key eq "base";

		$key =~ m/.*\/(.+)/;
		$dep .= "B_R_DEPENDS+=\t\t:" . ($mp_prereq{$key} ? $1 . ">="
			. $mp_prereq{$key} : "") . ":" . $key . "\n";
	}
	return $dep;
}

sub guess_params {
	my $thing = shift;
	my %p;			# parameters
	my ($dist, $mod);

	if ($thing->isa('CPAN::Module')) {
		$mod = $thing;
		$dist = CPAN::Shell->expand("Distribution", $mod->cpan_file);
	} elsif ($thing->isa('CPAN::Distribution')) {
		$dist = $thing;
	} else {
		print STDERR "$thing->id: type not supported\n";
		return undef;
	}
	if ($dist->isa_perl) {
		print STDERR "$thing->id: is part of perl\n";
		return undef;
	}

	%p = split_id($dist->id);
	print "===> ", $p{"DISTNAME"}, "\n";
	
	my $port = is_port($p{"NAME"});
	if ($port) {
		print "This module exists already in $port.\n";
		return unless prompt("Still continue?", "n") eq "y";
		$port =~ m/(.*)\//;
		print "If you choose $1 as a category, the original port will be overwritten.\n";
	}

	print "====> "; # message is printed by CPAN.pm
	$dist->make;
	$p{"DECLS"} = handle_prereq($dist->prereq_pm) . has_xs($dist);

	#guess_descr(\%p, $dist, $mod);
	$p{"dist"} = $dist;
	$p{"mod"} = $mod;

	return %p;
}

sub split_id {
	my $id = shift;
	my %rv = ( "DIST_ID" => $id );

	if ($id =~ m/(.+)\/(.+?)-([0-9][0-9\._]*)(\.[a-z].+)/) {
		$rv{"PATH"} = $1;
		$rv{"NAME"} = $2;
		$rv{"VERSION"} = $3;
		$rv{"EXTRACT_SUFX"} = $4;
		$rv{"DISTNAME"} = "$2-$3";
	}
	
	return %rv;
}


sub write_makefile {
	my $p = shift;
	my $key;

	$p->{"DECLS"} .= "EXTRACT_SUFX=\t\t" . $p->{"EXTRACT_SUFX"}
		if (defined($p->{"EXTRACT_SUFX"})
		and $p->{"EXTRACT_SUFX"} ne ".tar.gz");
	$p->{"DECLS"} .= "\n# \@\@DECLS\@\@";

	open TMPL, "<", catfile($PORTSDIR, "infrastructure", "templates",
		"perlmod.Makefile") or die "Cannot open Makefile template";
	open OUT, "> Makefile" or die "Cannot open Makefile for output";

	while (<TMPL>) {
		foreach $key (keys %$p) {
			s/\@$key\@/$p->{$key}/;
		}
		print OUT $_;
	}

	close TMPL;
	close OUT;
}

sub copy_distfile {
	my $p = shift;
	my ($distfile, $dir);

	$dir = catfile($PORTSDIR, "Distfiles");
	unless (-d $dir) {
		unless (mkdir $dir) {
			print STDERR "Cannot create $dir: $!\n";
			return;
		}
	}

	# I cannot query CPAN::Config, so take an educated guess
	$distfile = catfile($ENV{"HOME"}, ".cpan", "sources", "authors", "id",
		$p->{"DIST_ID"});
	if (-f $distfile) {
		print "====> Copying " . $p->{"DIST_ID"}
			. " to Distfiles directory\n";
		if (copy($distfile, $dir)) {
			system("mmake makesum NO_DEPENDS=Yes");
		} else {
			print STDERR "Error copying distfile: $!\n";
		}
	} else {
		print STDERR "CPAN distfile copy not found!\n";
	}
}


sub choose_category {
	my %categories;
	my $choice;
	my $use_rs = 1;

	# Categories are directories starting with a small letter.
	opendir DIR, $PORTSDIR or die "Cannot opendir $PORTSDIR";
	%categories = map { $_, 1 } grep { (/^[a-z]/ || /Mystuff/) && -d
		catfile($PORTSDIR, $_) } readdir(DIR);
	closedir DIR;

	# optionally pretty-print the list using the rs command
	open RS, "| rs" or $use_rs = 0;
	print "====> Possible categories are:\n\n";
	foreach my $i (sort keys %categories) {
		if ($use_rs) {
			print RS $i . "\n";
		} else {
			print $i . "\n";
		}
	}
	close RS if ($use_rs);
	
	do {
		$choice = prompt("\nWhich category does the port belong to?",
				"devel");
	} until $categories{$choice};

	return $choice;
}

######################################################################

if (!@ARGV || $ARGV[0] eq "--help") {
	print "Usage: cpan2port.pl name ...\n\n";
	print "\"name\" is either a module name, a distribution name,\n";
	print "or a regexp for either, like /foo/.\n";
	exit 1;
}

my @things = map { CPAN::Shell->expandany($_); } @ARGV;
die "No matches found on CPAN" if (!@things);

print "===> The following matches have been found using CPAN:\n\n";
map { print "- " . $_->as_glimpse; } @things;
my $response = prompt("Continue?", "y");

exit 0 unless $response eq "y";

#my %test = ( COMMENT => "this is a comment",
#	DISTNAME => "Foo-Bar-1.23",
#	CATEGORY => "devel",
#	DECLS => "PKG_ARCH= *\n"
#);
#write_makefile(\%test);
my $oldcwd = $CWD;

foreach my $i (@things) {
	my %params = guess_params($i) or next;

	print "===> Choose category for" . $params{"DISTNAME"} . "\n";
	$params{"CATEGORY"} = choose_category();
	my $dir = catfile($PORTSDIR, $params{"CATEGORY"},
		"p5-" . $params{"NAME"});
	mkdir $dir || die "Cannot create port directory: $!";
	$CWD = $dir;

	print "====> Writing files for " . $params{"DISTNAME"} . "\n";
	write_descr(\%params);
	write_makefile(\%params);
	copy_distfile(\%params);

	print "====> Dropping to a shell in $dir, press Ctrl+D to return\n";
	my $shell = $ENV{"SHELL"};
	$shell = "mksh" unless $shell;
	system($shell);
}
