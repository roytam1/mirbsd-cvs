#!/usr/bin/perl -W
# $MirOS$
#-
# Copyright (c) 2005,
#	Benny Siegert <bsiegert@gmx.de>
#
# Licensee is hereby permitted to deal in this work without restric-
# tion, including unlimited rights to use, publically perform, modi-
# fy, merge, distribute, sell, give away or sublicence, provided the
# above copyright notices, these terms and the disclaimer are retai-
# ned in all redistributions, or reproduced in accompanying documen-
# tation or other materials provided with binary redistributions.
#
# Licensor hereby provides this work "AS IS" and WITHOUT WARRANTY of
# any kind, expressed or implied, to the maximum extent permitted by
# applicable law, but with the warranty of being written without ma-
# licious intent or gross negligence; in no event shall licensor, an
# author or contributor be held liable for any damage, direct, indi-
# rect or other, however caused, arising in any way out of the usage
# of covered work, even if advised of the possibility of such damage.
#-

use strict;
use File::Spec;

# Given the name of a .la file, return a list of files referenced by it.
sub libtoolise_plist
{
	my $file = shift;
	my $prefix;
	my @libnames;

	open(FILE, '<', $file) || die "Cannot open $file";
	while (<FILE>) {
		chomp;
		next unless m/^([^=]+)='(.*)'$/;
		if ($1 eq 'libdir') {
			$prefix = File::Spec->abs2rel($2, $ENV{LOCALBASE});
		} elsif (	  ($1 eq 'dlname')
				||($1 eq 'library_names')
				||($1 eq 'old_library')) {
			push(@libnames, split(/ /, $2));
		}
	}
	close(FILE);

	foreach (@libnames) {
		$_ = File::Spec->catfile($prefix, $_);
	}
	# remove duplicates
	return %{{ map { $_ => 1 } File::Spec->no_upwards(@libnames) }};
}

my %ltlibs = ();
my @plist = <>;

foreach my $entry (@plist) {
	chomp $entry;
	%ltlibs = (%ltlibs, %{{ libtoolise_plist($entry) }}) if ($entry =~ m/\.la$/);
}
# twofold iteration not an oversight
foreach (@plist) {
	print $_ . "\n";
	$ltlibs{$_} = 0 if defined $ltlibs{$_};
	if (m/^\@lib /) {
		$ltlibs{$'} = 0 if defined $ltlibs{$'};
	}
}

while (my ($key, $value) = each(%ltlibs)) {
	next unless $value == 1;
	if ($key =~ m/lib.*\.so\.\d+\.\d+/) {
		print "\@lib $key\n";
	} else {
		print $key . "\n";
	}
}
