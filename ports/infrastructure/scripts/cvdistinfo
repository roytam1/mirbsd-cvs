#!/bin/mksh
# $MirOS: ports/infrastructure/scripts/cvdistinfo,v 1.2 2008/07/11 15:46:12 tg Exp $
#-
# Copyright (c) 2008
#	Thorsten Glaser <tg@mirbsd.org>
#
# Provided that these terms and disclaimer and all copyright notices
# are retained or reproduced in an accompanying document, permission
# is granted to deal in this work without restriction, including un-
# limited rights to use, publicly perform, distribute, sell, modify,
# merge, give away, or sublicence.
#
# This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
# the utmost extent permitted by applicable law, neither express nor
# implied; without malicious intent or gross negligence. In no event
# may a licensor, author or contributor be held liable for indirect,
# direct, other damage, loss, or other issues arising in any way out
# of dealing in the work, even if advised of the possibility of such
# damage or existence of a defect, except proven that it results out
# of said person's immediate fault when using the work as intended.
#-
# Shell script to convert a distinfo file
# - from OpenBSD ports to MirPorts
# - from NetBSD pkgsrc to MirPorts: no action needed
# - from MirPorts to OpenBSD ports
# - from MirPorts to NetBSD pkgsrc: not implemented

set -A algos MD4 MD5 RMD160 SHA1 SHA256 SHA384 SHA512 TIGER WHIRLPOOL
set -A algsz 32  32  40     40   64     96     128    48    128
set -A b64sz 24  24  28     28   44     64     88     32    88

function usage {
	print -u2 "syntax: $0 -[Oo] file [...]"
	exit 1
}

integer mode=0

while getopts "Oo" ch; do
	case $ch {
	(O)	mode=2 ;;	# to openbsd
	(o)	mode=1 ;;	# from openbsd
	(P)	mode=4 ;;	# to pkgsrc
	(p)	mode=3 ;;	# from pkgsrc
	(*)	usage ;;
	}
done
shift $((OPTIND - 1))

(( mode )) || usage
[[ -n $1 ]] || usage

for file in "$@"; do
	if [[ ! -e "$file" ]]; then
		print -u2 -- "$0: $file does not exist, skipping"
		continue
	fi

	set -A content
	while IFS= read -r line; do
		content[${#content[*]}]=$line
	done <"$file"

	integer i=0
	while (( i < ${#content[*]} )); do
		line=${content[i++]}
		[[ $line = *@( = )* ]] || continue
		set -A fields -- $line
		integer alg=0
		while (( alg < ${#algos[*]} )); do
			[[ ${fields[0]} = ${algos[alg]} ]] && break
			let alg++
		done
		(( alg < ${#algos[*]} )) || continue
		hash=${fields[${#fields[*]}-1]}
		case $mode {
		(1)
			(( ${#hash} == ${b64sz[alg]} )) || continue
			content[i-1]=${line/$hash/$(b64decode -r <<<"$hash" | \
			    hexdump -ve '1/1 "%02x"')}
			;;
		(2)
			(( ${#hash} == ${algsz[alg]} )) || continue
			oldhash=$hash
			newhash=
			while [[ -n $oldhash ]]; do
				newhash="${newhash}\\x${oldhash::2}"
				oldhash=${oldhash:2}
			done
			content[i-1]=${line/$hash/$(print -n "$newhash" | \
			    b64encode -r)}
			;;
		}
	done

	for line in "${content[@]}"; do
		print -r -- "$line"
	done >"$file"
done
