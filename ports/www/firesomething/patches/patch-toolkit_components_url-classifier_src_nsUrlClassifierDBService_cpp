$MirOS: ports/www/firesomething/patches/patch-toolkit_components_url-classifier_src_nsUrlClassifierDBService_cpp,v 1.3 2008/12/08 22:38:53 tg Exp $
$OpenBSD: patch-toolkit_components_url-classifier_src_nsUrlClassifierDBService_cpp,v 1.1 2008/11/20 23:41:32 martynas Exp $
--- toolkit/components/url-classifier/src/nsUrlClassifierDBService.cpp.orig	Sat Nov 15 00:29:47 2008
+++ toolkit/components/url-classifier/src/nsUrlClassifierDBService.cpp	Wed Dec 17 23:12:57 2008
@@ -38,6 +38,9 @@
  *
  * ***** END LICENSE BLOCK ***** */
 
+#include <sys/types.h>
+#include <sha2.h>
+
 #include "nsAutoPtr.h"
 #include "nsCOMPtr.h"
 #include "mozIStorageService.h"
@@ -225,23 +228,11 @@ struct nsUrlClassifierHash
     // Each entry in the chunk is composed of the 128 most significant bits
     // of the SHA 256 hash of a suffix/prefix expression.
 
-    nsresult rv = hash->Init(nsICryptoHash::SHA256);
-    NS_ENSURE_SUCCESS(rv, rv);
+    char hashed[65];
+    (void)SHA256_Data(reinterpret_cast<const u_int8_t *>(plainText.BeginReading()), plainText.Length(), hashed);
 
-    rv = hash->Update
-      (reinterpret_cast<const PRUint8*>(plainText.BeginReading()),
-       plainText.Length());
-    NS_ENSURE_SUCCESS(rv, rv);
+    memcpy(buf, hashed, sHashSize);
 
-    nsCAutoString hashed;
-    rv = hash->Finish(PR_FALSE, hashed);
-    NS_ENSURE_SUCCESS(rv, rv);
-
-    NS_ASSERTION(hashed.Length() >= sHashSize,
-                 "not enough characters in the hash");
-
-    memcpy(buf, hashed.BeginReading(), sHashSize);
-
     return NS_OK;
   }
 
@@ -2023,8 +2014,20 @@ nsUrlClassifierDBServiceWorker::GetShaEn
           return NS_ERROR_FAILURE;
         }
         const nsCSubstring& str = Substring(chunk, start, 4);
+#if 0
+        // You can't just cast a char* to an int* and access through it
         const PRUint32 *p = reinterpret_cast<const PRUint32*>(str.BeginReading());
         entry->mAddChunkId = PR_ntohl(*p);
+#else
+        // the old-school way...
+        union {
+          PRUint32 i;
+          char c[4];
+        } u;
+
+        memcpy(u.c, reinterpret_cast<const char *>(str.BeginReading()), 4);
+        entry->mAddChunkId = PR_ntohl(u.i);
+#endif
         if (entry->mAddChunkId == 0) {
           NS_WARNING("Received invalid chunk number.");
           return NS_ERROR_FAILURE;
@@ -2052,8 +2055,20 @@ nsUrlClassifierDBServiceWorker::GetShaEn
 
         if (chunkType == CHUNK_SUB) {
           const nsCSubstring& str = Substring(chunk, start, 4);
+#if 0
+          // You can't just cast a char* to an int* and access through it
           const PRUint32 *p = reinterpret_cast<const PRUint32*>(str.BeginReading());
           entry->mAddChunkId = PR_ntohl(*p);
+#else
+          // the old-school way...
+          union {
+            PRUint32 i;
+            char c[4];
+          } u;
+
+          memcpy(u.c, reinterpret_cast<const char *>(str.BeginReading()), 4);
+          entry->mAddChunkId = PR_ntohl(u.i);
+#endif
           if (entry->mAddChunkId == 0) {
             NS_WARNING("Received invalid chunk number.");
             return NS_ERROR_FAILURE;
