$MirOS$

	Revert to lynx-2_8_7dev_11a version to fix UTF-8

--- src/UCdomap.c.orig	Thu Jan  1 01:22:02 2009
+++ src/UCdomap.c	Sun Jan 18 20:10:29 2009
@@ -1,5 +1,5 @@
 /*
- * $LynxId: UCdomap.c,v 1.72 2009/01/01 00:46:30 tom Exp $
+ * $LynxId: UCdomap.c,v 1.67 2007/07/30 19:43:05 tom Exp $
  *
  *  UCdomap.c
  *  =========
@@ -24,11 +24,8 @@
 #include <LYGlobalDefs.h>
 #include <UCdomap.h>
 #include <UCMap.h>
-#include <UCAux.h>
 #include <UCDefs.h>
 #include <LYCharSets.h>
-#include <LYStrings.h>
-#include <LYUtils.h>
 
 #if defined(USE_LOCALE_CHARSET) && defined(HAVE_LANGINFO_CODESET)
 #include <langinfo.h>
@@ -92,14 +89,10 @@ int auto_display_charset = -1;
 #endif
 
 static const char *UC_GNsetMIMEnames[4] =
-{
-    "iso-8859-1", "x-dec-graphics", "cp437", "x-transparent"
-};
+{"iso-8859-1", "x-dec-graphics", "cp437", "x-transparent"};
 
 static int UC_GNhandles[4] =
-{
-    -1, -1, -1, -1
-};
+{-1, -1, -1, -1};
 
 /*
  * Some of the code below, and some of the comments, are left in for
@@ -460,7 +453,7 @@ static int con_insert_unipair(u16 unicod
 	else
 	    uni_pagedir[n] = p1;
 	if (!p1)
-	    return ucError;
+	    return -1;
 
 	for (i = 0; i < 32; i++) {
 	    p1[i] = NULL;
@@ -470,7 +463,7 @@ static int con_insert_unipair(u16 unicod
     if (!(p2 = p1[n = (unicode >> 6) & 0x1f])) {
 	p2 = p1[n] = (u16 *) malloc(64 * sizeof(u16));
 	if (!p2)
-	    return ucError;
+	    return -1;
 
 	for (i = 0; i < 64; i++) {
 	    p2[i] = 0xffff;	/* No glyph for this character (yet) */
@@ -501,7 +494,7 @@ static int con_insert_unipair_str(u16 un
 	else
 	    uni_pagedir_str[n] = p1;
 	if (!p1)
-	    return ucError;
+	    return -1;
 
 	for (i = 0; i < 32; i++) {
 	    p1[i] = NULL;
@@ -513,7 +506,7 @@ static int con_insert_unipair_str(u16 un
 	p1[n] = (char **) malloc(64 * sizeof(char *));
 
 	if (!p1[n])
-	    return ucError;
+	    return -1;
 
 	p2 = (const char **) p1[n];
 	for (i = 0; i < 64; i++) {
@@ -646,7 +639,7 @@ static int UC_con_set_unimap(int UC_char
     if (!UC_valid_UC_charset(UC_charset_out_hndl)) {
 	CTRACE((tfp, "UC_con_set_unimap: Invalid charset handle %d.\n",
 		UC_charset_out_hndl));
-	return ucError;
+	return -1;
     }
 
     p = UCInfo[UC_charset_out_hndl].unitable;
@@ -720,12 +713,12 @@ static int conv_uni_to_pc(long ucs,
 	/*
 	 * Not a printable character.
 	 */
-	return ucError;
+	return -1;
     } else if (ucs == 0xfeff || (ucs >= 0x200b && ucs <= 0x200f)) {
 	/*
 	 * Zero-width space.
 	 */
-	return ucZeroWidth;
+	return -2;
     } else if ((ucs & ~UNI_DIRECT_MASK) == UNI_DIRECT_BASE) {
 	/*
 	 * UNI_DIRECT_BASE indicates the start of the region in the
@@ -738,11 +731,11 @@ static int conv_uni_to_pc(long ucs,
 
     if (usedefault) {
 	if (!unidefault_contents_valid)
-	    return ucInvalidHash;
+	    return -3;
 	p1 = unidefault_pagedir[ucs >> 11];
     } else {
 	if (!hashtable_contents_valid)
-	    return ucInvalidHash;
+	    return -3;
 	p1 = uni_pagedir[ucs >> 11];
     }
 
@@ -755,7 +748,7 @@ static int conv_uni_to_pc(long ucs,
     /*
      * Not found.
      */
-    return ucNotFound;
+    return -4;
 }
 
 /*
@@ -784,21 +777,21 @@ static int conv_uni_to_str(char *outbuf,
 	/*
 	 * Not a printable character.
 	 */
-	return ucError;
+	return -1;
     } else if (ucs == 0xfeff || (ucs >= 0x200b && ucs <= 0x200f)) {
 	/*
 	 * Zero-width space.
 	 */
-	return ucZeroWidth;
+	return -2;
     }
 
     if (usedefault) {
 	if (!unidefault_str_contents_valid)
-	    return ucInvalidHash;
+	    return -3;
 	p1 = unidefault_pagedir_str[ucs >> 11];
     } else {
 	if (!hashtable_str_contents_valid)
-	    return ucInvalidHash;
+	    return -3;
 	p1 = uni_pagedir_str[ucs >> 11];
     }
 
@@ -812,7 +805,7 @@ static int conv_uni_to_str(char *outbuf,
     /*
      * Not found.
      */
-    return ucNotFound;
+    return -4;
 }
 
 int UCInitialized = 0;
@@ -841,17 +834,10 @@ int UCTransUniChar(long unicode,
     const u16 *ut;
 
     if ((UChndl_out = LYCharSet_UC[charset_out].UChndl) < 0) {
-	if (LYCharSet_UC[charset_out].codepage < 0) {
-	    if (unicode < 128 || charset_out == UTF8_handle) {
-		rc = (int) unicode;
-	    } else {
-		rc = LYCharSet_UC[charset_out].codepage;
-	    }
-	    return rc;
-	}
-	if ((UChndl_out = default_UChndl) < 0) {
-	    return ucCannotOutput;
-	}
+	if (LYCharSet_UC[charset_out].codepage < 0)
+	    return (unicode < 128) ? (int) unicode : LYCharSet_UC[charset_out].codepage;
+	if ((UChndl_out = default_UChndl) < 0)
+	    return -12;
 	isdefault = 1;
     } else {
 	isdefault = UCInfo[UChndl_out].replacedesc.isdefault;
@@ -867,20 +853,18 @@ int UCTransUniChar(long unicode,
 	    }
 	}
 	rc = conv_uni_to_pc(unicode, 0);
-	if (rc >= 0) {
+	if (rc >= 0)
 	    return rc;
-	}
     }
     if (isdefault || trydefault) {
 	rc = conv_uni_to_pc(unicode, 1);
-	if (rc >= 0) {
+	if (rc >= 0)
 	    return rc;
-	}
     }
-    if (!isdefault && (rc == ucNotFound)) {
+    if (!isdefault && (rc == -4)) {
 	rc = conv_uni_to_pc(0xfffd, 0);
     }
-    if ((isdefault || trydefault) && (rc == ucNotFound)) {
+    if ((isdefault || trydefault) && (rc == -4)) {
 	rc = conv_uni_to_pc(0xfffd, 1);
     }
     return rc;
@@ -895,20 +879,20 @@ int UCTransUniCharStr(char *outbuf,
 		      int charset_out,
 		      int chk_single_flag)
 {
-    int rc = ucUnknown, src = 0, ignore_err;
+    int rc = -14, src = 0, ignore_err;
     int UChndl_out;
     int isdefault, trydefault = 0;
     struct unimapdesc_str *repl;
     const u16 *ut;
 
     if (buflen < 2)
-	return ucBufferTooSmall;
+	return -13;
 
     if ((UChndl_out = LYCharSet_UC[charset_out].UChndl) < 0) {
 	if (LYCharSet_UC[charset_out].codepage < 0)
 	    return LYCharSet_UC[charset_out].codepage;
 	if ((UChndl_out = default_UChndl) < 0)
-	    return ucCannotOutput;
+	    return -12;
 	isdefault = 1;
     } else {
 	isdefault = UCInfo[UChndl_out].replacedesc.isdefault;
@@ -954,8 +938,8 @@ int UCTransUniCharStr(char *outbuf,
     }
     if (isdefault || trydefault) {
 #ifdef EXP_JAPANESEUTF8_SUPPORT
-	if (LYCharSet_UC[charset_out].codepage == 0 &&
-	    LYCharSet_UC[charset_out].codepoints == 0) {
+	if ((strcmp(LYCharSet_UC[charset_out].MIMEname, "shift_jis") == 0) ||
+	    (strcmp(LYCharSet_UC[charset_out].MIMEname, "euc-jp") == 0)) {
 	    iconv_t cd;
 	    char str[3], *pin, *pout;
 	    size_t inleft, outleft;
@@ -967,41 +951,22 @@ int UCTransUniCharStr(char *outbuf,
 	    pin = str;
 	    inleft = 2;
 	    pout = outbuf, outleft = buflen;
-	    /*
-	     * Try TRANSLIT first, since it is an extension which can provide
-	     * translations when there is no available exact translation to
-	     * the target character set.
-	     */
 	    HTSprintf0(&tocode, "%s//TRANSLIT", LYCharSet_UC[charset_out].MIMEname);
 	    cd = iconv_open(tocode, "UTF-16BE");
-	    if (cd == (iconv_t) - 1) {
-		/*
-		 * Try again, without TRANSLIT
-		 */
-		HTSprintf0(&tocode, "%s", LYCharSet_UC[charset_out].MIMEname);
-		cd = iconv_open(tocode, "UTF-16BE");
-
-		if (cd == (iconv_t) - 1) {
-		    CTRACE((tfp,
-			    "Warning: Cannot transcode form charset %s to %s!\n",
-			    "UTF-16BE", tocode));
-		}
-	    }
 	    FREE(tocode);
-
-	    if (cd != (iconv_t) - 1) {
-		rc = iconv(cd, (ICONV_CONST char **) &pin, &inleft, &pout, &outleft);
-		iconv_close(cd);
-		if ((pout - outbuf) == 3) {
-		    CTRACE((tfp,
-			    "It seems to be a JIS X 0201 code(%ld). Not supported.\n", unicode));
-		    pin = str;
-		    inleft = 2;
-		    pout = outbuf, outleft = buflen;
-		} else if (rc >= 0) {
-		    *pout = '\0';
-		    return (strlen(outbuf));
-		}
+	    if (cd == (iconv_t) (-1))
+		cd = iconv_open(LYCharSet_UC[charset_out].MIMEname, "UTF-16BE");
+	    rc = iconv(cd, (ICONV_CONST char **) &pin, &inleft, &pout, &outleft);
+	    iconv_close(cd);
+	    if ((pout - outbuf) == 3) {
+		CTRACE((tfp,
+			"It seems to be a JIS X 0201 code(%ld). Not supported.\n", unicode));
+		pin = str;
+		inleft = 2;
+		pout = outbuf, outleft = buflen;
+	    } else if (rc >= 0) {
+		*pout = '\0';
+		return (strlen(outbuf));
 	    }
 	}
 #endif
@@ -1009,18 +974,18 @@ int UCTransUniCharStr(char *outbuf,
 	if (rc >= 0)
 	    return (strlen(outbuf));
     }
-    if (rc == ucNotFound) {
+    if (rc == -4) {
 	if (!isdefault)
 	    rc = conv_uni_to_str(outbuf, buflen, 0xfffd, 0);
-	if ((rc == ucNotFound) && (isdefault || trydefault))
+	if ((rc == -4) && (isdefault || trydefault))
 	    rc = conv_uni_to_str(outbuf, buflen, 0xfffd, 1);
 	if (rc >= 0)
 	    return (strlen(outbuf));
     }
-    if (chk_single_flag && src == ucNotFound) {
+    if (chk_single_flag && src == -4) {
 	if (!isdefault)
 	    rc = conv_uni_to_pc(0xfffd, 0);
-	if ((rc == ucNotFound) && (isdefault || trydefault))
+	if ((rc == -4) && (isdefault || trydefault))
 	    rc = conv_uni_to_pc(0xfffd, 1);
 	if (rc >= 32) {
 	    outbuf[0] = (char) rc;
@@ -1029,7 +994,7 @@ int UCTransUniCharStr(char *outbuf,
 	}
 	return rc;
     }
-    return ucNotFound;
+    return -4;
 }
 
 static int UC_lastautoGN = 0;
@@ -1077,30 +1042,32 @@ int UCTransChar(char ch_in,
 		int charset_out)
 {
     int unicode, Gn;
-    int rc = ucNotFound;
+    int rc = -4;
     int UChndl_in, UChndl_out;
     int isdefault, trydefault = 0;
     const u16 *ut;
     int upd = 0;
 
+#ifndef UC_NO_SHORTCUTS
     if (charset_in == charset_out)
 	return UCH(ch_in);
+#endif /* UC_NO_SHORTCUTS */
     if (charset_in < 0)
-	return ucCannotConvert;
+	return -11;
     if ((UChndl_in = LYCharSet_UC[charset_in].UChndl) < 0)
-	return ucCannotConvert;
+	return -11;
     if ((UChndl_out = LYCharSet_UC[charset_out].UChndl) < 0) {
 	if (LYCharSet_UC[charset_out].codepage < 0)
 	    return LYCharSet_UC[charset_out].codepage;
 	if ((UChndl_out = default_UChndl) < 0)
-	    return ucCannotOutput;
+	    return -12;
 	isdefault = 1;
     } else {
 	isdefault = UCInfo[UChndl_out].replacedesc.isdefault;
 	trydefault = UCInfo[UChndl_out].replacedesc.trydefault;
     }
     if (!UCInfo[UChndl_in].num_uni)
-	return ucCannotConvert;
+	return -11;
     if ((Gn = UCInfo[UChndl_in].GN) < 0) {
 	Gn = UC_MapGN(UChndl_in, 0);
 	upd = 1;
@@ -1128,13 +1095,13 @@ int UCTransChar(char ch_in,
 	if (rc >= 0)
 	    return rc;
     }
-    if ((rc == ucNotFound) && (isdefault || trydefault)) {
+    if ((rc == -4) && (isdefault || trydefault)) {
 	rc = conv_uni_to_pc(unicode, 1);
     }
-    if ((rc == ucNotFound) && !isdefault) {
+    if ((rc == -4) && !isdefault) {
 	rc = conv_uni_to_pc(0xfffd, 0);
     }
-    if ((rc == ucNotFound) && (isdefault || trydefault)) {
+    if ((rc == -4) && (isdefault || trydefault)) {
 	rc = conv_uni_to_pc(0xfffd, 1);
     }
     return rc;
@@ -1160,58 +1127,27 @@ long int UCTransJPToUni(char *inbuf,
     if ((ilen == 0) && (olen == 0)) {
 	return (((unsigned char) outbuf[0]) << 8) + (unsigned char) outbuf[1];
     }
-    return ucCannotConvert;
+    return -11;
 }
 #endif
 
-/*
- * Translate a character to Unicode.  If additional bytes are needed, this
- * returns ucNeedMore, based on its internal state.  To reset the state,
- * call this with charset_in < 0.
- */
 long int UCTransToUni(char ch_in,
 		      int charset_in)
 {
-    static char buffer[10];
-    static unsigned inx = 0;
-
     int unicode, Gn;
-    unsigned char ch_iu = UCH(ch_in);
+    unsigned char ch_iu;
     int UChndl_in;
 
-    /*
-     * Reset saved-state.
-     */
-    if (charset_in < 0) {
-	inx = 0;
-	return ucCannotConvert;
-    } else if (charset_in == LATIN1) {
+    ch_iu = UCH(ch_in);
+#ifndef UC_NO_SHORTCUTS
+    if (charset_in == LATIN1)
 	return ch_iu;
-    } else if (charset_in == UTF8_handle) {
-	if (is8bits(ch_in)) {
-	    unsigned need;
-	    char *ptr;
-
-	    buffer[inx++] = ch_iu;
-	    buffer[inx] = '\0';
-	    need = utf8_length(TRUE, buffer);
-	    if (need && (need + 1) == inx) {
-		inx = 0;
-		ptr = buffer;
-		return UCGetUniFromUtf8String(&ptr);
-	    } else if (inx < sizeof(buffer) - 1) {
-		return ucNeedMore;
-	    } else {
-		inx = 0;
-	    }
-	} else {
-	    inx = 0;
-	}
-    }
 #ifdef EXP_JAPANESEUTF8_SUPPORT
     if ((strcmp(LYCharSet_UC[charset_in].MIMEname, "shift_jis") == 0) ||
 	(strcmp(LYCharSet_UC[charset_in].MIMEname, "euc-jp") == 0)) {
+	static char buffer[3];
 	char obuffer[3], *pin, *pout;
+	static int inx = 0;
 	size_t rc, ilen, olen;
 	iconv_t cd;
 
@@ -1220,14 +1156,14 @@ long int UCTransToUni(char ch_in,
 	ilen = olen = 2;
 	if (strcmp(LYCharSet_UC[charset_in].MIMEname, "shift_jis") == 0) {
 	    if (inx == 0) {
-		if (IS_SJIS_HI1(ch_iu) ||
-		    IS_SJIS_HI2(ch_iu)) {
+		if (IS_SJIS_HI1((unsigned char) ch_in) ||
+		    IS_SJIS_HI2((unsigned char) ch_in)) {
 		    buffer[0] = ch_in;
 		    inx = 1;
-		    return ucNeedMore;
+		    return -11;
 		}
 	    } else {
-		if (IS_SJIS_LO(ch_iu)) {
+		if (IS_SJIS_LO((unsigned char) ch_in)) {
 		    buffer[1] = ch_in;
 		    buffer[2] = 0;
 
@@ -1236,20 +1172,21 @@ long int UCTransToUni(char ch_in,
 		    iconv_close(cd);
 		    inx = 0;
 		    if ((ilen == 0) && (olen == 0)) {
-			return (UCH(obuffer[0]) << 8) + UCH(obuffer[1]);
+			return (((unsigned char) obuffer[0]) << 8)
+			    + (unsigned char) obuffer[1];
 		    }
 		}
 	    }
 	}
 	if (strcmp(LYCharSet_UC[charset_in].MIMEname, "euc-jp") == 0) {
 	    if (inx == 0) {
-		if (IS_EUC_HI(ch_iu)) {
+		if (IS_EUC_HI((unsigned char) ch_in)) {
 		    buffer[0] = ch_in;
 		    inx = 1;
-		    return ucNeedMore;
+		    return -11;
 		}
 	    } else {
-		if (IS_EUC_LOX(ch_iu)) {
+		if (IS_EUC_LOX((unsigned char) ch_in)) {
 		    buffer[1] = ch_in;
 		    buffer[2] = 0;
 
@@ -1258,7 +1195,8 @@ long int UCTransToUni(char ch_in,
 		    iconv_close(cd);
 		    inx = 0;
 		    if ((ilen == 0) && (olen == 0)) {
-			return (UCH(obuffer[0]) << 8) + UCH(obuffer[1]);
+			return (((unsigned char) obuffer[0]) << 8)
+			    + (unsigned char) obuffer[1];
 		    }
 		}
 	    }
@@ -1266,27 +1204,27 @@ long int UCTransToUni(char ch_in,
 	inx = 0;
     }
 #endif
-    if (ch_iu < 128 && ch_iu >= 32)
+    if (UCH(ch_in) < 128 && UCH(ch_in) >= 32)
 	return ch_iu;
-
-    if (ch_iu < 32 &&
-	LYCharSet_UC[charset_in].enc != UCT_ENC_8BIT_C0) {
+#endif /* UC_NO_SHORTCUTS */
+    if (charset_in < 0)
+	return -11;
+    if (UCH(ch_in) < 32 &&
+	LYCharSet_UC[charset_in].enc != UCT_ENC_8BIT_C0)
 	/*
 	 * Don't translate C0 chars except for specific charsets.
 	 */
 	return ch_iu;
-    } else if ((UChndl_in = LYCharSet_UC[charset_in].UChndl) < 0) {
-	return ucCannotConvert;
-    } else if (!UCInfo[UChndl_in].num_uni) {
-	return ucCannotConvert;
-    }
-
+    if ((UChndl_in = LYCharSet_UC[charset_in].UChndl) < 0)
+	return -11;
+    if (!UCInfo[UChndl_in].num_uni)
+	return -11;
     if ((Gn = UCInfo[UChndl_in].GN) < 0) {
 	Gn = UC_MapGN(UChndl_in, 1);
     }
 
     UC_translate = set_translate(Gn);
-    unicode = UC_translate[ch_iu];
+    unicode = UC_translate[UCH(ch_in)];
 
     return unicode;
 }
@@ -1296,27 +1234,29 @@ int UCReverseTransChar(char ch_out,
 		       int charset_out)
 {
     int Gn;
-    int rc = ucError;
+    int rc = -1;
     int UChndl_in, UChndl_out;
     int isdefault;
     int i_ch = UCH(ch_out);
     const u16 *ut;
 
+#ifndef UC_NO_SHORTCUTS
     if (charset_in == charset_out)
 	return UCH(ch_out);
+#endif /* UC_NO_SHORTCUTS */
     if (charset_in < 0)
-	return ucCannotConvert;
+	return -11;
     if ((UChndl_in = LYCharSet_UC[charset_in].UChndl) < 0)
-	return ucCannotConvert;
+	return -11;
     if (!UCInfo[UChndl_in].num_uni)
-	return ucCannotConvert;
+	return -11;
     if (charset_out < 0)
-	return ucCannotOutput;
+	return -12;
     if ((UChndl_out = LYCharSet_UC[charset_out].UChndl) < 0) {
 	if (LYCharSet_UC[charset_out].codepage < 0)
 	    return LYCharSet_UC[charset_out].codepage;
 	if ((UChndl_out = default_UChndl) < 0)
-	    return ucCannotOutput;
+	    return -12;
 	isdefault = 1;
     } else {
 	isdefault = UCInfo[UChndl_out].replacedesc.isdefault;
@@ -1356,7 +1296,7 @@ int UCTransCharStr(char *outbuf,
 		   int chk_single_flag)
 {
     int unicode, Gn;
-    int rc = ucUnknown, src = 0, ignore_err;
+    int rc = -14, src = 0, ignore_err;
     int UChndl_in, UChndl_out;
     int isdefault, trydefault = 0;
     struct unimapdesc_str *repl;
@@ -1364,23 +1304,25 @@ int UCTransCharStr(char *outbuf,
     int upd = 0;
 
     if (buflen < 2)
-	return ucBufferTooSmall;
+	return -13;
+#ifndef UC_NO_SHORTCUTS
     if (chk_single_flag && charset_in == charset_out) {
 	outbuf[0] = ch_in;
 	outbuf[1] = '\0';
 	return 1;
     }
+#endif /* UC_NO_SHORTCUTS */
     if (charset_in < 0)
-	return ucCannotConvert;
+	return -11;
     if ((UChndl_in = LYCharSet_UC[charset_in].UChndl) < 0)
-	return ucCannotConvert;
+	return -11;
     if (!UCInfo[UChndl_in].num_uni)
-	return ucCannotConvert;
+	return -11;
     if ((UChndl_out = LYCharSet_UC[charset_out].UChndl) < 0) {
 	if (LYCharSet_UC[charset_out].codepage < 0)
 	    return LYCharSet_UC[charset_out].codepage;
 	if ((UChndl_out = default_UChndl) < 0)
-	    return ucCannotOutput;
+	    return -12;
 	isdefault = 1;
     } else {
 	isdefault = UCInfo[UChndl_out].replacedesc.isdefault;
@@ -1464,7 +1406,7 @@ int UCTransCharStr(char *outbuf,
 	}
 	return rc;
     }
-    return ucNotFound;
+    return -4;
 }
 
 static int UC_FindGN_byMIME(const char *UC_MIMEcharset)
@@ -1476,7 +1418,7 @@ static int UC_FindGN_byMIME(const char *
 	    return i;
 	}
     }
-    return ucError;
+    return -1;
 }
 
 int UCGetRawUniMode_byLYhndl(int i)
@@ -1495,7 +1437,7 @@ static int getLYhndl_byCP(const char *pr
 			  const char *codepage)
 {
     static int nested;
-    int result = ucError;
+    int result = -1;
 
     if (!nested++) {
 	char *cptmp = NULL;
@@ -1522,7 +1464,7 @@ int UCGetLYhndl_byMIME(const char *value
     if (!value || !(*value)) {
 	CTRACE((tfp,
 		"UCGetLYhndl_byMIME: NULL argument instead of MIME name.\n"));
-	return ucError;
+	return -1;
     }
 
     for (i = 0;
@@ -1546,19 +1488,14 @@ int UCGetLYhndl_byMIME(const char *value
 	return UCGetLYhndl_byMIME("utf-8");
     }
 #endif
-    if (!strncasecomp(value, "iso", 3) && !strncmp(value + 3, "8859", 4)) {
-	return getLYhndl_byCP("iso-", value + 3);
-    }
 #if !NO_CHARSET_euc_jp
-    if (!strcasecomp(value, "x-euc-jp") ||
-	!strcasecomp(value, "eucjp")) {
+    if (!strcasecomp(value, "x-euc-jp")) {
 	return UCGetLYhndl_byMIME("euc-jp");
     }
 #endif
 #if !NO_CHARSET_shift_jis
     if ((!strcasecomp(value, "x-shift-jis")) ||
-	(!strcasecomp(value, "x-sjis")) ||
-	(!strcasecomp(value, "pck"))) {
+	(!strcasecomp(value, "x-sjis"))) {
 	return UCGetLYhndl_byMIME("shift_jis");
     }
 #endif
@@ -1605,11 +1542,6 @@ int UCGetLYhndl_byMIME(const char *value
 	return UCGetLYhndl_byMIME("windows-1252");
     }
 #endif
-#if !NO_CHARSET_windows_1251
-    if (!strcasecomp(value, "ansi-1251")) {
-	return UCGetLYhndl_byMIME("windows-1251");
-    }
-#endif
 #if !NO_CHARSET_windows_1250
     if (!strcasecomp(value, "iso-8859-2-windows-latin-2") ||
 	!strcasecomp(value, "cp1250") ||
@@ -1657,7 +1589,7 @@ int UCGetLYhndl_byMIME(const char *value
     /* no more synonyms if come here... */
 
     CTRACE((tfp, "UCGetLYhndl_byMIME: unrecognized MIME name \"%s\"\n", value));
-    return ucError;		/* returns -1 if no charset found by that MIME name */
+    return -1;			/* returns -1 if no charset found by that MIME name */
 }
 
 /*
@@ -1710,7 +1642,7 @@ static const char **UC_setup_LYCharSets_
     const char **p;
     char **prepl;
     const u16 *pp;
-    const char **tp;
+    char **tp;
     const char *s7;
     const char *s8;
     size_t i;
@@ -1721,7 +1653,7 @@ static const char **UC_setup_LYCharSets_
     /*
      * Create a temporary table for reverse lookup of latin1 codes:
      */
-    tp = (const char **) malloc(96 * sizeof(char *));
+    tp = (char **) malloc(96 * sizeof(char *));
 
     if (!tp)
 	return NULL;
@@ -1766,7 +1698,7 @@ static const char **UC_setup_LYCharSets_
 	list = UCInfo[UC_charset_in_hndl].replacedesc.entries;
 	while (ct--) {
 	    if ((k = list->unicode) >= 160 && k < 256) {
-		tp[k - 160] = list->replace_str;
+		tp[k - 160] = (char *) list->replace_str;
 	    }
 	    list++;
 	}
@@ -1881,7 +1813,7 @@ static int UC_Register_with_LYCharSets(i
 	    CTRACE((tfp,
 		    "UC_Register_with_LYCharSets: Too many.  Ignoring %s/%s.",
 		    UC_MIMEcharset, UC_LYNXcharset));
-	    return ucError;
+	    return -1;
 	}
 	/*
 	 * Add to LYCharSets.c lists.
@@ -1991,8 +1923,6 @@ void UC_Charset_Setup(const char *UC_MIM
 						   UC_MIMEcharset,
 						   UC_LYNXcharset,
 						   lowest_eight);
-    CTRACE2(TRACE_CFG, (tfp, "registered charset %d mime \"%s\" lynx \"%s\"\n",
-			s, UC_MIMEcharset, UC_LYNXcharset));
     UCInfo[s].uc_status = status;
     if (found < 0)
 	UCNumCharsets++;
@@ -2032,7 +1962,7 @@ static int UC_NoUctb_Register_with_LYCha
     for (i = 0; i < MAXCHARSETS && LYchar_set_names[i] && LYhndl < 0; i++) {
 	if (LYCharSet_UC[i].MIMEname &&
 	    !strcmp(UC_MIMEcharset, LYCharSet_UC[i].MIMEname)) {
-	    return ucError;
+	    return -1;
 	}
     }
 
@@ -2041,7 +1971,7 @@ static int UC_NoUctb_Register_with_LYCha
 	CTRACE((tfp,
 		"UC_NoUctb_Register_with_LYCharSets: Too many.  Ignoring %s/%s.",
 		UC_MIMEcharset, UC_LYNXcharset));
-	return ucError;
+	return -1;
     }
     /*
      * Add to LYCharSets.c lists.
@@ -2097,7 +2027,7 @@ static void UC_Charset_NoUctb_Setup(cons
      * be returned immediately by UCTrans* functions.
      */
     if (!trydefault && codepage == 0)
-	codepage = ucCannotOutput;	/* if not already set; any negative should do. */
+	codepage = -12;		/* if not already set; any negative should do. */
     UC_NoUctb_Register_with_LYCharSets(UC_MIMEcharset,
 				       UC_LYNXcharset,
 				       lowest_eight,
@@ -2146,7 +2076,7 @@ static int CpOrdinal(const unsigned long
 	    s = i;
     }
     if (s < 0)
-	return ucError;
+	return -1;
     /* Store the "real" charset info */
     real_charsets[other != 0] = UCGetLYhndl_byMIME(mimeName);
     /* Duplicate the record. */
