.TH SSFE 1 "" "Roger Espel Llima" "BSD Reference Manual"
.SH NAME
ssfe \- split-screen front-end
.SH SYNOPSIS
.B ssfe
[options] program-name [program-options]
.SH DESCRIPTION
.B ssfe
runs a line-oriented program in the background, and provides a full
screen interface for it.  The bottom line of the screen is the input
line, which you can edit using emacs-like keys; above that is the
status bar, and the scrolling area with the program's output.
.PP
You can configure
.B ssfe
to reprint or not your own input lines, to use prompts, and to do word-wrap
on the program's output.
.PP
.B ssfe
also understands a little protocol to communicate with the program it is
running, which can be used to change the contents of the status line,
to set ssfe's modes and to prompt for input.
.SH OPTIONS
.TP
.BR "-raw"
Disables word-wrap and handling of control characters.  In this mode, ssfe
will not attempt keep track of the cursor's position.
.TP
.BR "-cooked"
Enables word-wrap, and prints control characters using inverse-video;  this
is the default mode.
.TP
.BR "-irc"
Same as -cooked, but also interprets Ctrl-B, Ctrl-V and Ctrl-_ with the
IRC convention (toggles for bold, inverse, underlined, respectively).
.TP
.BR "-hold"
Sets hold-mode.  In hold mode,
.B ssfe
will stop after each screenful, and wait for the user to hit TAB.
.TP
.BR "-beep"
In cooked or IRC mode, enables beeps.  When beeps are disabled, the
character Ctrl-G is displayed as an inverse-video G.
.TP
.BR "-flow"
Enables flow-control with ^S and ^Q.
.B ssfe
normally disables those, but some terminals require them to operate properly.
.TP
.BR "-print"
Enables printing of your own commands back in the scrolling area.
.TP
.BR "-prompt \fI<prompt>\fR"
Sets a prompt for the user input line.  The default prompt is none, or
``> '' if -print is specified.

.SH ARGUMENTS
.TP
.BR "program [options]"
Names the program that
.B ssfe
should run.

.SH KEYS
.B ssfe
understands these keys (^ means Control):
.TP
.BR "^\e"
Interrupt ssfe and whatever program it's running, and exit back to the unix
prompt.
.TP
.BR "^a"
Go to the beginning of the line.
.TP
.BR "^b, left arrow"
Move left a letter.
.TP
.BR "^c"
Interrupt: ignored by the front-end, can be used to interrupt connecting to a
server, with sirc.
.TP
.BR "^d"
Delete the character under the cursor.
.TP
.BR "^e"
Go to the end of the line.
.TP
.BR "^f, right arrow"
Move right a letter.
.TP
.BR "^h, DEL"
Erase the previous character.
.TP
.BR "^i, TAB"
Go to next /msg in msg history.
.TP
.BR "^j, ^m, Enter"
.TP
.BR "^k"
Erase from the cursor to the end of the line.
.TP
.BR "^l"
Redisplay the status bar and the command line.
.TP
.BR "^n, down arrow"
Go to the next line in command-line history.
.TP
.BR "^o"
With sirc, type the last msg you got on the command line
.TP
.BR "^p, up arrow"
Go to the previous line in command-line history.
.TP
.BR "^t"
With sirc, switch to the next channel you're on.
.TP
.BR "^u"
Erase command-line.
.TP
.BR "^v"
Insert the next character literally, even if it's a ^something.
.TP
.BR "^w"
Clear the screen unconditionally, for example if it's screwed up.
.TP
.BR "^x b"
Toggle beep on or off (off by default).
.TP
.BR "^x c"
Exit the front end, back to the unix prompt.
.TP
.BR "^x h"
Toggle hold mode.
.TP
.BR "^x i"
Toggle irc-mode (^b^v^_ handling) on and off.
.TP
.BR "^y"
Yank the current line in the history without sending it.
.TP
.BR "^z"
Suspend ssfe and sirc and go back to the unix prompt - you come back with 'fg'.

.SH "BASELINE PROTOCOL"
.IX Header "BASELINE PROTOCOL"
The baseline ssfe protocol, as implemented in the June 7, 1997 version of ssfe.c,
implements the following escapes, which must start at the beginning of a line,
be preceeded by string \*(L"`#ssfe#\*(R", and terminate with a newline. Unrecognised
escapes should be ignored. Commands may not be longer than 512 bytes in
length.
.IP "i" 4
.IX Item "i"
Enter \s-1IRC\s0 mode, and acknowledge by sending \*(L"@ssfe@i\*(R" and a newline. In \s-1IRC\s0
mode, the ^B, ^V and ^_ characters in the child process's output toggle
bold, inverse and underlined mode, respectively; the ^O character in the
child process's output turns off bold, inverse and underlined mode; ^I
characters skip to the next 8\-character tab stop; words that do not fit on a
line are wrapped to the next line; and control characters are displayed as
inverse characters.
.IP "c" 4
.IX Item "c"
Enter cooked mode, and acknowledge by sending \*(L"@ssfe@c\*(R" and a newline. Cooked
mode is like \s-1IRC\s0 mode except that the ^B, ^V, ^_ and ^O characters are not
processed specially. Cooked mode is the default mode.
.IP "s\fIstatus\fR" 4
.IX Item "sstatus"
Display the specified string in the status bar.
.IP "T\fIcttext\fR" 4
.IX Item "Tcttext"
Store \fIcttext\fR, which is truncated if it is longer than 126 characters.
Whenever the user presses ^T, \fIcttext\fR is sent to the child process,
followed by a newline. Pressing ^T does not affect the input line.
.IP "o\fIcotext\fR" 4
.IX Item "ocotext"
Store \fIcotext\fR. Whenever the user presses ^O, \fIcotext\fR is inserted in the
input line.
.IP "t\fItabtext\fR" 4
.IX Item "ttabtext"
Add \fItabtext\fR to the list of \*(L"tab lines\*(R". Each time the user presses the
tab key, the contents of the input line are obliterated and replaced with one
of the \*(L"tab lines\*(R". Repeatedly pressing the tab key causes the list of
\&\*(L"tab lines\*(R" to be cycled through. There is no length limit imposed on
\&\fItabtext\fR, but there is a limit of 20 \*(L"tab lines\*(R", after which new \*(L"t\*(R" escapes
replace old \*(L"tab lines\*(R" rather than adding new ones.
.IP "l" 4
.IX Item "l"
Clear the screen and turn off boldface, inverse and underlined modes.
.IP "p\fIprompt\fR" 4
.IX Item "pprompt"
Display \fIprompt\fR on the status line until the user has entered a line of
input. The user is not allowed to use the input history functions until a line
has been entered. \fIprompt\fR may be null but may not be greater than 8
characters. The child process may continue displaying lines and sending
escapes while waiting for the user to respond. Sending another \*(L"p\*(R" escape
before the user has entered a line in response to the first prompt will only
cause the prompt to be replaced with the new prompt; the new prompt will \s-1NOT\s0
be queued until the first prompt has been responded to. The user's response to
the prompt is not treated specially, i.e. it is sent to the child process
just as is any text the user enters. If \fIprompt\fR is greater than 8 characters,
the escape is silently ignored.
.IP "P\fIprompt\fR" 4
.IX Item "Pprompt"
Identical in functionality to the \*(L"p\*(R" escape, except that any characters the
user enters in response to the prompt will be displayed on the input line as
asterisks instead of echoed back. Sending a \*(L"p\*(R" escape before the user has
responded to the \*(L"P\*(R" escape's prompt will \s-1NOT\s0 re-enable normal echoing of
characters. Normal echoing of characters is only resumed once the user has
responded to the prompt.
.IP "n\fItext\fR" 4
.IX Item "ntext"
Insert \fItext\fR in the input buffer, as if the user had typed it. Control
characters and the like are inserted literally into the buffer.

.SH COPYING
.B ssfe
is free software. You can redistribute it and/or modify it under the GNU
General Public License as published by the Free Software Foundation.  See
the file /usr/share/doc/legal/COPYING-2 for details.

.SH SEE ALSO
.BR sirc (1)

.SH ENVIRONMENT VARIABLES
.TP
.BR TERM
sets the terminal type.  The terminal needs to be able to set a scrolling
zone for ssfe to work.

.SH BUGS
None known, please report to the author.

.SH AUTHOR
.B sirc
was written by Roger Espel Llima <roger.espel.llima@pobox.com>
and enhanced and fixed by Thorsten Glaser <tg@mirbsd.de>.
