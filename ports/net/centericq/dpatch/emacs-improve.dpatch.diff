--- centericq-4.21.0.orig/debian/patches/emacs-improve.dpatch
+++ centericq-4.21.0/debian/patches/emacs-improve.dpatch
@@ -0,0 +1,375 @@
+#! /bin/sh -e
+## emacs-improve.dpatch by Romain FRANCOISE <romain@orebokech.com>
+##
+## DP: add more emacs bindings (c-u, c-k, ...)
+
+[ -f debian/patches/00patch-opts ] && . debian/patches/00patch-opts
+patch_opts="${patch_opts:--f --no-backup-if-mismatch}"
+
+if [ $# -ne 1 ]; then
+    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
+    exit 1
+fi
+case "$1" in
+       -patch) patch $patch_opts -p1 < $0;;
+       -unpatch) patch $patch_opts -p1 -R < $0;;
+        *)
+                echo >&2 "`basename $0`: script expects -patch|-unpatch as argum
+ent"
+                exit 1;;
+esac
+
+exit 0
+diff -bBdNrw -U5 centericq-4.9.6.orig/kkconsui-0.1/include/conscommon.h centericq-4.9.6/kkconsui-0.1/include/conscommon.h
+--- centericq-4.9.6.orig/kkconsui-0.1/include/conscommon.h	2003-04-11 07:48:22.000000000 +0200
++++ centericq-4.9.6/kkconsui-0.1/include/conscommon.h	2003-09-14 02:02:58.000000000 +0200
+@@ -55,10 +55,18 @@
+ #define TTEE            kintf_graph ? ACS_TTEE          : '+'
+ #define BTEE            kintf_graph ? ACS_BTEE          : '+'
+ 
+ #define KEY_TAB 9
+ #define KEY_ESC 27
++#define KEY_EMACS_C_U 800
++#define KEY_EMACS_C_K 801
++#define KEY_EMACS_C_T 802
++#define KEY_EMACS_M_D 803
++#define KEY_EMACS_BEG_OF_BUFFER 804
++#define KEY_EMACS_END_OF_BUFFER 805
++#define KEY_EMACS_FORWARD_WORD  806
++#define KEY_EMACS_BACKWARD_WORD 807
+ 
+ #ifndef CTRL
+ #define CTRL(x) ((x) & 0x1F)
+ #endif
+ 
+diff -bBdNrw -U5 centericq-4.9.6.orig/kkconsui-0.1/include/texteditor.h centericq-4.9.6/kkconsui-0.1/include/texteditor.h
+--- centericq-4.9.6.orig/kkconsui-0.1/include/texteditor.h	2002-03-05 20:03:06.000000000 +0100
++++ centericq-4.9.6/kkconsui-0.1/include/texteditor.h	2003-09-14 02:02:58.000000000 +0200
+@@ -131,11 +131,15 @@
+ 	void edmove(int k, int options = 2);
+ 	void eddel(bool usetabs = true);
+ 	void edenter(bool countspaces = true);
+ 	void edbackspace();
+ 	void eddelline();
++	void eddelbegofline();
++	void eddelendofline();
++	void edtransposechar();
+ 	void eddelword();
++	void eddelwordemacs();
+ 
+ 	void inschar(int k);
+ 
+ 	void shiftmarkedblock(int delta);
+ 	
+diff -bBdNrw -U5 centericq-4.9.6.orig/kkconsui-0.1/src/conscommon.cc centericq-4.9.6/kkconsui-0.1/src/conscommon.cc
+--- centericq-4.9.6.orig/kkconsui-0.1/src/conscommon.cc	2003-01-19 03:14:50.000000000 +0100
++++ centericq-4.9.6/kkconsui-0.1/src/conscommon.cc	2003-09-14 02:02:58.000000000 +0200
+@@ -136,11 +136,18 @@
+ 	case CTRL('p'): return KEY_UP;
+ 	case CTRL('d'): return KEY_DC;
+ 	case CTRL('a'): return KEY_HOME;
+ 	case CTRL('e'): return KEY_END;
+ 	case CTRL('v'): return KEY_NPAGE;
+-	case CTRL('k'): return CTRL('y');
++	case CTRL('u'): return KEY_EMACS_C_U;
++	case CTRL('k'): return KEY_EMACS_C_K;
++	case CTRL('t'): return KEY_EMACS_C_T;
++	case ALT('d'): return KEY_EMACS_M_D;
++	case ALT('<'): return KEY_EMACS_BEG_OF_BUFFER;
++	case ALT('>'): return KEY_EMACS_END_OF_BUFFER;
++	case ALT('f'): return KEY_EMACS_FORWARD_WORD;
++	case ALT('b'): return KEY_EMACS_BACKWARD_WORD;
+ 	default: return k;
+     }
+ }
+ 
+ void printchar(char c) {
+diff -bBdNrw -U5 centericq-4.9.6.orig/kkconsui-0.1/src/texteditor.cc centericq-4.9.6/kkconsui-0.1/src/texteditor.cc
+--- centericq-4.9.6.orig/kkconsui-0.1/src/texteditor.cc	2003-06-26 09:44:14.000000000 +0200
++++ centericq-4.9.6/kkconsui-0.1/src/texteditor.cc	2003-09-14 02:03:38.000000000 +0200
+@@ -51,11 +51,11 @@
+ #define CSTRLEN       strlen(CURSTRING ? CURSTRING : "")
+ #define UPDATECURRENTLINE       { kgotoxy(x1, y1+curfile->y); showline(CURLINE, curfile->sx, x2-x1); }
+ 
+ #define MAX_STRLEN    10240
+ #define ALONE_DELIM   " ;(){}[].,:-+*/^?!=<>"
+-#define NONCHAR_DELIM " ;(){}[].,:-+*/^?!=<>\"'"
++#define NONCHAR_DELIM " ;(){}[].,:-+*/^?!=<>\"'_"
+ #define WORD_DELIM    " ,"
+ 
+ #define EM_TAB        2
+ #define EM_CTRL       4
+ #define EM_MANUAL     8
+@@ -1126,10 +1126,11 @@
+ 	eddel();
+     }
+ }
+ 
+ void texteditor::eddelword() {
++    // This is the kkconsui original version: it does not skip whitespace
+     char *p = CURSTRING, *e;
+     string deltext, n;
+     int count;
+ 
+     if(!strlen(p)) {
+@@ -1164,10 +1165,56 @@
+ 	draw(curfile->y);
+ 	updatecursor();
+     }
+ }
+ 
++void texteditor::eddelwordemacs() { 
++    // This is the "emacs-compliant" version, it skips all whitespace
++    char *p = CURSTRING, *e;
++    string deltext, n;
++    int count = 0;
++
++    if(!strlen(p)) {
++	if(CURLINE < curfile->lines->count-1) {
++	    eddelline();
++	    eddelwordemacs();
++	}
++    } else if(CURCOL == strlen(p)) {
++	if(CURLINE < curfile->lines->count-1) {
++	    eddel();
++	    if(currentchar() == ' ') eddelword();
++	}
++    } else {
++	n = p;
++	deltext = n.substr(CURCOL);
++	    
++	// skip whitespace
++	if(currentchar() == ' ') {
++	    count = strspn(p+CURCOL, " ");
++	    n.replace(CURCOL, count, "");
++	    curfile->lines->replace(CURLINE, strdup(n.c_str()));
++	}
++
++	n = p = CURSTRING;
++
++	if(!(e = strpbrk(&p[CURCOL], NONCHAR_DELIM))) e = p + strlen(p);
++
++	if((count = e-p-curfile->sx-curfile->x)) {
++	    n.replace(CURCOL, count, "");
++	} else {
++	    count += strspn(n.substr(CURCOL).c_str(), NONCHAR_DELIM);
++	    n.replace(CURCOL, strspn(n.c_str()+CURCOL, NONCHAR_DELIM), "");
++	}
++
++	deltext.resize(count);
++	curfile->lines->replace(CURLINE, strdup(n.c_str()));
++	modification(udelchar, deltext);
++	draw(curfile->y);
++	updatecursor();
++    }
++}
++
+ void texteditor::eddelline() {
+     char *p = (char *) curfile->lines->at(CURLINE);
+     string deltext = (string) p + "\n";
+ 
+     if(CURLINE+1 < curfile->lines->count) {
+@@ -1191,10 +1238,95 @@
+     abscol = 0;
+     draw(curfile->y);
+     updatecursor();
+ }
+ 
++void texteditor::eddelbegofline() {
++    char *p = CURSTRING;
++    string deltext, n;
++    int count = 0;
++
++    if(CURCOL == 0 && CURLINE) { // We're at the beginning of the line
++	edmove(KEY_UP);
++	edmove(KEY_END);
++	eddel();
++    } else if(CURCOL == strlen(p)) { // We're at the end
++	eddelline();
++    } else {
++	n = p;
++	deltext = (string) p;
++	
++	n.replace(curfile->sx, CURCOL, "");
++	
++	edmove(KEY_HOME);
++
++	curfile->lines->replace(CURLINE, strdup(n.c_str()));
++	modification(udelchar, deltext);
++	draw(curfile->y);
++	updatecursor();
++    }
++    
++}
++
++void texteditor::eddelendofline() {
++    char *p = CURSTRING;
++    string deltext, n;
++    int count = 0;
++
++    if(CURCOL == 0) { // We're at the beginning of the line
++	eddelline();
++    } else if (CURCOL == strlen(p)) { // We're at the end
++	eddel();
++    } else {
++	n = p;
++	deltext = (string) p + "\n";
++	
++	count = strlen(p) - CURCOL;
++	n.replace(CURCOL, count, "");
++
++	curfile->lines->replace(CURLINE, strdup(n.c_str()));
++	modification(udelchar, deltext);
++	draw(curfile->y);
++	updatecursor();
++    }
++    
++}
++
++void texteditor::edtransposechar() {
++    char *p = CURSTRING;
++    string deltext;
++    char tmp;
++
++    if (CURCOL == 0) return;
++    else if (CURCOL == strlen(p)) {
++	deltext = (string) p;
++	
++	tmp = p[CURCOL-2];
++	p[CURCOL-2] = p[CURCOL-1];
++	p[CURCOL-1] = tmp;
++	
++	curfile->lines->replace(CURLINE, strdup(p));
++	modification(udelchar, deltext);
++	draw(curfile->y);
++	updatecursor();
++    } else {
++	deltext = (string) p;
++	
++	tmp = p[CURCOL-1];
++	p[CURCOL-1] = p[CURCOL];
++	p[CURCOL] = tmp;
++	
++	setpos(CURCOL+1, CURLINE);
++
++	curfile->lines->replace(CURLINE, strdup(p));
++	modification(udelchar, deltext);
++	draw(curfile->y);
++	updatecursor();
++    }
++    
++}
++
+ void texteditor::edenter(bool countspaces) {
+     char *p = CURSTRING, *r;
+     string spaceins;
+     
+     if(wrap) strimtrail(p);
+@@ -1435,10 +1567,69 @@
+ 
+ 		    fix_x(options & EM_TAB);
+ 		    draw();
+ 		}
+ 		break;
++	    case KEY_EMACS_BEG_OF_BUFFER:
++		setpos(0, 0);
++		break;
++	    case KEY_EMACS_END_OF_BUFFER:
++		p = (char *) curfile->lines->at(curfile->lines->count-1);
++		i = strlen(p);
++		setpos(i, curfile->lines->count-1);
++		break;
++	    case KEY_EMACS_FORWARD_WORD:
++		if(endofline() && CURLINE < curfile->lines->count-1) {
++		    setpos(0, CURLINE+1);
++		    p = CURSTRING;
++		    if(strchr(NONCHAR_DELIM, p[CURCOL])) {
++			i = strspn(p+CURCOL, NONCHAR_DELIM);
++			setpos(CURCOL+i, CURLINE);
++		    }
++		} else if(endofline() && CURLINE == curfile->lines->count-1)
++		    return;
++		i = 0;
++		if(strchr(NONCHAR_DELIM, p[CURCOL])) 
++		    i = strspn(p+CURCOL, NONCHAR_DELIM);
++		i += strcspn(p+CURCOL+i, NONCHAR_DELIM);
++		setpos(CURCOL+i, CURLINE);
++		break;
++	    case KEY_EMACS_BACKWARD_WORD:
++		if(CURCOL == 0 && CURLINE > 0 && curfile->lines->count) {
++		    setpos(strlen((char *)curfile->lines->at(CURLINE-1)), 
++			   CURLINE-1);
++		}
++		
++		if(CURCOL > 0) {
++		    char *s;
++		    int len, offset = 0;
++
++		    p = CURSTRING;
++		    len = CURCOL;
++		    s = (char *)malloc(len+1);
++
++		    for(i = 0; i < len; i++) {
++			s[i] = p[len-i-1];
++		    }
++		    s[len] = '\0';
++
++		    if(strchr(NONCHAR_DELIM, p[CURCOL]) || 
++		       strchr(NONCHAR_DELIM, p[CURCOL-1]))
++			offset = strspn(s, NONCHAR_DELIM);
++
++		    offset += strcspn(s+offset, NONCHAR_DELIM);
++
++		    if(offset == CURCOL && strchr(NONCHAR_DELIM, p[0])) {
++			setpos(strlen((char *)curfile->lines->at(CURLINE-1)), 
++			       CURLINE-1);
++			edmove(KEY_EMACS_BACKWARD_WORD);
++		    } else
++			setpos(CURCOL-offset, CURLINE);
++
++		    if(s) free(s);
++		}
++		break;
+ 	}
+     }
+ 
+     if(curfile->x >= x2-x1)
+     switch(k) {
+@@ -1613,10 +1804,14 @@
+ 		case KEY_RIGHT:
+ 		case KEY_HOME:
+ 		case KEY_END:
+ 		case KEY_PPAGE:
+ 		case KEY_NPAGE:
++		case KEY_EMACS_BEG_OF_BUFFER:
++		case KEY_EMACS_END_OF_BUFFER:
++		case KEY_EMACS_FORWARD_WORD:
++		case KEY_EMACS_BACKWARD_WORD:
+ 		    edmove(k, EM_TAB | EM_CTRL | EM_MANUAL);
+ 		    updatecursor();
+ 		    break;
+ 
+ 		default:
+@@ -1636,10 +1831,22 @@
+ 			edbackspace();
+ 			break;
+ 		    case CTRL('y'):
+ 			eddelline();
+ 			break;
++		    case KEY_EMACS_C_U:
++			eddelbegofline();
++			break;
++		    case KEY_EMACS_C_K:
++			eddelendofline();
++			break;
++		    case KEY_EMACS_C_T:
++			edtransposechar();
++			break;
++		    case KEY_EMACS_M_D:
++			eddelwordemacs();
++			break;
+ 		    case KEY_TAB:
+ 			inschar('\t');
+ 			break;
+ 		    case CTRL('t'):
+ 			eddelword();
