$MirOS$
--- ssfe.c.orig	Tue Mar 10 12:55:32 1998
+++ ssfe.c	Thu Oct 21 09:29:06 2004
@@ -13,13 +13,16 @@
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
-   the Free Software Foundation. See the file LICENSE for details.
+   the Free Software Foundation. See the file
+   /usr/share/doc/legal/COPYING-2 for details.
 */
 
 #include <sys/time.h>
 #include <sys/types.h>
+#include <sys/ioctl.h>
 #include <stdio.h>
 #include <stdlib.h>
+#include <string.h>
 #include <fcntl.h>
 #include <unistd.h>
 #include <signal.h>
@@ -27,6 +30,8 @@
 
 #ifdef USE_SGTTY
 #include <sgtty.h>
+#elif defined(USE_TERM)
+#include <term.h>
 #else
 #include <termios.h>
 #endif
@@ -58,14 +63,14 @@ struct termios term, term0;
 
 int pid, mypid;
 int i;
-int cols, lines;
+int Cols, Lines;
 int readfd, writefd, errfd;
 
 unsigned char *t, *w;
 unsigned char tmpstr[BUF_SIZE], extrainput[BUF_SIZE+20], readbuf[2*BUF_SIZE],
 	      *input, *writebuf, o_buffer[BUF_SIZE];
 int bold=0, inv=0, under=0, wherex=0, wherey=0, donl=0;
-int hold_mode=0, hold_lines=0, ctrlx=0, beep=0, flow=0;
+int hold_mode=0, hold_Lines=0, ctrlx=0, beep=0, flow=0;
 
 unsigned char defprompt[]="> ",
 	 nullstring[]="",
@@ -77,7 +82,7 @@ struct tabinfo {
   unsigned char string[BUF_SIZE];
   struct tabinfo *prev, *next;
 };
-int tablines=0;
+int tabLines=0;
 struct tabinfo *curtabt=NULL, *curtabr=NULL, *oldest=NULL;
 
 #define MAX_HIST_LINES 50
@@ -86,7 +91,7 @@ struct histinfo {
   int len, plen;
   struct histinfo *prev, *next;
 };
-int histlines=0;
+int histLines=0;
 struct histinfo *histcurrent=NULL, *histoldest=NULL;
 
 char ctrl_t[128] = "/next\n";
@@ -108,11 +113,13 @@ int ansi_cs = 0;
 fd_set ready, result;
 extern int errno;
 
+#ifndef USE_TERM
 #ifdef __GNUC__
 extern unsigned char *tgoto(unsigned char *cm, int col, int line);
 #else
 extern unsigned char *tgoto();
 #endif
+#endif
 
 #ifdef __GNUC__
 int myputchar(int c) {
@@ -128,7 +135,7 @@ int addchar(int c) {
 #else
 int addchar(c) {
 #endif
-  (*w++)=(unsigned char)c;
+  return (*w++)=(unsigned char)c;
 }
 
 #ifdef __GNUC__
@@ -141,13 +148,13 @@ unsigned char *s; {
 }
 
 #ifdef __GNUC__
-int do_cs(int y1, int y2) {
+void do_cs(int y1, int y2) {
 #else
 int do_cs(y1, y2) {
 #endif
   static char temp[16];
   if (ansi_cs) {
-    sprintf(temp, "\e[%d;%dr", y1, y2);
+    snprintf(temp, 16, "\e[%d;%dr", y1, y2);
     write(1, temp, strlen(temp));
   } else putcap((char *)tgoto(t_cs, y2-1, y1-1));
 }
@@ -173,7 +180,7 @@ void gotoxy(x, y) {
 #define clearscreen() (putcap(t_cl))
 #define cleareol() (putcap(t_ce))
 #define fullscroll() (do_cs(0, 0))
-#define winscroll() (do_cs(1, lines-2))
+#define winscroll() (do_cs(1, Lines-2))
 #define setbold() (putcap(t_md))
 #define setunder() (putcap(t_us))
 #define setinv() (putcap(t_mr))
@@ -199,7 +206,7 @@ unsigned char *error; {
 #endif
   normal();
   fullscroll();
-  gotoxy(0, lines-1);
+  gotoxy(0, Lines-1);
   cleareol();
 #ifdef USE_SGTTY
   ioctl(ttyfd, TIOCSETP, &term0);
@@ -261,17 +268,17 @@ void sigwinch() {
 #ifdef TIOCGWINSZ
   signal(SIGWINCH, sigwinch);
   if (ioctl(ttyfd, TIOCGWINSZ, &wsz)>=0 && wsz.ws_row>0 && wsz.ws_col>0) {
-    lines=wsz.ws_row;
-    cols=wsz.ws_col;
+    Lines=wsz.ws_row;
+    Cols=wsz.ws_col;
     cursorwhere=2;
-    ystatus=lines-2;
-    yinput=lines-1;
+    ystatus=Lines-2;
+    yinput=Lines-1;
     wherex=0;
     wherey=ystatus-1;
     displaystatus();
-    if (inputlast>cols-8) {
-      inputcursor=cols-9;
-      inputofs=inputlast-cols+9;
+    if (inputlast>Cols-8) {
+      inputcursor=Cols-9;
+      inputofs=inputlast-Cols+9;
     } else {
       inputofs=0;
       inputcursor=inputlast;
@@ -310,9 +317,9 @@ void displaystatus() {
   fullscroll();
   gotoxy(0, ystatus);
   setinv();
-  write(1, statusline, cols-1);
+  write(1, statusline, Cols-1);
   if (hold_mode) {
-    gotoxy(cols-4, ystatus);
+    gotoxy(Cols-4, ystatus);
     write(1, "(h)", 3);
   }
   cursorwhere=2;
@@ -334,18 +341,13 @@ unsigned char *s, *t; {
   return 0;
 }
 
-#ifdef __GNUC__
 void addtab(unsigned char *line) {
-#else
-void addtab(line)
-unsigned char *line; {
-#endif
   struct tabinfo *nt;
 
   nt=oldest;
-  if (tablines) do {
+  if (tabLines) do {
     if (casecmp(nt->string, line)) {
-      strcpy(nt->string, line);
+      strlcpy(nt->string, line, BUF_SIZE);
       if (nt==oldest) oldest=nt->prev;
       else {
 	nt->prev->next=nt->next;
@@ -362,22 +364,22 @@ unsigned char *line; {
     nt=nt->next;
   } while (nt!=oldest);
 
-  if (!tablines) {
+  if (!tabLines) {
     nt=(struct tabinfo *)malloc(sizeof (struct tabinfo));
     nt->prev=nt->next=curtabt=curtabr=oldest=nt;
-    tablines++;
-  } else if (tablines<MAX_TAB_LINES) {
+    tabLines++;
+  } else if (tabLines<MAX_TAB_LINES) {
     nt=(struct tabinfo *)malloc(sizeof (struct tabinfo));
     nt->prev=oldest;
     nt->next=oldest->next;
     oldest->next=nt;
     nt->next->prev=nt;
-    tablines++;
+    tabLines++;
   } else {
     nt=oldest;
     oldest=nt->prev;
   }
-  strcpy(nt->string, line);
+  strlcpy(nt->string, line, BUF_SIZE);
   oldest=nt->prev;
   curtabt=oldest->next;
   curtabr=oldest;
@@ -398,8 +400,8 @@ void doprotcommand() {
     	       displaystatus();
     	       break;
     case 'T' : strncpy(ctrl_t, protcmd+1, 127); /* set ^t's text */
-	       ctrl_t[126] = '\0';
-	       strcat(ctrl_t, "\n");
+	       ctrl_t[126] = '\n';
+	       ctrl_t[127] = '\0';
 	       break;
     case 't' : addtab(protcmd+1); /* add tabkey entry */
     	       break;
@@ -419,7 +421,7 @@ void doprotcommand() {
 		   histcurrent->plen=plen;
 		 }
 		 input=extrainput;
-		 strcpy(input, protcmd+1);
+		 strlcpy(input, protcmd+1, BUF_SIZE+20);
 		 plen=strlen(input);
 		 inputofs=0;
 		 modified=specialprompt=1;
@@ -437,18 +439,18 @@ void doprotcommand() {
 		 inschar(*tmp);
 	       }
 	       break;
-    case 'o' : strcpy(o_buffer, protcmd+1);
+    case 'o' : strlcpy(o_buffer, protcmd+1, BUF_SIZE);
     	       break;
   }
 }
 
-void newline() {
+void Newline() {
   unsigned char t;
-  hold_lines++;
-  if (hold_mode && hold_lines>lines-4) {
+  hold_Lines++;
+  if (hold_mode && hold_Lines>Lines-4) {
     normal();
     fullscroll();
-    gotoxy(cols-4, ystatus);
+    gotoxy(Cols-4, ystatus);
     setinv();
     write(1, "(H)", 3);
     while(1) {
@@ -458,13 +460,13 @@ void newline() {
     }
     normal();
     fullscroll();
-    gotoxy(cols-4, ystatus);
+    gotoxy(Cols-4, ystatus);
     setinv();
     write(1, "(h)", 3);
-    hold_lines=0;
+    hold_Lines=0;
     normal();
     winscroll();
-    gotoxy(cols-1, wherey);
+    gotoxy(Cols-1, wherey);
     if (bold) setbold();
     if (under) setunder();
     if (inv) setinv();
@@ -480,7 +482,7 @@ int rc; {
 #endif
 
   unsigned char t, *r, *lwr, *lww;
-  int lwrc, lwbold, lwunder, lwinv, lwx;
+  int lwrc, lwbold = 0, lwunder = 0, lwinv = 0, lwx;
 
   if (cursorwhere!=0) {
     winscroll();
@@ -488,7 +490,7 @@ int rc; {
     cursorwhere=0;
   }
   if (donl) {
-    newline();
+    Newline();
     write(1, "\r\n", 2);
     normal();
     wherex=0;
@@ -521,16 +523,16 @@ int rc; {
   while(rc-->0) {
     t=(*r++);
     if (t=='\r') continue;
-    if (wherex>cols-2 || (t==9 && wherex>(cols-2)&0xfff8)) {
+    if ((wherex>Cols-2) || ((t==9) && (wherex>((Cols-2)&0xfff8)))) {
       if (t==' ' || t==9) ;
-      else if (lww>writebuf+cols/2) {
+      else if (lww>writebuf+Cols/2) {
 	wherex=lwx; r=lwr; w=lww; rc=lwrc;
 	bold=lwbold; inv=lwinv; under=lwunder; wherex=lwx;
       } else {
 	rc++; r--;
       }
       write(1, writebuf, w-writebuf);
-      newline();
+      Newline();
       write(1, "\r\n           ", 13);
       w=writebuf;
       lwr=r; lww=w; lwrc=rc;
@@ -541,7 +543,7 @@ int rc; {
     }
     if (t=='\n') {
       if (w!=writebuf) write(1, writebuf, w-writebuf);
-      newline();
+      Newline();
       write(1, "\r\n", 2);
       normal();
       w=writebuf;
@@ -609,7 +611,7 @@ int rc; {
   w=r=readbuf;
   while(rc-->0) {
     t=(*r++);
-    if (idstatus==0)
+    if (!idstatus) {
       if (*inid=='\0') {
 	idstatus=1;
 	wpc=protcmd;
@@ -624,7 +626,8 @@ int rc; {
 	wpc=protcmd;
 	inid=id;
       }
-    if (idstatus==1)
+    }
+    if (idstatus==1) {
       if (t=='\n')  {
         *wpc='\0';
         doprotcommand();
@@ -632,6 +635,7 @@ int rc; {
 	wpc=protcmd;
 	idstatus=0;
       } else (*wpc++)=t;
+    }
   }
   if (w!=readbuf) formatter(readbuf, w-readbuf);
 }
@@ -665,7 +669,7 @@ void ofsredisplay(x) {
   int i;
   gotoxy(x, yinput);
   if (inputlast-inputofs>=x) {
-    i=((inputlast-inputofs>cols-1 ? cols-1-x : inputlast-inputofs-x));
+    i=((inputlast-inputofs>Cols-1 ? Cols-1-x : inputlast-inputofs-x));
     for (w=input+inputofs+x; i--; w++) write1(*w, w-input);
   }
   cleareol();
@@ -685,7 +689,7 @@ struct histinfo *leavealone; {
   do {
     cont=0;
     if ((h->len<=h->plen) && (h!=leavealone)) {
-      histlines--;
+      histLines--;
       h->next->prev=h->prev;
       h->prev->next=h->next;
       h2=h->prev;
@@ -696,8 +700,8 @@ struct histinfo *leavealone; {
       }
       h=h2;
     } else h=h->prev;
-  } while ((h!=histoldest || cont) && histlines>0);
-  if (!histlines) {
+  } while ((h!=histoldest || cont) && histLines>0);
+  if (!histLines) {
     histoldest=NULL;
     return;
   }
@@ -705,17 +709,17 @@ struct histinfo *leavealone; {
 
 struct histinfo *makenew() {
   struct histinfo *nh;
-  if (!histlines) {
+  if (!histLines) {
     nh=(struct histinfo *)malloc(sizeof (struct histinfo));
     nh->prev=nh->next=histoldest=nh;
-    histlines++;
-  } else if (histlines<MAX_HIST_LINES) {
+    histLines++;
+  } else if (histLines<MAX_HIST_LINES) {
     nh=(struct histinfo *)malloc(sizeof (struct histinfo));
     nh->prev=histoldest;
     nh->next=histoldest->next;
     histoldest->next=nh;
     nh->next->prev=nh;
-    histlines++;
+    histLines++;
   } else {
     nh=histoldest;
     histoldest=nh->prev;
@@ -742,7 +746,7 @@ void sendline(yank) {
   delempty(NULL);
   histcurrent=makenew();
   input=histcurrent->string;
-  strcpy(input, prompt);
+  strlcpy(input, prompt, BUF_SIZE+20);
   plen=strlen(prompt);
   inputofs=specialprompt=0;
   modified=1;
@@ -758,7 +762,7 @@ void modify() {
       h=histcurrent;
       delempty(h);
       histcurrent=makenew();
-      strcpy(histcurrent->string, h->string);
+      strlcpy(histcurrent->string, h->string, BUF_SIZE+20);
       input=histcurrent->string;
     }
     modified=1;
@@ -767,24 +771,24 @@ void modify() {
 
 void fixpos() {
   if (inputcursor<8 && inputofs>0) {
-    inputofs-=cols-16;
-    inputcursor+=cols-16;
+    inputofs-=Cols-16;
+    inputcursor+=Cols-16;
     if (inputofs<0) {
       inputcursor+=inputofs;
       inputofs=0;
     }
     ofsredisplay(0);
-  } else if (inputcursor>cols-8) {
-    inputofs+=cols-16;
-    inputcursor-=cols-16;
+  } else if (inputcursor>Cols-8) {
+    inputofs+=Cols-16;
+    inputcursor-=Cols-16;
     ofsredisplay(0);
   }
 }
 
 void reshow() {
-  if (inputlast>cols-8) {
-    inputcursor=cols-9;
-    inputofs=inputlast-cols+9;
+  if (inputlast>Cols-8) {
+    inputcursor=Cols-9;
+    inputofs=inputlast-Cols+9;
   } else {
     inputofs=0;
     inputcursor=inputlast;
@@ -810,8 +814,10 @@ unsigned char t; {
       inputcursor++;
     } else {
       tmp=input+inputlast;
-      while (tmp>=input+inputofs+inputcursor)
-	*(tmp+1)=(*tmp--);
+      while (tmp>=input+inputofs+inputcursor) {
+	*(tmp+1) = *tmp;
+	--tmp;
+      }
       input[inputofs+(inputcursor++)]=t;
       inputlast++;
       ofsredisplay(inputcursor-1);
@@ -848,11 +854,11 @@ unsigned char t; {
     t|=0x20;
     if (dispmode>0 && ((t=='h' && !hold_mode) || t=='y')) {
       hold_mode=1;
-      hold_lines=0;
+      hold_Lines=0;
       if (cursorwhere!=1) fullscroll();
       cursorwhere=2;
       normal();
-      gotoxy(cols-4, ystatus);
+      gotoxy(Cols-4, ystatus);
       setinv();
       write(1, "(h)", 3);
       normal();
@@ -861,7 +867,7 @@ unsigned char t; {
       if (cursorwhere!=1) fullscroll();
       cursorwhere=2;
       normal();
-      gotoxy(cols-4, ystatus);
+      gotoxy(Cols-4, ystatus);
       setinv();
       write(1, "   ", 3);
       normal();
@@ -888,14 +894,14 @@ unsigned char t; {
     inarrow=1;
   } else if ((t==10 || t==13) && !quote) {  /* return, newline */
     sendline(0);
-    if (tablines) {
+    if (tabLines) {
       curtabr=oldest;
       curtabt=oldest->next;
     }
   } else if (t==25 && !quote) {	  /* ^y */
     if (!specialprompt) {
       sendline(1);
-      if (tablines) {
+      if (tabLines) {
 	curtabr=oldest;
 	curtabt=oldest->next;
       }
@@ -910,8 +916,10 @@ unsigned char t; {
     if (inputcursor>plen) {
       modify();
       tmp=input+inputcursor+inputofs;
-      while (tmp<input+inputlast)
-	*(tmp-1)=(*tmp++);
+      while (tmp<input+inputlast) {
+	*(tmp-1) = *tmp;
+	++tmp;
+      }
       input[--inputlast]='\0';
       gotoxy(--inputcursor, yinput);
       ofsredisplay(inputcursor);
@@ -921,8 +929,10 @@ unsigned char t; {
     if (inputcursor+inputofs<inputlast) {
       modify();
       tmp=input+inputcursor+inputofs+1;
-      while (tmp<input+inputlast)
-	*(tmp-1)=(*tmp++);
+      while (tmp<input+inputlast) {
+	*(tmp-1) = *tmp;
+	++tmp;
+      }
       input[--inputlast]='\0';
       gotoxy(inputcursor, yinput);
       ofsredisplay(inputcursor);
@@ -955,11 +965,11 @@ unsigned char t; {
     }
   } else if (t==5 && !quote) { /* ^e */
     if (inputcursor+inputofs<inputlast) {
-      if (inputlast-inputofs<cols-3) {
+      if (inputlast-inputofs<Cols-3) {
 	gotoxy((inputcursor=inputlast-inputofs), yinput);
-      } else if (inputlast>cols-8) {
-	inputcursor=cols-9;
-	inputofs=inputlast-cols+9;
+      } else if (inputlast>Cols-8) {
+	inputcursor=Cols-9;
+	inputofs=inputlast-Cols+9;
 	ofsredisplay(0);
       } else {
 	inputofs=0;
@@ -971,25 +981,25 @@ unsigned char t; {
     displaystatus();
     ofsredisplay(0);
   } else if (t==9 && !quote) { /* TAB */
-    if (tablines) {
+    if (tabLines) {
       modify();
-      strcpy(input+plen, curtabt->string);
+      strlcpy(input+plen, curtabt->string, BUF_SIZE+20-plen);
       curtabr=curtabt->prev;
       curtabt=curtabt->next;
       inputlast=strlen(input);
       reshow();
     }
   } else if (t==18 && !quote) { /* ^r */
-    if (tablines) {
+    if (tabLines) {
       modify();
-      strcpy(input+plen, curtabr->string);
+      strlcpy(input+plen, curtabr->string, BUF_SIZE+20-plen);
       curtabt=curtabr->next;
       curtabr=curtabr->prev;
       inputlast=strlen(input);
       reshow();
     }
   } else if (t==16 && !quote) { /* ^p */
-    if (histlines>1 && !specialprompt) {
+    if (histLines>1 && !specialprompt) {
       histcurrent->plen=plen;
       histcurrent->len=inputlast;
       histcurrent=histcurrent->next;
@@ -1000,7 +1010,7 @@ unsigned char t; {
       reshow();
     }
   } else if (t==14 && !quote) { /* ^n */
-    if (histlines>1 && !specialprompt) {
+    if (histLines>1 && !specialprompt) {
       histcurrent->plen=plen;
       histcurrent->len=inputlast;
       histcurrent=histcurrent->prev;
@@ -1047,7 +1057,7 @@ void use() {
   fprintf(stderr, "Use: %s [options] program [program's options]\n", myname);
   fprintf(stderr, "Options are:\n");
   fprintf(stderr, "   -raw, -cooked, -irc  : set display mode\n");
-  fprintf(stderr, "   -print               : print your input lines\n");
+  fprintf(stderr, "   -print               : print your input Lines\n");
   fprintf(stderr, "   -prompt <prompt>     : specify a command-line prompt\n");
   fprintf(stderr, "   -hold                : pause after each full screen (for cooked/irc mode)\n");
   fprintf(stderr, "   -beep                : let beeps through (for cooked/irc mode)\n");
@@ -1065,6 +1075,7 @@ char *argv[]; {
 
   char *vr;
   int pfds0[2], pfds1[2], pfds2[2];
+  struct timeval timeout;
 
   myname=(*argv);
   prompt=nullstring;
@@ -1137,17 +1148,17 @@ char *argv[]; {
 #ifdef TIOCGWINSZ
   if (ioctl(ttyfd, TIOCGWINSZ, &wsz)<0 || wsz.ws_row<1 || wsz.ws_col<1) {
 #endif
-    lines=((vr=getenv("LINES"))?atoi(vr):0);
-    cols=((vr=getenv("COLUMNS"))?atoi(vr):0);
-    if (lines<1 || cols<1) {
-      if ((lines=tgetnum("li"))<1 || (cols=tgetnum("co"))<1) {
-	lines=24; cols=80;
+    Lines=((vr=getenv("LINES"))?atoi(vr):0);
+    Cols=((vr=getenv("COLUMNS"))?atoi(vr):0);
+    if (Lines<1 || Cols<1) {
+      if ((Lines=tgetnum("li"))<1 || (Cols=tgetnum("co"))<1) {
+	Lines=24; Cols=80;
       }
     }
 #ifdef TIOCGWINSZ
   } else {
-    lines=wsz.ws_row;
-    cols=wsz.ws_col;
+    Lines=wsz.ws_row;
+    Cols=wsz.ws_col;
   }
 #endif
 
@@ -1251,19 +1262,19 @@ char *argv[]; {
 
   allsigs();
 
-  ystatus=lines-2;
-  yinput=lines-1;
+  ystatus=Lines-2;
+  yinput=Lines-1;
 
-  if (lines>255) barf("Screen too big");
-  if (ystatus<=2 || cols<20) barf("Screen too small");
+  if (Lines>255) barf("Screen too big");
+  if (ystatus<=2 || Cols<20) barf("Screen too small");
 
   statusline=(unsigned char *)malloc(MAX_COLS);
   writebuf=(unsigned char *)malloc(20*BUF_SIZE);
-  strcpy(tmpstr, " ");
+  strlcpy(tmpstr, " ", BUF_SIZE);
   for (i=1; i<argc; i++)
-    if (strlen(tmpstr)+strlen(argv[i])<cols-1) {
-      strcat(tmpstr, argv[i]);
-      strcat(tmpstr, " ");
+    if (strlen(tmpstr)+strlen(argv[i])<Cols-1) {
+      strlcat(tmpstr, argv[i], BUF_SIZE);
+      strlcat(tmpstr, " ", BUF_SIZE);
     }
   setstatus(tmpstr);
 
@@ -1274,10 +1285,10 @@ char *argv[]; {
   histoldest=histcurrent=(struct histinfo *)malloc(sizeof (struct histinfo));
   input=histcurrent->string;
   histcurrent->prev=histcurrent->next=histcurrent;
-  histlines=1;
+  histLines=1;
   plen=strlen(prompt);
   inputlast=inputcursor=plen;
-  strcpy(input, prompt);
+  strlcpy(input, prompt, BUF_SIZE+20);
   ofsredisplay(0);
   *protcmd='\0';
   *o_buffer='\0';
@@ -1288,27 +1299,43 @@ char *argv[]; {
   FD_SET(readfd, &ready);
   FD_SET(errfd, &ready);
 
+  timeout.tv_sec=0;
+  timeout.tv_usec=500000;
+
   while(1) {
+    int r;
     result=ready;
-    if (select(64, &result, NULL, NULL, NULL)<=0)
+    r=select(64, &result, NULL, NULL, (cursorwhere==1) ? NULL : &timeout);
+    if (r<0) {
       if (errno==EINTR) continue;
       else cleanupexit(1, "select error");
+    } else if (r==0) {
+      if (cursorwhere!=1) {
+	normal();
+	fullscroll();
+	gotoxy(inputcursor, yinput);
+	cursorwhere=1;
+      }
+      continue;
+    }
 
-    if (FD_ISSET(readfd, &result))
+    if (FD_ISSET(readfd, &result)) {
       if ((rc=read(readfd, readbuf, BUF_SIZE))>0)
         doprogramline(readbuf, rc);
       else
         cleanupexit(1, "program terminated");
-    if (FD_ISSET(errfd, &result))
+    }
+    if (FD_ISSET(errfd, &result)) {
       if ((rc=read(errfd, readbuf, BUF_SIZE))>0)
         doprogramline(readbuf, rc);
       else
         cleanupexit(1, "program terminated");
-    if (FD_ISSET(ttyfd, &result))
+    }
+    if (FD_ISSET(ttyfd, &result)) {
       if ((rrc=read(0, readbuf, BUF_SIZE))>0)
         for (t=readbuf; rrc>0; rrc--) dokbdchar(*(t++));
       else
 	cleanupexit(1, "read error from keyboard");
   }
 }
-
+}
