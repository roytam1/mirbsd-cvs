$MirOS$
--- x11-ui.c.orig	Thu Oct  3 18:04:07 2002
+++ x11-ui.c	Tue Feb 17 20:49:12 2004
@@ -162,6 +162,8 @@
 /* constants */
 #define XtNnoValues     "noValues"
 #define XtCnoValues     "NoValues"
+#define XtNnoGrip       "noGrip"
+#define XtCnoGrip       "NoGrip"
 #define XtNnoCharts     "noCharts"
 #define XtCnoCharts     "NoCharts"
 #define XtNnoInterface  "noInterface"
@@ -168,6 +170,8 @@
 #define XtCnoInterface  "NoInterface"
 #define XtNinterface    "interface"
 #define XtCinterface    "Interface"
+#define XtNsmart        "smart"
+#define XtCsmart        "smart"
 #define XtNupd          "upd"
 #define XtCupd          "Upd"
 #define XtNavg          "avg"
@@ -200,11 +204,13 @@
  **/
 struct _appdata {
 	Boolean no_charts;
+	Boolean no_grip;
 	Boolean no_values;
 	Boolean no_interface;
 	Boolean kilobytes;
 	Boolean zeroonreset;
 	Boolean help;
+	Boolean smart;
 	char *iface;
 	int update;
 	int avg;
@@ -213,14 +219,16 @@
 
 /* static variables */
 static struct _appdata appdata;
-static char *in_alt[2] = {
+static char *in_alt[3] = {
 	"in:  %.1f %sB/s (%.1f %sB/s) [%.1f %sB]",
-	"in:  %.1f p/s  max: %.1f p/s"
+	"in:  %.1f p/s  max: %.1f p/s",
+	"I %.1f %sB/s"
 };
 static char *in_str = 0;
-static char *out_alt[2] = {
+static char *out_alt[3] = {
 	"out:  %.1f %sB/s (%.1f %sB/s) [%.1f %sB]",
-	"out:  %1.1f p/s  max: %.1f p/s"
+	"out:  %1.1f p/s  max: %.1f p/s",
+	"O %.1f %sB/s"
 };
 static char *out_str = 0;
 
@@ -228,7 +236,7 @@
  * Definition of the prefixes.  A thousand exa bytes will be
  * a sufficient upper limit for quite a few years.  ;-)
  */
-static char *prefix[] = { "", "k", "M", "G", "T", "P", "E" };
+static char *prefix[] = { "", "K", "M", "G", "T", "P", "E" };
 
 struct prefixed_value {
 	float value;
@@ -254,6 +262,14 @@
 	 XtRBoolean,
 	 (XtPointer) False},
 	{
+	 XtNnoGrip,
+	 XtCnoGrip,
+	 XtRBoolean,
+	 sizeof(Boolean),
+	 XtOffsetOf(struct _appdata, no_grip),
+	 XtRBoolean,
+	 (XtPointer) False},
+	{
 	 XtNnoCharts,
 	 XtCnoCharts,
 	 XtRBoolean,
@@ -270,6 +286,14 @@
 	 XtRBoolean,
 	 (XtPointer) False},
 	{
+	 XtNsmart,
+	 XtCsmart,
+	 XtRBoolean,
+	 sizeof(Boolean),
+	 XtOffsetOf(struct _appdata, smart),
+	 XtRBoolean,
+	 (XtPointer) False},
+	{
 	 XtNinterface,
 	 XtCinterface,
 	 XtRString,
@@ -326,6 +350,8 @@
 	{"--help", "*help", XrmoptionNoArg, "True"},
 	{"-if", "*interface", XrmoptionSepArg, NULL},
 	{"-interface", "*interface", XrmoptionSepArg, NULL},
+	{"-smart", "*smart", XrmoptionNoArg, "True"},
+	{"-sm", "*smart", XrmoptionNoArg, "True"},
 	{"-ni", "*noInterface", XrmoptionNoArg, "True"},
 	{"-nointerface", "*noInterface", XrmoptionNoArg, "True"},
 	{"-nc", "*noCharts", XrmoptionNoArg, "True"},
@@ -341,7 +367,9 @@
 	{"-s", "*scale", XrmoptionSepArg, NULL},
 	{"-scale", "*scale", XrmoptionSepArg, NULL},
 	{"-zr", "*zeroOnReset", XrmoptionNoArg, "True"},
-	{"-zeroonreset", "*zeroOnReset", XrmoptionNoArg, "True"}
+	{"-zeroonreset", "*zeroOnReset", XrmoptionNoArg, "True"},
+	{"-ng", "*noGrip", XrmoptionNoArg, "True"},
+	{"-nogrip", "*noGrip", XrmoptionNoArg, "True"}
 };
 
 /* time at which the program was started  */
@@ -434,8 +462,15 @@
 
 	/* Initialize the data gathering process. */
 	initialize(appdata.iface, appdata.avg);
+
+	if (appdata.smart == False) {
 	in_str = in_alt[type];
 	out_str = out_alt[type];
+	}
+	else {
+	in_str = in_alt[2];
+	out_str = out_alt[2];
+	}
 
 	/* Get the starting time. */
 	time(&starttime);
@@ -463,13 +498,25 @@
 	}
 	/* create Stripchart widget if configured */
 	if (appdata.no_charts == False) {
+		if (appdata.no_grip == False) {
 		str_in = XtVaCreateManagedWidget("str_in",
 						 stripChartWidgetClass,
 						 paned,
 						 XtNjumpScroll, 1, 
 						 XtNminScale, 1, 
-						 XtNupdate, appdata.update, 
+						 XtNupdate, appdata.update,
 						 NULL);
+		}
+		else {
+		str_in = XtVaCreateManagedWidget("str_in",
+						 stripChartWidgetClass,
+						 paned,
+						 XtNjumpScroll, 1, 
+						 XtNminScale, 1, 
+						 XtNupdate, appdata.update,
+						 XtNshowGrip, False,
+						 NULL);
+		}
 
 		XtAddCallback(str_in, XtNgetValue,
 			      (XtCallbackProc) get_in_value, NULL);
@@ -476,11 +523,21 @@
 	}
 	/* create label widget, if configured */
 	if (appdata.no_values == False) {
+		if (appdata.no_grip == False) {
 		out = XtVaCreateManagedWidget("out ",
 					      labelWidgetClass,
 					      paned,
 					      XtNborderWidth, 0, 
 					      XtNjustify, XtJustifyLeft, NULL);
+		}
+		else {
+		out = XtVaCreateManagedWidget("out ",
+					      labelWidgetClass,
+					      paned,
+					      XtNborderWidth, 0, 
+					      XtNjustify, XtJustifyLeft,
+					      XtNshowGrip, False, NULL);
+		}
 	}
 	/* create Stripchart widget if configured */
 	if (appdata.no_charts == False) {
@@ -534,11 +591,13 @@
 	fprintf(stderr,
 		"-interface <name> Any device from /proc/net/dev.\n");
 	fprintf(stderr, "-nc, -nocharts    Don't use charts.\n");
+	fprintf(stderr, "-ng, -nogrip      Don't display any Grips\n");
 	fprintf(stderr,
 		"-nv, -novalues    Don't display packets/s counts.\n");
 	fprintf(stderr,
 		"-ni, -nointerface Don't display `interface' line.\n");
 	fprintf(stderr, "-kb, -kilobytes   Display count in kilobytes.\n");
+	fprintf(stderr, "-sm, -smart       Enable smarter output (useful when using as a dockapp)\n");
 	fprintf(stderr,
 		"-u,  -update      Number of seconds between screen updates. (default is 1).\n");
 	fprintf(stderr,
@@ -619,6 +678,7 @@
 	struct prefixed_value pval_average, pval_max, pval_total;
 	time_t newtime;
 	char *dev_str = "%s up: %i:%02i:%02i";
+	char *dev_str_sm = "%s";	/* When -smart option is given, display only the interface name */
 	char buf[128];
 	/* read data from /proc/net/dev */
 	update_avg(appdata.update, appdata.zeroonreset);
@@ -635,9 +695,11 @@
 	sec %= 60;		/* calculate remaining seconds */
 	hr = min / 60;
 	min %= 60;
+	if (appdata.smart == True)
+		dev_str = dev_str_sm;	/* Smarter output on -smart option */
 	if (appdata.no_interface == False) {
 		/* print the data to strings and set label resources */
-		sprintf(buf, dev_str, appdata.iface, hr, min, sec);
+		snprintf(buf, (size_t)128, dev_str, appdata.iface, hr, min, sec);
 		XtVaSetValues(interface, XtNlabel, buf, NULL);
 	}
 	if (appdata.no_values == False) {
@@ -645,23 +707,23 @@
 			pval_average = use_prefix(average.in);
 			pval_max = use_prefix(max.in);
 			pval_total = use_prefix(total.in);
-			sprintf(buf, in_str, pval_average.value,
+			snprintf(buf, (size_t)128, in_str, pval_average.value,
 				pval_average.prefix, pval_max.value,
 				pval_max.prefix, pval_total.value,
 				pval_total.prefix);
 		} else
-			sprintf(buf, in_str, average.in, max.in);
+			snprintf(buf, (size_t)128, in_str, average.in, max.in);
 		XtVaSetValues(in, XtNlabel, buf, NULL);
 		if (type == BYTES_TYPE) {
 			pval_average = use_prefix(average.out);
 			pval_max = use_prefix(max.out);
 			pval_total = use_prefix(total.out);
-			sprintf(buf, out_str, pval_average.value,
+			snprintf(buf, (size_t)128, out_str, pval_average.value,
 				pval_average.prefix, pval_max.value,
 				pval_max.prefix, pval_total.value,
 				pval_total.prefix);
 		} else
-			sprintf(buf, out_str, average.out, max.out);
+			snprintf(buf, (size_t)128, out_str, average.out, max.out);
 		XtVaSetValues(out, XtNlabel, buf, NULL);
 	}
 
