$MirOS: ports/net/djbdns/patches/patch-src_server_c,v 1.3 2006/06/15 01:43:17 tg Exp $
--- src/server.c.orig	Sun Feb 11 21:11:23 2001
+++ src/server.c	Sat Mar 26 16:17:11 2016
@@ -4,6 +4,7 @@
 #include "buffer.h"
 #include "strerr.h"
 #include "ip4.h"
+#include "ip6.h"
 #include "uint16.h"
 #include "ndelay.h"
 #include "socket.h"
@@ -11,13 +12,17 @@
 #include "qlog.h"
 #include "response.h"
 #include "dns.h"
+#include "alloc.h"
+#include "iopause.h"
+#include "str.h"
+#include <stdint.h>
 
 extern char *fatal;
 extern char *starting;
 extern int respond(char *,char *,char *);
 extern void initialize(void);
 
-static char ip[4];
+static char ip[16];
 static uint16 port;
 
 static char buf[513];
@@ -25,6 +30,11 @@ static int len;
 
 static char *q;
 
+void nomem()
+{
+  strerr_die2x(111,fatal,"out of memory");
+}
+
 static int doit(void)
 {
   unsigned int pos;
@@ -82,35 +92,99 @@ static int doit(void)
 int main()
 {
   char *x;
-  int udp53;
+  int *udp53;
+  uint8_t *udp53t;
+  unsigned int off;
+  unsigned int cnt;
+  iopause_fd *iop;
 
   x = env_get("IP");
   if (!x)
     strerr_die2x(111,fatal,"$IP not set");
-  if (!ip4_scan(x,ip))
-    strerr_die3x(111,fatal,"unable to parse IP address ",x);
 
-  udp53 = socket_udp();
-  if (udp53 == -1)
-    strerr_die2sys(111,fatal,"unable to create UDP socket: ");
-  if (socket_bind4_reuse(udp53,ip,53) == -1)
-    strerr_die2sys(111,fatal,"unable to bind UDP socket: ");
+  off=cnt=0;
+  while (x[off]) {
+    unsigned int l;
+    char dummy[16];
+    l=ip6_scan(x+off,dummy);
+    if (!l)
+      strerr_die3x(111,fatal,"unable to parse IP address ",x+off);
+    cnt++;
+    if (!x[off+l]) break;
+    if (x[off+l]=='%')
+      while (x[off+l] && x[off+l]!=',') ++l;
+    if (x[off+l]!=',')
+      strerr_die3x(111,fatal,"unable to parse IP address ",x+off);
+    off+=l+1;
+  }
+  udp53=(int *) alloc(sizeof(int) *cnt);
+  if (!udp53) nomem();
+  udp53t=(uint8_t *) alloc(sizeof(uint8_t) *cnt);
+  if (!udp53t) nomem();
+  iop=(iopause_fd *) alloc(sizeof(*iop) * cnt);
+  if (!iop) nomem();
 
+  off=cnt=0;
+  while (x[off]) {
+    unsigned int l;
+    uint32 ifid=0;
+    l=ip6_scan(x+off,ip);
+    udp53t[cnt] = ip6_isv4mapped(ip);
+    udp53[cnt] = ip6_isv4mapped(ip) ? socket_udp() : socket_udp6();
+    if (udp53[cnt] == -1)
+      strerr_die2sys(111,fatal,"unable to create UDP socket: ");
+    if (x[off+l]=='%') {
+      char* interface=x+off+l+1;
+      int Len=str_chr(interface,',');
+      if (interface[Len]) {
+	interface[Len]=0;
+	ifid=socket_getifidx(interface);
+	interface[Len]=',';
+      } else
+	ifid=socket_getifidx(interface);
+      l+=Len;
+    }
+    if ((udp53t[cnt] ? socket_bind4_reuse(udp53[cnt],ip+12,53) :
+     socket_bind6_reuse(udp53[cnt],ip,53,ifid)) == -1)
+      strerr_die2sys(111,fatal,"unable to bind UDP socket: ");
+    ndelay_off(udp53[cnt]);
+    socket_tryreservein(udp53[cnt],65536);
+    iop[cnt].fd=udp53[cnt];
+    iop[cnt].events=IOPAUSE_READ;
+    cnt++;
+    if (!x[off+l]) break;
+    off+=l+1;
+  }
+
   droproot(fatal);
 
   initialize();
   
-  ndelay_off(udp53);
-  socket_tryreservein(udp53,65536);
-
   buffer_putsflush(buffer_2,starting);
 
   for (;;) {
-    len = socket_recv4(udp53,buf,sizeof buf,ip,&port);
-    if (len < 0) continue;
-    if (!doit()) continue;
-    if (response_len > 512) response_tc();
-    socket_send4(udp53,response,response_len,ip,port);
-    /* may block for buffer space; if it fails, too bad */
+    struct taia stamp;
+    struct taia deadline;
+    unsigned int i;
+    uint32 ifid;
+    taia_now(&stamp);
+    taia_uint(&deadline,300);
+    taia_add(&deadline,&deadline,&stamp);
+    iopause(iop,cnt,&deadline,&stamp);
+    for (i=0;i<cnt;i++)
+      if (iop[i].revents) {
+	if (udp53t[i]) {
+	  byte_copy(ip,12,(char *)V4mappedprefix);
+	  len = socket_recv4(udp53[i],buf,sizeof buf,ip+12,&port);
+	} else len = socket_recv6(udp53[i],buf,sizeof buf,ip,&port,&ifid);
+	if (len < 0) continue;
+	if (!doit()) continue;
+	if (response_len > 512) response_tc();
+	if (udp53t[i])
+	  socket_send4(udp53[i],response,response_len,ip+12,port);
+	else
+	  socket_send6(udp53[i],response,response_len,ip,port,ifid);
+	/* may block for buffer space; if it fails, too bad */
+      }
   }
 }
