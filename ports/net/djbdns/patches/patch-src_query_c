$MirOS$
--- src/query.c.orig	Sun Feb 11 21:11:23 2001
+++ src/query.c	Sat May 14 22:50:54 2005
@@ -12,7 +12,12 @@
 #include "alloc.h"
 #include "response.h"
 #include "query.h"
+#ifdef DJB_V6ONLY
+#include "ip6.h"
+#endif /* DJB_V6ONLY */
 
+extern stralloc ignoreip;
+
 static int flagforwardonly = 0;
 
 void query_forwardonly(void)
@@ -110,7 +115,11 @@ static int rqa(struct query *z)
   return 1;
 }
 
+#ifndef DJB_V6ONLY
 static int globalip(char *d,char ip[4])
+#else
+static int globalip(char *d,char ip[16])
+#endif /* DJB_V6ONLY */
 {
   if (dns_domain_equal(d,"\011localhost\0")) {
     byte_copy(ip,4,"\177\0\0\1");
@@ -165,7 +174,11 @@ static int doit(struct query *z,int stat
   char *buf;
   unsigned int len;
   const char *whichserver;
+#ifndef DJB_V6ONLY
   char header[12];
+#else
+  char header[24];
+#endif /* DJB_V6ONLY */
   char misc[20];
   unsigned int rcode;
   unsigned int posanswers;
@@ -193,6 +206,7 @@ static int doit(struct query *z,int stat
   int k;
   int p;
   int q;
+  unsigned int ii;
 
   errno = error_io;
   if (state == 1) goto HAVEPACKET;
@@ -210,9 +224,16 @@ static int doit(struct query *z,int stat
 
   if (globalip(d,misc)) {
     if (z->level) {
+#ifndef DJB_V6ONLY
       for (k = 0;k < 64;k += 4)
         if (byte_equal(z->servers[z->level - 1] + k,4,"\0\0\0\0")) {
 	  byte_copy(z->servers[z->level - 1] + k,4,misc);
+#else
+      for (k = 0;k < 256;k += 16)
+        if (byte_equal(z->servers[z->level - 1] + k,16,V6any)) {
+	  byte_copy(z->servers[z->level - 1] + k,12,V4mappedprefix);
+	  byte_copy(z->servers[z->level - 1] + k + 12,4,misc);
+#endif /* DJB_V6ONLY */
 	  break;
 	}
       goto LOWERLEVEL;
@@ -227,6 +248,158 @@ static int doit(struct query *z,int stat
     return 1;
   }
 
+  if (dns_domain_equal(d,"\0011\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\003ip6\003arpa\0")) {
+    if (z->level) goto LOWERLEVEL;
+    if (!rqa(z)) goto DIE;
+    if (typematch(DNS_T_PTR,dtype)) {
+      if (!response_rstart(d,DNS_T_PTR,655360)) goto DIE;
+      if (!response_addname("\016ipv6-localhost\0")) goto DIE;
+      if (!response_addname("\015ipv6-loopback\0")) goto DIE;
+      response_rfinish(RESPONSE_ANSWER);
+    }
+    cleanup(z);
+    return 1;
+  }
+
+  if (dns_domain_equal(d,"\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\001e\001f\003ip6\003arpa\0")) {
+    if (z->level) goto LOWERLEVEL;
+    if (!rqa(z)) goto DIE;
+    if (typematch(DNS_T_PTR,dtype)) {
+      if (!response_rstart(d,DNS_T_PTR,655360)) goto DIE;
+      if (!response_addname("\015ipv6-localnet\0")) goto DIE;
+      response_rfinish(RESPONSE_ANSWER);
+    }
+    cleanup(z);
+    return 1;
+  }
+
+  if (dns_domain_equal(d,"\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\001f\001f\003ip6\003arpa\0")) {
+    if (z->level) goto LOWERLEVEL;
+    if (!rqa(z)) goto DIE;
+    if (typematch(DNS_T_PTR,dtype)) {
+      if (!response_rstart(d,DNS_T_PTR,655360)) goto DIE;
+      if (!response_addname("\020ipv6-mcastprefix\0")) goto DIE;
+      response_rfinish(RESPONSE_ANSWER);
+    }
+    cleanup(z);
+    return 1;
+  }
+
+  if (dns_domain_equal(d,"\0011\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0012\0010\001f\001f\003ip6\003arpa\0")) {
+    if (z->level) goto LOWERLEVEL;
+    if (!rqa(z)) goto DIE;
+    if (typematch(DNS_T_PTR,dtype)) {
+      if (!response_rstart(d,DNS_T_PTR,655360)) goto DIE;
+      if (!response_addname("\015ipv6-allnodes\0")) goto DIE;
+      response_rfinish(RESPONSE_ANSWER);
+    }
+    cleanup(z);
+    return 1;
+  }
+
+  if (dns_domain_equal(d,"\0012\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0012\0010\001f\001f\003ip6\003arpa\0")) {
+    if (z->level) goto LOWERLEVEL;
+    if (!rqa(z)) goto DIE;
+    if (typematch(DNS_T_PTR,dtype)) {
+      if (!response_rstart(d,DNS_T_PTR,655360)) goto DIE;
+      if (!response_addname("\017ipv6-allrouters\0")) goto DIE;
+      response_rfinish(RESPONSE_ANSWER);
+    }
+    cleanup(z);
+    return 1;
+  }
+
+  if (dns_domain_equal(d,"\0011\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0010\0012\0010\001f\001f\003ip6\003arpa\0")) {
+    if (z->level) goto LOWERLEVEL;
+    if (!rqa(z)) goto DIE;
+    if (typematch(DNS_T_PTR,dtype)) {
+      if (!response_rstart(d,DNS_T_PTR,655360)) goto DIE;
+      if (!response_addname("\015ipv6-allhosts\0")) goto DIE;
+      response_rfinish(RESPONSE_ANSWER);
+    }
+    cleanup(z);
+    return 1;
+  }
+
+  if (dns_domain_equal(d,"\016ipv6-localhost\0") ||
+      dns_domain_equal(d,"\015ipv6-loopback\0"))
+    {
+      if (z->level) goto LOWERLEVEL;
+      if (!rqa(z)) goto DIE;
+      if (typematch(DNS_T_AAAA,dtype)) {
+	if (!response_rstart(d,DNS_T_AAAA,655360)) goto DIE;
+	if (!response_addbytes("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001",16)) goto DIE;
+	response_rfinish(RESPONSE_ANSWER);
+      }
+      cleanup(z);
+      return 1;
+    }
+
+  if (dns_domain_equal(d,"\015ipv6-localnet\0"))
+    {
+      if (z->level) goto LOWERLEVEL;
+      if (!rqa(z)) goto DIE;
+      if (typematch(DNS_T_AAAA,dtype)) {
+	if (!response_rstart(d,DNS_T_AAAA,655360)) goto DIE;
+	if (!response_addbytes("\376\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000",16)) goto DIE;
+	response_rfinish(RESPONSE_ANSWER);
+      }
+      cleanup(z);
+      return 1;
+    }
+
+  if (dns_domain_equal(d,"\020ipv6-mcastprefix\0"))
+    {
+      if (z->level) goto LOWERLEVEL;
+      if (!rqa(z)) goto DIE;
+      if (typematch(DNS_T_AAAA,dtype)) {
+	if (!response_rstart(d,DNS_T_AAAA,655360)) goto DIE;
+	if (!response_addbytes("\377\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000",16)) goto DIE;
+	response_rfinish(RESPONSE_ANSWER);
+      }
+      cleanup(z);
+      return 1;
+    }
+
+  if (dns_domain_equal(d,"\15ipv6-allnodes\0"))
+    {
+      if (z->level) goto LOWERLEVEL;
+      if (!rqa(z)) goto DIE;
+      if (typematch(DNS_T_AAAA,dtype)) {
+	if (!response_rstart(d,DNS_T_AAAA,655360)) goto DIE;
+	if (!response_addbytes("\377\002\000\000\000\000\000\000\000\000\000\000\000\000\000\001",16)) goto DIE;
+	response_rfinish(RESPONSE_ANSWER);
+      }
+      cleanup(z);
+      return 1;
+    }
+
+  if (dns_domain_equal(d,"\17ipv6-allrouters\0"))
+    {
+      if (z->level) goto LOWERLEVEL;
+      if (!rqa(z)) goto DIE;
+      if (typematch(DNS_T_AAAA,dtype)) {
+	if (!response_rstart(d,DNS_T_AAAA,655360)) goto DIE;
+	if (!response_addbytes("\377\002\000\000\000\000\000\000\000\000\000\000\000\000\000\002",16)) goto DIE;
+	response_rfinish(RESPONSE_ANSWER);
+      }
+      cleanup(z);
+      return 1;
+    }
+
+  if (dns_domain_equal(d,"\15ipv6-allhosts\0"))
+    {
+      if (z->level) goto LOWERLEVEL;
+      if (!rqa(z)) goto DIE;
+      if (typematch(DNS_T_AAAA,dtype)) {
+	if (!response_rstart(d,DNS_T_AAAA,655360)) goto DIE;
+	if (!response_addbytes("\377\002\000\000\000\000\000\000\000\000\000\000\000\000\000\003",16)) goto DIE;
+	response_rfinish(RESPONSE_ANSWER);
+      }
+      cleanup(z);
+      return 1;
+    }
+
   if (dns_domain_equal(d,"\0011\0010\0010\003127\7in-addr\4arpa\0")) {
     if (z->level) goto LOWERLEVEL;
     if (!rqa(z)) goto DIE;
@@ -326,9 +499,16 @@ static int doit(struct query *z,int stat
 	if (z->level) {
 	  log_cachedanswer(d,DNS_T_A);
 	  while (cachedlen >= 4) {
+#ifndef DJB_V6ONLY
 	    for (k = 0;k < 64;k += 4)
 	      if (byte_equal(z->servers[z->level - 1] + k,4,"\0\0\0\0")) {
 		byte_copy(z->servers[z->level - 1] + k,4,cached);
+#else
+	    for (k = 0;k < 256;k += 16)
+	      if (byte_equal(z->servers[z->level - 1] + k,16,V6any)) {
+		byte_copy(z->servers[z->level - 1] + k,12,V4mappedprefix);
+		byte_copy(z->servers[z->level - 1] + k + 12,4,cached);
+#endif /* DJB_V6ONLY */
 		break;
 	      }
 	    cached += 4;
@@ -351,7 +531,45 @@ static int doit(struct query *z,int stat
       }
     }
 
-    if (!typematch(DNS_T_ANY,dtype) && !typematch(DNS_T_AXFR,dtype) && !typematch(DNS_T_CNAME,dtype) && !typematch(DNS_T_NS,dtype) && !typematch(DNS_T_PTR,dtype) && !typematch(DNS_T_A,dtype) && !typematch(DNS_T_MX,dtype)) {
+    if (typematch(DNS_T_AAAA,dtype)) {
+      byte_copy(key,2,DNS_T_AAAA);
+      cached = cache_get(key,dlen + 2,&cachedlen,&ttl);
+      if (cached && (cachedlen || byte_diff(dtype,2,DNS_T_ANY))) {
+	if (z->level) {
+	  log_cachedanswer(d,DNS_T_AAAA);
+	  while (cachedlen >= 16) {
+#ifndef DJB_V6ONLY
+	    for (k = 0;k < 64;k += 4)
+	      if (byte_equal(z->servers[z->level - 1] + k,4,"\0\0\0\0")) {
+		byte_copy(z->servers[z->level - 1] + k,4,cached);
+#else
+	    for (k = 0;k < 256;k += 16)
+	      if (byte_equal(z->servers[z->level - 1] + k,16,V6any)) {
+		byte_copy(z->servers[z->level - 1] + k,16,cached);
+#endif /* DJB_V6ONLY */
+		break;
+	      }
+	    cached += 16;
+	    cachedlen -= 16;
+	  }
+	  goto LOWERLEVEL;
+	}
+
+	log_cachedanswer(d,DNS_T_AAAA);
+	if (!rqa(z)) goto DIE;
+	while (cachedlen >= 16) {
+	  if (!response_rstart(d,DNS_T_AAAA,ttl)) goto DIE;
+	  if (!response_addbytes(cached,16)) goto DIE;
+	  response_rfinish(RESPONSE_ANSWER);
+	  cached += 16;
+	  cachedlen -= 16;
+	}
+	cleanup(z);
+	return 1;
+      }
+    }
+
+    if (!typematch(DNS_T_ANY,dtype) && !typematch(DNS_T_AXFR,dtype) && !typematch(DNS_T_CNAME,dtype) && !typematch(DNS_T_NS,dtype) && !typematch(DNS_T_PTR,dtype) && !typematch(DNS_T_A,dtype) && !typematch(DNS_T_MX,dtype) && !typematch(DNS_T_AAAA,dtype)) {
       byte_copy(key,2,dtype);
       cached = cache_get(key,dlen + 2,&cachedlen,&ttl);
       if (cached && (cachedlen || byte_diff(dtype,2,DNS_T_ANY))) {
@@ -390,7 +608,11 @@ static int doit(struct query *z,int stat
         cached = cache_get(key,dlen + 2,&cachedlen,&ttl);
         if (cached && cachedlen) {
 	  z->control[z->level] = d;
+#ifndef DJB_V6ONLY
           byte_zero(z->servers[z->level],64);
+#else
+          byte_zero(z->servers[z->level],256);
+#endif /* DJB_V6ONLY */
           for (j = 0;j < QUERY_MAXNS;++j)
             dns_domain_free(&z->ns[z->level][j]);
           pos = 0;
@@ -423,12 +645,25 @@ static int doit(struct query *z,int stat
       dns_domain_free(&z->ns[z->level][j]);
     }
 
+#ifndef DJB_V6ONLY
   for (j = 0;j < 64;j += 4)
     if (byte_diff(z->servers[z->level] + j,4,"\0\0\0\0"))
+#else
+  for (j = 0;j < 256;j += 16)
+    if (byte_diff(z->servers[z->level] + j,16,V6any))
+#endif /* DJB_V6ONLY */
       break;
+#ifndef DJB_V6ONLY
   if (j == 64) goto SERVFAIL;
+#else
+  if (j == 256) goto SERVFAIL;
+#endif /* DJB_V6ONLY */
 
+#ifndef DJB_V6ONLY
   dns_sortip(z->servers[z->level],64);
+#else
+  dns_sortip6(z->servers[z->level],256);
+#endif /* DJB_V6ONLY */
   if (z->level) {
     log_tx(z->name[z->level],DNS_T_A,z->control[z->level],z->servers[z->level],z->level);
     if (dns_transmit_start(&z->dt,z->servers[z->level],flagforwardonly,z->name[z->level],DNS_T_A,z->localip) == -1) goto DIE;
@@ -453,7 +688,11 @@ static int doit(struct query *z,int stat
   buf = z->dt.packet;
   len = z->dt.packetlen;
 
+#ifndef DJB_V6ONLY
   whichserver = z->dt.servers + 4 * z->dt.curserver;
+#else
+  whichserver = z->dt.servers + 16 * z->dt.curserver;
+#endif /* DJB_V6ONLY */
   control = z->control[z->level];
   d = z->name[z->level];
   dtype = z->level ? DNS_T_A : z->type;
@@ -519,7 +758,11 @@ static int doit(struct query *z,int stat
   if (!flagcname && !rcode && !flagout && flagreferral && !flagsoa)
     if (dns_domain_equal(referral,control) || !dns_domain_suffix(referral,control)) {
       log_lame(whichserver,control,referral);
+#ifndef DJB_V6ONLY
       byte_zero(whichserver,4);
+#else
+      byte_zero(whichserver,16);
+#endif /* DJB_V6ONLY */
       goto HAVENS;
     }
 
@@ -643,6 +886,9 @@ static int doit(struct query *z,int stat
         pos = dns_packet_copy(buf,len,pos,header,10); if (!pos) goto DIE;
         if (byte_equal(header + 8,2,"\0\4")) {
           pos = dns_packet_copy(buf,len,pos,header,4); if (!pos) goto DIE;
+          if (ignoreip.len)
+	    for (ii = 0; ii < ignoreip.len; ii += 4)
+	      if (byte_equal(header, 4, ignoreip.s + ii)) goto NXDOMAIN;
           save_data(header,4);
           log_rr(whichserver,t1,DNS_T_A,header,4,ttl);
         }
@@ -650,6 +896,20 @@ static int doit(struct query *z,int stat
       }
       save_finish(DNS_T_A,t1,ttl);
     }
+    else if (byte_equal(type,2,DNS_T_AAAA)) {
+      save_start();
+      while (i < j) {
+        pos = dns_packet_skipname(buf,len,records[i]); if (!pos) goto DIE;
+        pos = dns_packet_copy(buf,len,pos,header,10); if (!pos) goto DIE;
+        if (byte_equal(header + 8,2,"\0\20")) {
+          pos = dns_packet_copy(buf,len,pos,header,16); if (!pos) goto DIE;
+          save_data(header,16);
+          log_rr(whichserver,t1,DNS_T_AAAA,header,16,ttl);
+        }
+        ++i;
+      }
+      save_finish(DNS_T_AAAA,t1,ttl);
+    }
     else {
       save_start();
       while (i < j) {
@@ -723,9 +983,16 @@ static int doit(struct query *z,int stat
           if (typematch(header,DNS_T_A))
             if (byte_equal(header + 2,2,DNS_C_IN)) /* should always be true */
               if (datalen == 4)
+#ifndef DJB_V6ONLY
                 for (k = 0;k < 64;k += 4)
                   if (byte_equal(z->servers[z->level - 1] + k,4,"\0\0\0\0")) {
                     if (!dns_packet_copy(buf,len,pos,z->servers[z->level - 1] + k,4)) goto DIE;
+#else
+                for (k = 0;k < 256;k += 16)
+                  if (byte_equal(z->servers[z->level - 1] + k,16,V6any)) {
+		    byte_copy(z->servers[z->level - 1] + k,12,V4mappedprefix);
+                    if (!dns_packet_copy(buf,len,pos,z->servers[z->level - 1] + k + 12,4)) goto DIE;
+#endif /* DJB_V6ONLY */
                     break;
                   }
         pos += datalen;
@@ -818,7 +1085,11 @@ static int doit(struct query *z,int stat
   return -1;
 }
 
+#ifndef DJB_V6ONLY
 int query_start(struct query *z,char *dn,char type[2],char class[2],char localip[4])
+#else
+int query_start(struct query *z,char *dn,char type[2],char class[2],char localip[16],unsigned int scope_id)
+#endif /* DJB_V6ONLY */
 {
   if (byte_equal(type,2,DNS_T_AXFR)) { errno = error_perm; return -1; }
 
@@ -829,7 +1100,12 @@ int query_start(struct query *z,char *dn
   if (!dns_domain_copy(&z->name[0],dn)) return -1;
   byte_copy(z->type,2,type);
   byte_copy(z->class,2,class);
+#ifndef DJB_V6ONLY
   byte_copy(z->localip,4,localip);
+#else
+  byte_copy(z->localip,16,localip);
+  z->scope_id=scope_id;
+#endif /* DJB_V6ONLY */
 
   return doit(z,0);
 }
