$MirOS: ports/net/djbdns/patches/patch-src_tdlookup_c,v 1.2 2005/12/14 23:28:39 tg Exp $
--- src/tdlookup.c.orig	Sun Feb 11 21:11:23 2001
+++ src/tdlookup.c	Tue Jan 17 21:11:30 2006
@@ -8,6 +8,7 @@
 #include "dns.h"
 #include "seek.h"
 #include "response.h"
+#include "ip6.h"
 
 static int want(const char *owner,const char type[2])
 {
@@ -103,12 +104,13 @@ static int doname(void)
   return response_addname(d1);
 }
 
-static int doit(char *q,char qtype[2])
+static int doit1(char **pqname,char qtype[2])
 {
   unsigned int bpos;
   unsigned int anpos;
   unsigned int aupos;
   unsigned int arpos;
+  char *q;
   char *control;
   char *wild;
   int flaggavesoa;
@@ -119,10 +121,17 @@ static int doit(char *q,char qtype[2])
   char x[20];
   uint16 u16;
   char addr[8][4];
-  int addrnum;
-  uint32 addrttl;
+  char addr6[8][16];
+  int addrnum,addr6num;
+  uint32 addrttl,addr6ttl;
   int i;
+  int loop = 0 ;
 
+RESTART:
+  if (loop++ >= 100) return 0;
+
+  q = *pqname;
+
   anpos = response_len;
 
   control = q;
@@ -130,13 +139,20 @@ static int doit(char *q,char qtype[2])
     flagns = 0;
     flagauthoritative = 0;
     cdb_findstart(&c);
-    while (r = find(control,0)) {
+    while ((r = find(control,0))) {
       if (r == -1) return 0;
       if (byte_equal(type,2,DNS_T_SOA)) flagauthoritative = 1;
       if (byte_equal(type,2,DNS_T_NS)) flagns = 1;
     }
     if (flagns) break;
-    if (!*control) return 0; /* q is not within our bailiwick */
+    if (!*control) { /* q is not within our bailiwick */
+      if (loop <= 1)
+        return 0;
+      else {
+        response[2] &= ~4;
+        goto DONE; /* The administrator has issued contradictory instructions */
+      }
+    }
     control += *control;
     control += 1;
   }
@@ -152,10 +168,10 @@ static int doit(char *q,char qtype[2])
   wild = q;
 
   for (;;) {
-    addrnum = 0;
-    addrttl = 0;
+    addrnum = addr6num = 0;
+    addrttl = addr6ttl = 0;
     cdb_findstart(&c);
-    while (r = find(wild,wild != q)) {
+    while ((r = find(wild,wild != q))) {
       if (r == -1) return 0;
       flagfound = 1;
       if (flaggavesoa && byte_equal(type,2,DNS_T_SOA)) continue;
@@ -171,10 +187,29 @@ static int doit(char *q,char qtype[2])
 	if (addrnum < 1000000) ++addrnum;
 	continue;
       }
+      if (byte_equal(type,2,DNS_T_AAAA) && (dlen - dpos == 16)) {
+	addr6ttl = ttl;
+	i = dns_random(addr6num + 1);
+	if (i < 8) {
+	  if ((i < addr6num) && (addr6num < 8))
+	    byte_copy(addr6[addr6num],16,addr6[i]);
+	  byte_copy(addr6[i],16,data + dpos);
+	}
+	if (addr6num < 1000000) ++addr6num;
+	continue;
+      }
       if (!response_rstart(q,type,ttl)) return 0;
-      if (byte_equal(type,2,DNS_T_NS) || byte_equal(type,2,DNS_T_CNAME) || byte_equal(type,2,DNS_T_PTR)) {
+      if (byte_equal(type,2,DNS_T_NS) || byte_equal(type,2,DNS_T_PTR)) {
 	if (!doname()) return 0;
       }
+      else if (byte_equal(type,2,DNS_T_CNAME)) {
+	if (!doname()) return 0;
+        if (byte_diff(type,2,qtype)) {
+	  response_rfinish(RESPONSE_ANSWER);
+	  if (!dns_domain_copy(pqname,d1)) return 0;
+	  goto RESTART;
+	}
+      }
       else if (byte_equal(type,2,DNS_T_MX)) {
 	if (!dobytes(2)) return 0;
 	if (!doname()) return 0;
@@ -195,6 +230,12 @@ static int doit(char *q,char qtype[2])
 	if (!response_addbytes(addr[i],4)) return 0;
 	response_rfinish(RESPONSE_ANSWER);
       }
+    for (i = 0;i < addr6num;++i)
+      if (i < 8) {
+	if (!response_rstart(q,DNS_T_AAAA,addr6ttl)) return 0;
+	if (!response_addbytes(addr6[i],16)) return 0;
+	response_rfinish(RESPONSE_ANSWER);
+      }
 
     if (flagfound) break;
     if (wild == control) break;
@@ -212,7 +253,7 @@ static int doit(char *q,char qtype[2])
 
   if (flagauthoritative && (aupos == anpos)) {
     cdb_findstart(&c);
-    while (r = find(control,0)) {
+    while ((r = find(control,0))) {
       if (r == -1) return 0;
       if (byte_equal(type,2,DNS_T_SOA)) {
         if (!response_rstart(control,DNS_T_SOA,ttl)) return 0;
@@ -227,7 +268,7 @@ static int doit(char *q,char qtype[2])
   else
     if (want(control,DNS_T_NS)) {
       cdb_findstart(&c);
-      while (r = find(control,0)) {
+      while ((r = find(control,0))) {
         if (r == -1) return 0;
         if (byte_equal(type,2,DNS_T_NS)) {
           if (!response_rstart(control,DNS_T_NS,ttl)) return 0;
@@ -252,13 +293,18 @@ static int doit(char *q,char qtype[2])
       case_lowerb(d1,dns_domain_length(d1));
       if (want(d1,DNS_T_A)) {
 	cdb_findstart(&c);
-	while (r = find(d1,0)) {
+	while ((r = find(d1,0))) {
           if (r == -1) return 0;
 	  if (byte_equal(type,2,DNS_T_A)) {
             if (!response_rstart(d1,DNS_T_A,ttl)) return 0;
 	    if (!dobytes(4)) return 0;
             response_rfinish(RESPONSE_ADDITIONAL);
 	  }
+	  else if (byte_equal(type,2,DNS_T_AAAA)) {
+            if (!response_rstart(d1,DNS_T_AAAA,ttl)) return 0;
+	    if (!dobytes(16)) return 0;
+            response_rfinish(RESPONSE_ADDITIONAL);
+	  }
         }
       }
     }
@@ -275,23 +321,49 @@ static int doit(char *q,char qtype[2])
     }
   }
 
+DONE:
   return 1;
 }
 
+static int doit(char *qname,char qtype[2])
+{
+  int r;
+  char *q = 0;
+
+  if (!dns_domain_copy(&q, qname)) return 0;
+  r = doit1(&q, qtype);
+  dns_domain_free(&q);
+  return r;
+}
+
+#ifndef DJB_V6ONLY
 int respond(char *q,char qtype[2],char ip[4])
+#else
+int respond(char *q,char qtype[2],char ip[16])
+#endif /* DJB_V6ONLY */
 {
-  int fd;
+  static struct tai cdb_valid = { 0 };
+  static int fd = -1;
+  struct tai one_second;
   int r;
   char key[6];
 
   tai_now(&now);
-  fd = open_read("data.cdb");
-  if (fd == -1) return 0;
-  cdb_init(&c,fd);
-
+  if (tai_less(&cdb_valid, &now)) {
+    if (fd != -1) {
+      cdb_free(&c);
+      close(fd);
+    }
+    fd = open_read("data.cdb");
+    if (fd == -1) return 0;
+    cdb_init(&c,fd);
+    tai_uint(&one_second, 1);
+    tai_add(&cdb_valid, &now, &one_second);
+  }
   byte_zero(clientloc,2);
   key[0] = 0;
   key[1] = '%';
+#ifndef DJB_V6ONLY
   byte_copy(key + 2,4,ip);
   r = cdb_find(&c,key,6);
   if (!r) r = cdb_find(&c,key,5);
@@ -301,10 +373,21 @@ int respond(char *q,char qtype[2],char i
   if (r == -1) return 0;
   if (r && (cdb_datalen(&c) == 2))
     if (cdb_read(&c,clientloc,2,cdb_datapos(&c)) == -1) return 0;
+#else
+  if (byte_equal(ip,12,V4mappedprefix)) {
+    byte_copy(key + 2,4,ip+12);
+    r = cdb_find(&c,key,6);
+    if (!r) r = cdb_find(&c,key,5);
+    if (!r) r = cdb_find(&c,key,4);
+    if (!r) r = cdb_find(&c,key,3);
+    if (!r) r = cdb_find(&c,key,2);
+    if (r == -1) return 0;
+    if (r && (cdb_datalen(&c) == 2))
+      if (cdb_read(&c,clientloc,2,cdb_datapos(&c)) == -1) return 0;
+  }
+#endif /* DJB_V6ONLY */
 
   r = doit(q,qtype);
 
-  cdb_free(&c);
-  close(fd);
   return r;
 }
