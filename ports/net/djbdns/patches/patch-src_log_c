$MirOS: ports/net/djbdns/patches/patch-src_log_c,v 1.1.201.1 2005/05/14 23:21:04 tg Exp $
--- src/log.c.orig	Sun Feb 11 21:11:23 2001
+++ src/log.c	Tue Dec 13 23:45:41 2005
@@ -3,6 +3,9 @@
 #include "uint16.h"
 #include "error.h"
 #include "byte.h"
+#ifdef DJB_V6ONLY
+#include "ip6.h"
+#endif /* DJB_V6ONLY */
 #include "log.h"
 
 /* work around gcc 2.95.2 bug */
@@ -45,12 +48,21 @@ static void space(void)
   string(" ");
 }
 
+#ifndef DJB_V6ONLY
 static void ip(const char i[4])
+#else
+static void ip(const char i[16])
+#endif /* DJB_V6ONLY */
 {
+#ifndef DJB_V6ONLY
   hex(i[0]);
   hex(i[1]);
   hex(i[2]);
   hex(i[3]);
+#else
+  int j;
+  for (j=0; j<16; ++j) hex(i[j]);
+#endif /* DJB_V6ONLY */
 }
 
 static void logid(const char id[2])
@@ -76,7 +88,7 @@ static void name(const char *q)
     string(".");
     return;
   }
-  while (state = *q++) {
+  while ((state = *q++)) {
     while (state) {
       ch = *q++;
       --state;
@@ -94,7 +106,11 @@ void log_startup(void)
   line();
 }
 
+#ifndef DJB_V6ONLY
 void log_query(uint64 *qnum,const char client[4],unsigned int port,const char id[2],const char *q,const char qtype[2])
+#else
+void log_query(uint64 *qnum,const char client[16],unsigned int port,const char id[2],const char *q,const char qtype[2])
+#endif /* DJB_V6ONLY */
 {
   string("query "); number(*qnum); space();
   ip(client); string(":"); hex(port >> 8); hex(port & 255);
@@ -119,14 +135,22 @@ void log_querydrop(uint64 *qnum)
   line();
 }
 
+#ifndef DJB_V6ONLY
 void log_tcpopen(const char client[4],unsigned int port)
+#else
+void log_tcpopen(const char client[16],unsigned int port)
+#endif /* DJB_V6ONLY */
 {
   string("tcpopen ");
   ip(client); string(":"); hex(port >> 8); hex(port & 255);
   line();
 }
 
+#ifndef DJB_V6ONLY
 void log_tcpclose(const char client[4],unsigned int port)
+#else
+void log_tcpclose(const char client[16],unsigned int port)
+#endif /* DJB_V6ONLY */
 {
   const char *x = error_str(errno);
   string("tcpclose ");
@@ -135,15 +159,24 @@ void log_tcpclose(const char client[4],u
   line();
 }
 
+#ifndef DJB_V6ONLY
 void log_tx(const char *q,const char qtype[2],const char *control,const char servers[64],unsigned int gluelessness)
+#else
+void log_tx(const char *q,const char qtype[2],const char *control,const char servers[256],unsigned int gluelessness)
+#endif /* DJB_V6ONLY */
 {
   int i;
 
   string("tx "); number(gluelessness); space();
   logtype(qtype); space(); name(q); space();
   name(control);
+#ifndef DJB_V6ONLY
   for (i = 0;i < 64;i += 4)
     if (byte_diff(servers + i,4,"\0\0\0\0")) {
+#else
+  for (i = 0;i < 256;i += 16)
+    if (byte_diff(servers + i,16,V6any)) {
+#endif /* DJB_V6ONLY */
       space();
       ip(servers + i);
     }
@@ -175,27 +208,50 @@ void log_cachednxdomain(const char *dn)
   line();
 }
 
+#ifndef DJB_V6ONLY
 void log_nxdomain(const char server[4],const char *q,unsigned int ttl)
+#else
+void log_nxdomain(const char server[16],const char *q,unsigned int ttl)
+#endif /* DJB_V6ONLY */
 {
   string("nxdomain "); ip(server); space(); number(ttl); space();
   name(q);
   line();
 }
 
+#ifndef DJB_V6ONLY
 void log_nodata(const char server[4],const char *q,const char qtype[2],unsigned int ttl)
+#else
+void log_nodata(const char server[16],const char *q,const char qtype[2],unsigned int ttl)
+#endif /* DJB_V6ONLY */
 {
   string("nodata "); ip(server); space(); number(ttl); space();
   logtype(qtype); space(); name(q);
   line();
 }
 
+#ifndef DJB_V6ONLY
 void log_lame(const char server[4],const char *control,const char *referral)
+#else
+void log_lame(const char server[16],const char *control,const char *referral)
+#endif /* DJB_V6ONLY */
 {
   string("lame "); ip(server); space();
   name(control); space(); name(referral);
   line();
 }
 
+#ifndef DJB_V6ONLY
+void log_ignore_referral(const char server[4],const char *control,const char *referral)
+#else
+void log_ignore_referral(const char server[16],const char *control,const char *referral)
+#endif /* DJB_V6ONLY */
+{
+  string("ignored referral "); ip(server); space();
+  name(control); space(); name(referral);
+  line();
+}
+
 void log_servfail(const char *dn)
 {
   const char *x = error_str(errno);
@@ -205,7 +261,11 @@ void log_servfail(const char *dn)
   line();
 }
 
+#ifndef DJB_V6ONLY
 void log_rr(const char server[4],const char *q,const char type[2],const char *buf,unsigned int len,unsigned int ttl)
+#else
+void log_rr(const char server[16],const char *q,const char type[2],const char *buf,unsigned int len,unsigned int ttl)
+#endif /* DJB_V6ONLY */
 {
   int i;
 
@@ -222,7 +282,11 @@ void log_rr(const char server[4],const c
   line();
 }
 
+#ifndef DJB_V6ONLY
 void log_rrns(const char server[4],const char *q,const char *data,unsigned int ttl)
+#else
+void log_rrns(const char server[16],const char *q,const char *data,unsigned int ttl)
+#endif /* DJB_V6ONLY */
 {
   string("rr "); ip(server); space(); number(ttl);
   string(" ns "); name(q); space();
@@ -230,7 +294,11 @@ void log_rrns(const char server[4],const
   line();
 }
 
+#ifndef DJB_V6ONLY
 void log_rrcname(const char server[4],const char *q,const char *data,unsigned int ttl)
+#else
+void log_rrcname(const char server[16],const char *q,const char *data,unsigned int ttl)
+#endif /* DJB_V6ONLY */
 {
   string("rr "); ip(server); space(); number(ttl);
   string(" cname "); name(q); space();
@@ -238,7 +306,11 @@ void log_rrcname(const char server[4],co
   line();
 }
 
+#ifndef DJB_V6ONLY
 void log_rrptr(const char server[4],const char *q,const char *data,unsigned int ttl)
+#else
+void log_rrptr(const char server[16],const char *q,const char *data,unsigned int ttl)
+#endif /* DJB_V6ONLY */
 {
   string("rr "); ip(server); space(); number(ttl);
   string(" ptr "); name(q); space();
@@ -246,7 +318,11 @@ void log_rrptr(const char server[4],cons
   line();
 }
 
+#ifndef DJB_V6ONLY
 void log_rrmx(const char server[4],const char *q,const char *mx,const char pref[2],unsigned int ttl)
+#else
+void log_rrmx(const char server[16],const char *q,const char *mx,const char pref[2],unsigned int ttl)
+#endif /* DJB_V6ONLY */
 {
   uint16 u;
 
@@ -257,7 +333,11 @@ void log_rrmx(const char server[4],const
   line();
 }
 
+#ifndef DJB_V6ONLY
 void log_rrsoa(const char server[4],const char *q,const char *n1,const char *n2,const char misc[20],unsigned int ttl)
+#else
+void log_rrsoa(const char server[16],const char *q,const char *n1,const char *n2,const char misc[20],unsigned int ttl)
+#endif /* DJB_V6ONLY */
 {
   uint32 u;
   int i;
