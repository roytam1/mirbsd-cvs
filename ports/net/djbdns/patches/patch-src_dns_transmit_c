$MirOS$
--- src/dns_transmit.c.orig	Sun Feb 11 21:11:23 2001
+++ src/dns_transmit.c	Sat May 14 22:27:17 2005
@@ -7,6 +7,9 @@
 #include "byte.h"
 #include "uint16.h"
 #include "dns.h"
+#ifdef DJB_V6ONLY
+#include "ip6.h"
+#endif /* DJB_V6ONLY */
 
 static int serverwantstcp(const char *buf,unsigned int len)
 {
@@ -85,9 +88,17 @@ static int randombind(struct dns_transmi
   int j;
 
   for (j = 0;j < 10;++j)
+#ifndef DJB_V6ONLY
     if (socket_bind4(d->s1 - 1,d->localip,1025 + dns_random(64510)) == 0)
+#else
+    if (socket_bind6(d->s1 - 1,d->localip,1025 + dns_random(64510),d->scope_id) == 0)
+#endif /* DJB_V6ONLY */
       return 0;
+#ifndef DJB_V6ONLY
   if (socket_bind4(d->s1 - 1,d->localip,0) == 0)
+#else
+  if (socket_bind6(d->s1 - 1,d->localip,0,d->scope_id) == 0)
+#endif /* DJB_V6ONLY */
     return 0;
   return -1;
 }
@@ -102,16 +113,29 @@ static int thisudp(struct dns_transmit *
 
   while (d->udploop < 4) {
     for (;d->curserver < 16;++d->curserver) {
+#ifndef DJB_V6ONLY
       ip = d->servers + 4 * d->curserver;
       if (byte_diff(ip,4,"\0\0\0\0")) {
+#else
+      ip = d->servers + 16 * d->curserver;
+      if (byte_diff(ip,16,V6any)) {
+#endif /* DJB_V6ONLY */
 	d->query[2] = dns_random(256);
 	d->query[3] = dns_random(256);
   
+#ifndef DJB_V6ONLY
         d->s1 = 1 + socket_udp();
+#else
+        d->s1 = 1 + socket_udp6();
+#endif /* DJB_V6ONLY */
         if (!d->s1) { dns_transmit_free(d); return -1; }
 	if (randombind(d) == -1) { dns_transmit_free(d); return -1; }
 
+#ifndef DJB_V6ONLY
         if (socket_connect4(d->s1 - 1,ip,53) == 0)
+#else
+        if (socket_connect6(d->s1 - 1,ip,53,d->scope_id) == 0)
+#endif /* DJB_V6ONLY */
           if (send(d->s1 - 1,d->query + 2,d->querylen - 2,0) == d->querylen - 2) {
             struct taia now;
             taia_now(&now);
@@ -153,19 +177,32 @@ static int thistcp(struct dns_transmit *
   packetfree(d);
 
   for (;d->curserver < 16;++d->curserver) {
+#ifndef DJB_V6ONLY
     ip = d->servers + 4 * d->curserver;
     if (byte_diff(ip,4,"\0\0\0\0")) {
+#else
+    ip = d->servers + 16 * d->curserver;
+    if (byte_diff(ip,16,V6any)) {
+#endif /* DJB_V6ONLY */
       d->query[2] = dns_random(256);
       d->query[3] = dns_random(256);
 
+#ifndef DJB_V6ONLY
       d->s1 = 1 + socket_tcp();
+#else
+      d->s1 = 1 + socket_tcp6();
+#endif /* DJB_V6ONLY */
       if (!d->s1) { dns_transmit_free(d); return -1; }
       if (randombind(d) == -1) { dns_transmit_free(d); return -1; }
   
       taia_now(&now);
       taia_uint(&d->deadline,10);
       taia_add(&d->deadline,&d->deadline,&now);
+#ifndef DJB_V6ONLY
       if (socket_connect4(d->s1 - 1,ip,53) == 0) {
+#else
+      if (socket_connect6(d->s1 - 1,ip,53,d->scope_id) == 0) {
+#endif /* DJB_V6ONLY */
         d->tcpstate = 2;
         return 0;
       }
@@ -193,7 +230,11 @@ static int nexttcp(struct dns_transmit *
   return thistcp(d);
 }
 
+#ifndef DJB_V6ONLY
 int dns_transmit_start(struct dns_transmit *d,const char servers[64],int flagrecursive,const char *q,const char qtype[2],const char localip[4])
+#else
+int dns_transmit_start(struct dns_transmit *d,const char servers[256],int flagrecursive,const char *q,const char qtype[2],const char localip[16])
+#endif /* DJB_V6ONLY */
 {
   unsigned int len;
 
@@ -213,7 +254,11 @@ int dns_transmit_start(struct dns_transm
 
   byte_copy(d->qtype,2,qtype);
   d->servers = servers;
+#ifndef DJB_V6ONLY
   byte_copy(d->localip,4,localip);
+#else
+  byte_copy(d->localip,16,localip);
+#endif /* DJB_V6ONLY */
 
   d->udploop = flagrecursive ? 1 : 0;
 
