$MirOS: ports/net/djbdns/patches/patch-src_dns_transmit_c,v 1.4 2016/03/26 17:29:20 tg Exp $
--- src/dns_transmit.c.orig	Sun Feb 11 21:11:23 2001
+++ src/dns_transmit.c	Wed Mar 15 22:12:16 2017
@@ -7,6 +7,7 @@
 #include "byte.h"
 #include "uint16.h"
 #include "dns.h"
+#include "ip6.h"
 
 static int serverwantstcp(const char *buf,unsigned int len)
 {
@@ -80,14 +81,32 @@ void dns_transmit_free(struct dns_transm
   packetfree(d);
 }
 
-static int randombind(struct dns_transmit *d)
+static int randombind(struct dns_transmit *d, int callv4)
 {
   int j;
+  char localip[16];
 
+  byte_copy(localip,16,d->localip);
+
+  if (/* v4 nameserver */ callv4) {
+    if (!ip6_isv4mapped(localip) /* and it's not :: but that's ok */) {
+      /* v6 IPSEND (but not IN6ADDR_ANY) is ignored in favour of 0.0.0.0 */
+      /*XXX consider having two IPSENDs */
+      byte_zero(localip+12,4);
+    }
+
+    for (j = 0;j < 10;++j)
+      if (socket_bind4(d->s1 - 1,localip + 12,1025 + dns_random(64510)) == 0)
+        return 0;
+    if (socket_bind4(d->s1 - 1,localip + 12,0) == 0)
+      return 0;
+    return -1;
+  }
+
   for (j = 0;j < 10;++j)
-    if (socket_bind4(d->s1 - 1,d->localip,1025 + dns_random(64510)) == 0)
+    if (socket_bind6(d->s1 - 1,localip,1025 + dns_random(64510),d->scope_id) == 0)
       return 0;
-  if (socket_bind4(d->s1 - 1,d->localip,0) == 0)
+  if (socket_bind6(d->s1 - 1,localip,0,d->scope_id) == 0)
     return 0;
   return -1;
 }
@@ -102,16 +121,25 @@ static int thisudp(struct dns_transmit *
 
   while (d->udploop < 4) {
     for (;d->curserver < 16;++d->curserver) {
-      ip = d->servers + 4 * d->curserver;
-      if (byte_diff(ip,4,"\0\0\0\0")) {
+      ip = d->servers + 16 * d->curserver;
+      if (byte_diff(ip,16,V6any)) {
+	int callv4 = ip6_isv4mapped(ip);
+
+	if (!callv4 && ip6_isv4mapped(d->localip)) {
+	  /* v6 nameserver but v4 IPSEND */
+	  log_dropns(d->localip, ip);
+	  continue;
+	}
+
 	d->query[2] = dns_random(256);
 	d->query[3] = dns_random(256);
   
-        d->s1 = 1 + socket_udp();
+        d->s1 = 1 + (callv4 ? socket_udp() : socket_udp6());
         if (!d->s1) { dns_transmit_free(d); return -1; }
-	if (randombind(d) == -1) { dns_transmit_free(d); return -1; }
+	if (randombind(d,callv4) == -1) { dns_transmit_free(d); return -1; }
 
-        if (socket_connect4(d->s1 - 1,ip,53) == 0)
+	if ((callv4 ? socket_connect4(d->s1 - 1,ip + 12,53)
+	 : socket_connect6(d->s1 - 1,ip,53,d->scope_id)) == 0)
           if (send(d->s1 - 1,d->query + 2,d->querylen - 2,0) == d->querylen - 2) {
             struct taia now;
             taia_now(&now);
@@ -153,19 +181,21 @@ static int thistcp(struct dns_transmit *
   packetfree(d);
 
   for (;d->curserver < 16;++d->curserver) {
-    ip = d->servers + 4 * d->curserver;
-    if (byte_diff(ip,4,"\0\0\0\0")) {
+    ip = d->servers + 16 * d->curserver;
+    if (byte_diff(ip,16,V6any)) {
+      int callv4 = byte_equal(ip,12,V4mappedprefix);
       d->query[2] = dns_random(256);
       d->query[3] = dns_random(256);
 
-      d->s1 = 1 + socket_tcp();
+      d->s1 = 1 + (callv4 ? socket_tcp() : socket_tcp6());
       if (!d->s1) { dns_transmit_free(d); return -1; }
-      if (randombind(d) == -1) { dns_transmit_free(d); return -1; }
+      if (randombind(d,callv4) == -1) { dns_transmit_free(d); return -1; }
   
       taia_now(&now);
       taia_uint(&d->deadline,10);
       taia_add(&d->deadline,&d->deadline,&now);
-      if (socket_connect4(d->s1 - 1,ip,53) == 0) {
+      if ((callv4 ? socket_connect4(d->s1 - 1,ip + 12,53)
+       : socket_connect6(d->s1 - 1,ip,53,d->scope_id)) == 0) {
         d->tcpstate = 2;
         return 0;
       }
@@ -193,7 +223,7 @@ static int nexttcp(struct dns_transmit *
   return thistcp(d);
 }
 
-int dns_transmit_start(struct dns_transmit *d,const char servers[64],int flagrecursive,const char *q,const char qtype[2],const char localip[4])
+int dns_transmit_start(struct dns_transmit *d,const char servers[256],int flagrecursive,const char *q,const char qtype[2],const char localip[16])
 {
   unsigned int len;
 
@@ -213,7 +243,7 @@ int dns_transmit_start(struct dns_transm
 
   byte_copy(d->qtype,2,qtype);
   d->servers = servers;
-  byte_copy(d->localip,4,localip);
+  byte_copy(d->localip,16,localip);
 
   d->udploop = flagrecursive ? 1 : 0;
 
