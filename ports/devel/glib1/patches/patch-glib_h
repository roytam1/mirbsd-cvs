$MirOS: ports/devel/glib1/patches/patch-glib_h,v 1.1.7.1 2005/03/18 15:44:37 tg Exp $
--- glib.h.orig	2001-02-27 04:44:38.000000000 +0100
+++ glib.h	2009-07-07 20:09:47.000000000 +0200
@@ -27,6 +27,8 @@
 #ifndef __G_LIB_H__
 #define __G_LIB_H__
 
+#include <sys/param.h>
+
 /* system specific config file glibconfig.h provides definitions for
  * the extrema of many of the standard types. These are:
  *
@@ -119,8 +121,12 @@ extern "C" {
  *  defined then the current definition is correct.
  */
 #ifndef	NULL
+#ifdef __cplusplus
+#define	NULL	(0)
+#else
 #define	NULL	((void*) 0)
 #endif
+#endif
 
 #ifndef	FALSE
 #define	FALSE	(0)
@@ -130,11 +136,13 @@ extern "C" {
 #define	TRUE	(!FALSE)
 #endif
 
-#undef	MAX
+#ifndef MAX
 #define MAX(a, b)  (((a) > (b)) ? (a) : (b))
+#endif
 
-#undef	MIN
+#ifndef MIN
 #define MIN(a, b)  (((a) < (b)) ? (a) : (b))
+#endif
 
 #undef	ABS
 #define ABS(a)	   (((a) < 0) ? -(a) : (a))
@@ -202,20 +210,11 @@ extern "C" {
 #  endif
 #endif
 #ifndef G_INLINE_FUNC
-#  ifdef __GNUC__
-#    ifdef __OPTIMIZE__
-#      define G_INLINE_FUNC extern inline
-#    else
-#      undef G_CAN_INLINE
-#      define G_INLINE_FUNC extern
-#    endif
-#  else /* !__GNUC__ */
 #    ifdef G_CAN_INLINE
 #      define G_INLINE_FUNC static inline
 #    else
 #      define G_INLINE_FUNC extern
 #    endif
-#  endif /* !__GNUC__ */
 #endif /* !G_INLINE_FUNC */
 
 
@@ -272,7 +271,7 @@ extern "C" {
 /* Wrap the gcc __PRETTY_FUNCTION__ and __FUNCTION__ variables with
  * macros, so we can refer to them as strings unconditionally.
  */
-#ifdef	__GNUC__
+#if defined(__GNUC__) && (__GNUC__ == 3 && __GNUC_MINOR__ < 4)
 #define	G_GNUC_FUNCTION		__FUNCTION__
 #define	G_GNUC_PRETTY_FUNCTION	__PRETTY_FUNCTION__
 #else	/* !__GNUC__ */
