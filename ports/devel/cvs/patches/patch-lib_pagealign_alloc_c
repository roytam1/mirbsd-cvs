$MirOS$
--- lib/pagealign_alloc.c.orig	Tue Jul 12 15:39:13 2005
+++ lib/pagealign_alloc.c	Wed Sep 15 19:51:42 2010
@@ -44,6 +44,12 @@
 #include "xalloc.h"
 #include "gettext.h"
 
+#if HAVE_MMAP && !defined(HAVE_MAP_ANONYMOUS)
+#include <stdio.h>
+#endif
+
+__RCSID("$MirOS$");
+
 #define _(str) gettext (str)
 
 #if HAVE_MMAP
@@ -132,6 +138,7 @@ pagealign_alloc (size_t size)
   const int fd = -1;
   const int flags = MAP_ANONYMOUS | MAP_PRIVATE;
 # else /* !HAVE_MAP_ANONYMOUS */
+  static int beenhere = 0;
   static int fd = -1;  /* Only open /dev/zero once in order to avoid limiting
 			  the amount of memory we may allocate based on the
 			  number of open file descriptors.  */
@@ -140,7 +147,20 @@ pagealign_alloc (size_t size)
     {
       fd = open ("/dev/zero", O_RDONLY, 0666);
       if (fd < 0)
-	error (EXIT_FAILURE, errno, _("Failed to open /dev/zero for read"));
+	{
+	  if (!beenhere)
+	    {
+	      beenhere = 1;
+	      error (EXIT_FAILURE, errno, _("Failed to open /dev/zero for read"));
+	    }
+	  else
+	    {
+	      fprintf (stderr, "Fatal in pagealign: %s\n",
+			_("Failed to open /dev/zero for read"));
+	      fflush (stderr);
+	      _exit (EXIT_FAILURE);
+	    }
+	}
     }
 # endif /* HAVE_MAP_ANONYMOUS */
   ret = mmap (NULL, size, PROT_READ | PROT_WRITE, flags, fd, 0);
