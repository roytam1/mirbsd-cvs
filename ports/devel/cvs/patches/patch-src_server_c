$MirOS: ports/devel/cvs/patches/patch-src_server_c,v 1.5 2011/05/06 23:17:28 tg Exp $
--- src/server.c.orig	Wed Sep 28 15:25:37 2005
+++ src/server.c	Sat Jun 11 03:06:20 2011
@@ -20,6 +20,8 @@
 #include "getline.h"
 #include "getnline.h"
 
+__RCSID("$MirOS: ports/devel/cvs/patches/patch-src_server_c,v 1.5 2011/05/06 23:17:28 tg Exp $");
+
 int server_active = 0;
 
 #if defined (SERVER_SUPPORT) || defined (CLIENT_SUPPORT)
@@ -823,6 +825,14 @@ E Protocol error: Root says \"%s\" but p
     }
 # endif
 
+    if (root_allow_used() && !root_allow_ok(arg))
+    {
+	if (alloc_pending (80 + strlen (arg)))
+	    sprintf (pending_error_text,
+		     "E Bad root %s", arg);
+	return;
+    }
+
     /* For pserver, this will already have happened, and the call will do
        nothing.  But for rsh, we need to do it now.  */
     config = get_root_allow_config (current_parsed_root->directory,
@@ -2350,6 +2360,7 @@ prepost_proxy_proc (const char *reposito
     bool *pre = closure;
 
     /* %c = cvs_cmd_name
+     * %I = commit ID
      * %p = shortrepos
      * %r = repository
      */
@@ -2367,6 +2378,7 @@ prepost_proxy_proc (const char *reposito
 # endif /* SUPPORT_OLD_INFO_FMT_STRINGS */
 	                      filter,
 	                      "c", "s", cvs_cmd_name,
+			      "I", "s", global_session_id,
 	                      "R", "s", referrer ? referrer->original : "NONE",
 	                      "p", "s", ".",
 	                      "r", "s", current_parsed_root->directory,
@@ -3519,7 +3531,7 @@ do_cvs_command (char *cmd_name, int (*co
      * Therefore, we wish to avoid reprocessing the command since that would
      * cause endless recursion.
      */
-    if (isProxyServer())
+    if ((command != version || current_parsed_root) && isProxyServer())
     {
 # ifdef PROXY_SUPPORT
 	if (reprocessing)
@@ -4621,6 +4633,14 @@ serve_rls (char *arg)
 
 
 static void
+serve_suck (char *arg)
+{
+  do_cvs_command ("suck", suck);
+}
+
+
+
+static void
 serve_add (char *arg)
 {
     do_cvs_command ("add", add);
@@ -5962,6 +5982,7 @@ struct request requests[] =
   REQ_LINE("rannotate", serve_rannotate, 0),
   REQ_LINE("noop", serve_noop, RQ_ROOTLESS),
   REQ_LINE("version", serve_version, RQ_ROOTLESS),
+  REQ_LINE("suck", serve_suck, 0),
   REQ_LINE(NULL, NULL, 0)
 
 #undef REQ_LINE
@@ -6271,8 +6292,12 @@ size_t MaxProxyBufferSize = (size_t)(8 *
 
 static const char *const server_usage[] =
 {
+#ifdef ALLOW_CONFIG_OVERRIDE
     "Usage: %s %s [-c config-file]\n",
     "\t-c config-file\tPath to an alternative CVS config file.\n",
+#else
+    "Usage: %s %s\n",
+#endif
     "Normally invoked by a cvs client on a remote machine.\n",
     NULL
 };
@@ -6289,8 +6314,8 @@ parseServerOptions (int argc, char **arg
     {
 	switch (c)
 	{
-#ifdef ALLOW_CONFIG_OVERRIDE
 	    case 'c':
+#ifdef ALLOW_CONFIG_OVERRIDE
 		if (gConfigPath) free (gConfigPath);
 		gConfigPath = xstrdup (optarg);
 		break;
@@ -6887,7 +6912,7 @@ cleanup:
 static int
 check_pam_password (char **username, char *password)
 {
-    int retval, err;
+    int retval;
     struct pam_conv conv = { cvs_pam_conv, 0 };
     char *pam_stage = "start";
 
@@ -6930,7 +6955,7 @@ check_pam_password (char **username, cha
 
     return retval == PAM_SUCCESS;       /* indicate success */
 }
-#endif
+#else /* !HAVE_PAM */
 
 static int
 check_system_password (char *username, char *password)
@@ -6996,6 +7021,7 @@ error 0 %s: no such user\n", username);
 #endif
     return 1;
 }
+#endif /* !HAVE_PAM */
 
 
 
