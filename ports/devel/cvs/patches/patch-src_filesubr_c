$MirOS$
--- src/filesubr.c.orig	Wed Sep 28 15:25:37 2005
+++ src/filesubr.c	Wed Sep 15 19:36:15 2010
@@ -22,6 +22,8 @@
 #include "save-cwd.h"
 #include "xsize.h"
 
+__RCSID("$MirOS$");
+
 static int deep_remove_dir (const char *path);
 
 /*
@@ -795,6 +797,11 @@ last_component (const char *path)
    The workaround is to put -f in inetd.conf which means that
    get_homedir won't get called until after the switch in user ID.
 
+   NOTE: the above paragraph is not sufficient if the HOME environment
+   variable is set, it overrides the uid based password lookup, hence
+   the change_uid logic path that blocks the HOME environment variable
+   when the uid gets changed.
+
    The whole concept of a "home directory" on the server is pretty
    iffy, although I suppose some people probably are relying on it for
    .cvsrc and such, in the cases where it works.  */
@@ -802,15 +809,25 @@ char *
 get_homedir (void)
 {
     static char *home = NULL;
+    static uid_t home_uid = 0;
+    static int changed_uid = 0;
     char *env;
+    uid_t uid;
     struct passwd *pw;
 
+    uid = getuid();
+    if (home && home_uid != uid) {
+        home = NULL;
+        home_uid = uid;
+        changed_uid = 1;
+    }
+
     if (home != NULL)
 	return home;
 
-    if (!server_active && (env = getenv ("HOME")) != NULL)
+    if (!server_active && ((env = getenv ("HOME")) != NULL) && !changed_uid)
 	home = env;
-    else if ((pw = (struct passwd *) getpwuid (getuid ()))
+    else if ((pw = (struct passwd *) getpwuid (uid))
 	     && pw->pw_dir)
 	home = xstrdup (pw->pw_dir);
     else
