$MirOS$
$OpenBSD: patch-httpget_c,v 1.1 2003/11/13 20:51:50 margarida Exp $
--- httpget.c.orig	2004-09-07 16:55:25.000000000 +0000
+++ httpget.c	2004-09-07 16:55:27.000000000 +0000
@@ -55,11 +55,10 @@ void readstring (char *string, int maxle
 #endif
 	int pos = 0;
 
-	while(1) {
+	while(pos < maxlen) {
 		if( read(fileno(f),string+pos,1) == 1) {
 			pos++;
 			if(string[pos-1] == '\n') {
-				string[pos] = 0;
 				break;
 			}
 		}
@@ -68,6 +67,7 @@ void readstring (char *string, int maxle
 			exit(1);
 		}
 	}
+	string[pos] = 0;
 #if 0
 	do {
 		result = fgets(string, maxlen, f);
@@ -111,27 +111,29 @@ void encode64 (char *source,char *destin
 }
 
 /* VERY  simple auth-from-URL grabber */
-int getauthfromURL(char *url,char *auth)
+int getauthfromURL(char *url,char *auth, size_t authlen)
 {
   char *pos;
 
+  if (!authlen || (url == NULL) || (auth == NULL))
+    return 0;
+
   *auth = 0;
 
   if (!(strncmp(url, "http://", 7)))
     url += 7;
 
-  if( (pos = strchr(url,'@')) ) {
-    int i;
-    for(i=0;i<pos-url;i++) {
-      if( url[i] == '/' )
-         return 0;
-    }
-    strncpy(auth,url,pos-url);
-    auth[pos-url] = 0;
-    strcpy(url,pos+1);
-    return 1;
+  if( (pos = strchr(url,'@')) == NULL )
+    return 0;
+
+  *pos = 0;
+  if (strrchr(url, '/') != NULL) {
+    *pos = '@';
+    return 0;
   }
-  return 0;
+  strlcpy(auth, url, authlen);
+  memmove(url, ++pos, 1 + strlen(pos));
+  return 1;
 }
 
 static const char *defaultportstr = "80";
@@ -262,17 +264,16 @@ int http_open (char *url)
 		fprintf (stderr, "malloc() failed, out of memory.\n");
 		exit (1);
 	}
-	strncpy (purl, url, 1023);
-	purl[1023] = '\0';
+	strlcpy (purl, url, 1023);
 
-        getauthfromURL(purl,httpauth1);
+        getauthfromURL(purl,httpauth1,256);
 
 	do {
-		strcpy (request, "GET ");
+		strlcpy (request, "GET ", linelength);
 		if (proxyip != INADDR_NONE) {
 			if (strncmp(url, "http://", 7))
-				strcat (request, "http://");
-			strcat (request, purl);
+				strlcat (request, "http://", linelength);
+			strlcat (request, purl, linelength);
 			myport = proxyport;
 			myip = proxyip;
 		}
@@ -290,19 +291,21 @@ int http_open (char *url)
 					host ? host : "");
 				exit (1);
 			}
-			strcat (request, sptr);
+			strlcat (request, sptr, linelength);
 		}
-		sprintf (request + strlen(request),
+		snprintf (request + strlen(request),
+			linelength - strlen(request),
 			" HTTP/1.0\r\nUser-Agent: %s/%s\r\n",
 			prgName, prgVersion);
 		if (host) {
-			sprintf(request + strlen(request),
+			snprintf(request + strlen(request),
+				linelength - strlen(request),
 				"Host: %s:%s\r\n", host, myport);
 #if 0
 			free (host);
 #endif
 		}
-		strcat (request, ACCEPT_HEAD);
+		strlcat (request, ACCEPT_HEAD, linelength);
 
 #ifdef INET6
 		memset(&hints, 0, sizeof(hints));
@@ -359,15 +362,15 @@ fail:
 
 		if (strlen(httpauth1) || httpauth) {
 			char buf[1023];
-			strcat (request,"Authorization: Basic ");
+			strlcat (request,"Authorization: Basic ", linelength);
                         if(strlen(httpauth1))
                           encode64(httpauth1,buf);
                         else
 			  encode64(httpauth,buf);
-			strcat (request,buf);
-			strcat (request,"\r\n");
+			strlcat (request,buf, linelength);
+			strlcat (request,"\r\n", linelength);
 		}
-		strcat (request, "\r\n");
+		strlcat (request, "\r\n", linelength);
 
 		writestring (sock, request);
 		if (!(myfile = fdopen(sock, "rb"))) {
