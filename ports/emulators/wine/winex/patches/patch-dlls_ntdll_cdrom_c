$MirOS$
--- dlls/ntdll/cdrom.c.orig	2004-02-25 18:38:02.000000000 +0000
+++ dlls/ntdll/cdrom.c	2004-02-25 18:50:36.000000000 +0000
@@ -48,6 +48,10 @@
 # include <sys/cdio.h>
 #endif
 
+#ifndef	ENOMEDIUM
+#define	ENOMEDIUM	ENXIO
+#endif
+
 WINE_DEFAULT_DEBUG_CHANNEL(cdrom);
 
 /* FIXME: this is needed because we can't open simultaneously several times /dev/cdrom
@@ -96,7 +100,7 @@ static int CDROM_GetIdeInterface(int dev
         *device = (minor(st.st_rdev) == 63 ? 1 : 0);
         return 1;
     }
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
     FIXME("not implemented for BSD\n");
     return 0;
 #else
@@ -337,7 +341,7 @@ static DWORD CDROM_ResetAudio(int dev)
 {
 #if defined(linux)
     return CDROM_GetStatusCode(ioctl(dev, CDROMRESET));
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
     return CDROM_GetStatusCode(ioctl(dev, CDIOCRESET, NULL));
 #else
     return STATUS_NOT_SUPPORTED;
@@ -353,7 +357,7 @@ static DWORD CDROM_SetTray(int dev, BOOL
 {
 #if defined(linux)
     return CDROM_GetStatusCode(ioctl(dev, doEject ? CDROMEJECT : CDROMCLOSETRAY));
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
     return CDROM_GetStatusCode((ioctl(dev, CDIOCALLOW, NULL)) ||
                                (ioctl(dev, doEject ? CDIOCEJECT : CDIOCCLOSE, NULL)) ||
                                (ioctl(dev, CDIOCPREVENT, NULL)));
@@ -372,7 +376,7 @@ static DWORD CDROM_ControlEjection(int d
     int val = rmv->PreventMediaRemoval;
 #if defined(linux)
     return CDROM_GetStatusCode(ioctl(dev, CDROM_LOCKDOOR, val));
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
     return CDROM_GetStatusCode(ioctl(dev, (val) ? CDIOCPREVENT : CDIOCALLOW, NULL));
 #else
     return STATUS_NOT_SUPPORTED;
@@ -429,7 +433,7 @@ static DWORD CDROM_ReadTOC(int dev, CDRO
     }
 end:
     ret = CDROM_GetStatusCode(io);
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
     int                         i, io = -1;
     struct ioc_toc_header	hdr;
     struct ioc_read_toc_entry	entry;
@@ -597,7 +601,7 @@ static DWORD CDROM_ReadQChannel(int dev,
 
  end:
     ret = CDROM_GetStatusCode(io);
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
     struct ioc_read_subchannel	read_sc;
     struct cd_sub_channel_info	sc;
 
@@ -740,7 +744,7 @@ static DWORD CDROM_PlayAudioMSF(int dev,
 	  msf.cdmsf_min1, msf.cdmsf_sec1, msf.cdmsf_frame1);
  end:
     ret = CDROM_GetStatusCode(io);
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
     struct	ioc_play_msf	msf;
     int         io;
 
@@ -786,7 +790,7 @@ static DWORD CDROM_SeekAudioMSF(int dev,
     msf.frame  = audio_msf->F;
 
     return CDROM_GetStatusCode(ioctl(dev, CDROMSEEK, &msf));
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
     FIXME("Could a BSD expert implement the seek function ?\n");
     return STATUS_NOT_SUPPORTED;
 #else
@@ -803,7 +807,7 @@ static DWORD CDROM_PauseAudio(int dev)
 {
 #if defined(linux)
     return CDROM_GetStatusCode(ioctl(dev, CDROMPAUSE));
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
     return CDROM_GetStatusCode(ioctl(dev, CDIOCPAUSE, NULL));
 #else
     return STATUS_NOT_SUPPORTED;
@@ -819,7 +823,7 @@ static DWORD CDROM_ResumeAudio(int dev)
 {
 #if defined(linux)
     return CDROM_GetStatusCode(ioctl(dev, CDROMRESUME));
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
     return CDROM_GetStatusCode(ioctl(dev, CDIOCRESUME, NULL));
 #else
     return STATUS_NOT_SUPPORTED;
@@ -835,7 +839,7 @@ static DWORD CDROM_StopAudio(int dev)
 {
 #if defined(linux)
     return CDROM_GetStatusCode(ioctl(dev, CDROMSTOP));
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
     return CDROM_GetStatusCode(ioctl(dev, CDIOCSTOP, NULL));
 #else
     return STATUS_NOT_SUPPORTED;
@@ -862,7 +866,7 @@ static DWORD CDROM_GetVolume(int dev, VO
         vc->PortVolume[3] = volc.channel3;
     }
     return CDROM_GetStatusCode(io);
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
     struct  ioc_vol     volc;
     int io;
 
@@ -896,7 +900,7 @@ static DWORD CDROM_SetVolume(int dev, co
     volc.channel3 = vc->PortVolume[3];
 
     return CDROM_GetStatusCode(ioctl(dev, CDROMVOLCTRL, &volc));
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
     struct  ioc_vol     volc;
 
     volc.vol[0] = vc->PortVolume[0];
@@ -993,7 +997,7 @@ static DWORD CDROM_RawRead(int dev, cons
             break;
         }
     }
-#elif defined(__NetBSD__)
+#elif defined(__NetBSD__) || defined(__OpenBSD__)
     {
         switch (raw->TrackMode)
         {
