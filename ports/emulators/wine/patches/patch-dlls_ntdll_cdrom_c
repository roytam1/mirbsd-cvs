$MirOS$
$NetBSD: patch-ab,v 1.19 2005/07/26 13:24:36 adam Exp $
--- dlls/ntdll/cdrom.c.orig	Tue Jun 17 14:07:08 2008
+++ dlls/ntdll/cdrom.c	Tue Jul 29 20:02:16 2008
@@ -65,6 +65,16 @@
 #endif
 #ifdef HAVE_LINUX_CDROM_H
 # include <linux/cdrom.h>
+#else
+# ifndef CD_FRAMES
+#  define CD_FRAMES 75
+# endif
+# ifndef CDROM_MSF
+#  define CDROM_MSF 0x02
+# endif
+# ifndef CD_SECS
+#  define CD_SECS 60
+# endif
 #endif
 #ifdef HAVE_LINUX_UCDROM_H
 # include <linux/ucdrom.h>
@@ -438,7 +448,7 @@ static NTSTATUS CDROM_SyncCache(int dev,
    cdrom_cache[dev].toc_good = 1;
    return STATUS_SUCCESS;
 
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
 
    int i, tsz;
    struct ioc_toc_header hdr;
@@ -602,6 +612,16 @@ static int CDROM_GetInterfaceInfo(int fd
         return 1;
     }
     return 0;
+#elif defined(__OpenBSD__)
+    struct scsi_addr addr;
+    if (ioctl(fd, SCIOCIDENTIFY, &addr) != -1) {
+	*port = addr.type == TYPE_SCSI ? 1 : 0;
+	*iface = addr.scbus;
+	*device = addr.target;
+	*lun = addr.lun;
+        return 1;
+    }
+    return 0;
 #elif defined(__FreeBSD__)
     FIXME("not implemented for BSD\n");
     return 0;
@@ -717,7 +737,7 @@ static NTSTATUS CDROM_ResetAudio(int fd)
 {
 #if defined(linux)
     return CDROM_GetStatusCode(ioctl(fd, CDROMRESET));
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
     return CDROM_GetStatusCode(ioctl(fd, CDIOCRESET, NULL));
 #else
     return STATUS_NOT_SUPPORTED;
@@ -733,7 +753,7 @@ static NTSTATUS CDROM_SetTray(int fd, BO
 {
 #if defined(linux)
     return CDROM_GetStatusCode(ioctl(fd, doEject ? CDROMEJECT : CDROMCLOSETRAY));
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
     return CDROM_GetStatusCode((ioctl(fd, CDIOCALLOW, NULL)) ||
                                (ioctl(fd, doEject ? CDIOCEJECT : CDIOCCLOSE, NULL)) ||
                                (ioctl(fd, CDIOCPREVENT, NULL)));
@@ -754,7 +774,7 @@ static NTSTATUS CDROM_ControlEjection(in
 {
 #if defined(linux)
     return CDROM_GetStatusCode(ioctl(fd, CDROM_LOCKDOOR, rmv->PreventMediaRemoval));
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
     return CDROM_GetStatusCode(ioctl(fd, (rmv->PreventMediaRemoval) ? CDIOCPREVENT : CDIOCALLOW, NULL));
 #else
     return STATUS_NOT_SUPPORTED;
@@ -908,7 +928,7 @@ static NTSTATUS CDROM_ReadQChannel(int d
 
  end:
     ret = CDROM_GetStatusCode(io);
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
     SUB_Q_HEADER*       hdr = (SUB_Q_HEADER*)data;
     int                 io;
     struct ioc_read_subchannel	read_sc;
@@ -1082,7 +1102,7 @@ static NTSTATUS CDROM_PlayAudioMSF(int f
 	  msf.cdmsf_min1, msf.cdmsf_sec1, msf.cdmsf_frame1);
  end:
     ret = CDROM_GetStatusCode(io);
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
     struct	ioc_play_msf	msf;
     int         io;
 
@@ -1127,7 +1147,7 @@ static NTSTATUS CDROM_SeekAudioMSF(int d
 #if defined(linux)
     struct cdrom_msf0	msf;
     struct cdrom_subchnl sc;
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
     struct ioc_play_msf	msf;
     struct ioc_read_subchannel	read_sc;
     struct cd_sub_channel_info	sc;
@@ -1180,7 +1200,7 @@ static NTSTATUS CDROM_SeekAudioMSF(int d
       return CDROM_GetStatusCode(ioctl(fd, CDROMSEEK, &msf));
     }
     return STATUS_SUCCESS;
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
     read_sc.address_format = CD_MSF_FORMAT;
     read_sc.track          = 0;
     read_sc.data_len       = sizeof(sc);
@@ -1220,7 +1240,7 @@ static NTSTATUS CDROM_PauseAudio(int fd)
 {
 #if defined(linux)
     return CDROM_GetStatusCode(ioctl(fd, CDROMPAUSE));
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
     return CDROM_GetStatusCode(ioctl(fd, CDIOCPAUSE, NULL));
 #else
     return STATUS_NOT_SUPPORTED;
@@ -1236,7 +1256,7 @@ static NTSTATUS CDROM_ResumeAudio(int fd
 {
 #if defined(linux)
     return CDROM_GetStatusCode(ioctl(fd, CDROMRESUME));
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
     return CDROM_GetStatusCode(ioctl(fd, CDIOCRESUME, NULL));
 #else
     return STATUS_NOT_SUPPORTED;
@@ -1252,7 +1272,7 @@ static NTSTATUS CDROM_StopAudio(int fd)
 {
 #if defined(linux)
     return CDROM_GetStatusCode(ioctl(fd, CDROMSTOP));
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
     return CDROM_GetStatusCode(ioctl(fd, CDIOCSTOP, NULL));
 #else
     return STATUS_NOT_SUPPORTED;
@@ -1279,7 +1299,7 @@ static NTSTATUS CDROM_GetVolume(int fd, 
         vc->PortVolume[3] = volc.channel3;
     }
     return CDROM_GetStatusCode(io);
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
     struct  ioc_vol     volc;
     int io;
 
@@ -1313,7 +1333,7 @@ static NTSTATUS CDROM_SetVolume(int fd, 
     volc.channel3 = vc->PortVolume[3];
 
     return CDROM_GetStatusCode(ioctl(fd, CDROMVOLCTRL, &volc));
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
     struct  ioc_vol     volc;
 
     volc.vol[0] = vc->PortVolume[0];
@@ -1757,7 +1777,7 @@ static NTSTATUS DVD_StartSession(int fd,
     ret =CDROM_GetStatusCode(ioctl(fd, DVD_AUTH, &auth_info));
     *sid_out = auth_info.lsa.agid;
     return ret;
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
     return STATUS_NOT_SUPPORTED;
 #else
     return STATUS_NOT_SUPPORTED;
@@ -1780,7 +1800,7 @@ static NTSTATUS DVD_EndSession(int fd, c
 
     TRACE("\n");
     return CDROM_GetStatusCode(ioctl(fd, DVD_AUTH, &auth_info));
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
     return STATUS_NOT_SUPPORTED;
 #else
     return STATUS_NOT_SUPPORTED;
@@ -1910,7 +1930,7 @@ static NTSTATUS DVD_ReadKey(int fd, PDVD
 	FIXME("Unknown keytype 0x%x\n",key->KeyType);
     }
     return ret;
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
     TRACE("bsd\n");
     return STATUS_NOT_SUPPORTED;
 #else
@@ -1939,6 +1959,9 @@ static NTSTATUS DVD_GetRegion(int dev, P
 static NTSTATUS DVD_ReadStructure(int dev, const DVD_READ_STRUCTURE *structure, PDVD_LAYER_DESCRIPTOR layer)
 {
 #ifdef DVD_READ_STRUCT
+#ifdef __MirBSD__
+    union
+#endif
     dvd_struct s;
 
     if (structure->BlockByteOffset.u.HighPart || structure->BlockByteOffset.u.LowPart)
