#!@SHELL@
# $MirOS: ports/mailnews/pine/files/pine.smime,v 1.6 2006/09/20 22:24:50 tg Exp $
#-
# Copyright (c) 2003, 2004, 2008
#	Thorsten "mirabilos" Glaser <tg@mirbsd.de>
#
# Provided that these terms and disclaimer and all copyright notices
# are retained or reproduced in an accompanying document, permission
# is granted to deal in this work without restriction, including un-
# limited rights to use, publicly perform, distribute, sell, modify,
# merge, give away, or sublicence.
#
# This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
# the utmost extent permitted by applicable law, neither express nor
# implied; without malicious intent or gross negligence. In no event
# may a licensor, author or contributor be held liable for indirect,
# direct, other damage, loss, or other issues arising in any way out
# of dealing in the work, even if advised of the possibility of such
# damage or existence of a defect, except proven that it results out
# of said person's immediate fault when using the work as intended.
#-
# S/MIME and PGP/MIME support for pine, main module
#
# Documentation:
# Set pine up so it uses this script as its mail submission agent
# (use sendmail-path=@PREFIX@/bin/pine.smime option in .pinerc)
# You can pass additional args to sendmail by setenv SMIMEARGS.
# Start pine via the pine.smime.init script, it will ask you
# for your password you protected your S/MIME key with.
# The key and cert have to reside in ~/.etc/ssh/mime.{key,cer}
# If you want to add e.g. your CA Certificate(s) to the signed
# messages, as other mailers usually do, use ~/.etc/ssh/mime.ca
# Add "X-SMIME: NO" to your pine user-defined headers to ease later use.
# Add "X-PGPMIME: sucks" to your pine user-defined headers to enable PGP/MIME
# for outgoing encrypted mails.
#
# To send a signed mail, press ^R (Rich Headers) in Composer and change
# "X-SMIME: No" to a value not containing "NO" or "OPAQ" (case-insensitive).
# If you choose OPAQ, the clear-signing will be deactivated, i.e.
# the message will only be visible to S/MIME capable clients.
#
# If you receive a S/MIME mail, do the following manually, because
# there is no way to automate it in pine:
# press | (PIPE), set to RAW if not yet set (press ^W), set
# the command to the following and execute:
#  openssl smime -verify
# To decrypt an incoming message, you may use
#  openssl smime -decrypt -certfile ~/.etc/ssh/mime.cer -inkey ~/.etc/ssh/mime.key
# Note: "Verification Successful\n" can be anywhere in the viewer body
#  because it is put to stderr and pine is, err, slightly buggy.
#  So you should use the unverified part of the message, or, for opaquely
#  signed messages, s/Verification Successful\n// after saving.
#
# Support for encrypting outgoing messages is not planned until there is
# some way to retrieve information from within this script.
# Probably it could be done by a header.
#
# If something goes wrong, you'll find a file called ~/smime.log

#XXX not for production use yet (requires gpgml script for encrypting
#XXX inside mailer, instead of full MIME parsing)
#XXX missing: keyid selector
#XXX use: “gpg -k --with-colons --fixed-list-mode --with-fingerprint 「x」”

R=$(mktemp /tmp/pine.smime.XXXXXXXXXX) || exit 1
S=$(mktemp /tmp/pine.smime.XXXXXXXXXX) || { rm -f $R; exit 1; }
T=$(mktemp /tmp/pine.smime.XXXXXXXXXX) || { rm -f $R $S; exit 1; }
trap 'rm -f $R $S $T ; exit 0' 0
trap 'rm -f $R $S $T ; exit 1' 1 2 3 5 13 15

MACH="$(uname -mslr 2>&-)" || MACH="$(uname -msr)"

echo "Received: by S/MIME Plugin for ${MACH}; $(date)" >$R
tr -d '' >$S
ed -s $S <<-EOF
	1,/^$/-1W $R
	1,/^$/d
	wq
EOF

grep -Ei '(^Content-)|(^MIME)' $R >$T || \
	echo 'Content-Type: text/plain; charset=iso-8859-1' >$T

echo "" >>$T
cat $S >>$T
Q=NO
QP=""
grep -i '^X-SMIME:' $R >$S && Q=OK
grep -i OPAQ $S >/dev/null && QP="-nodetach"
grep -i NO $S >/dev/null && Q=NO
grep -Eiv '(^Content-)|(^MIME)|(^X-SMIME:)' $R >$S

cat $T >$R
[[ -n $SMIMEPWD ]] && QP="$QP -passin file:$SMIMEPWD"
if [[ $Q = OK && -e ~/.etc/ssh/mime.key ]]; then
	openssl smime -sign -rc2-128 -signer ~/.etc/ssh/mime.cer -in $T \
	  -certfile ~/.etc/ssh/mime.ca -inkey ~/.etc/ssh/mime.key $QP -out $R \
	  2>~/smime.log || Q=FAILED
	[[ $Q = FAILED ]] || rm -f ~/smime.log
	echo "X-Autoconverted: to S/MIME-signed  status $Q" >>$S
fi
unset QP
cat $S $R >$T

grep -qi '^X-PGPMIME:.*sucks' $T && if grep -q \
    '^-----BEGIN PGP MESSAGE-----' $T; then
	cte=
	inhdr=1
	inpgp=0
	tr -d '' <$T |&
	print -n >$R
	while IFS= read -pr line; do
		if (( inpgp == 2 )); then
			print -r -- "$line" >>$R
			continue
		fi
		typeset -l lline="$line"

		if (( inhdr )); then
			if [[ $lline = @(content-transfer-encoding:)* ]]; then
				cte=$line
				continue
			fi
			[[ $lline = @(content-type:)* ]] && continue
			if [[ -z $line ]]; then
				inhdr=0
				print 'Content-Type: multipart/encrypted;' \
				    'protocol="application/pgp-encrypted";' \
				    'boundary="PGP/MIME_sucks"'
				print Content-Disposition: inline
				inpgp=1
			fi
		fi
		(( inpgp )) && if [[ $lline = \
		    @(-----begin pgp message-----)* ]]; then
			print PGP_MIME_sucks_hard
			print
			print -- --PGP/MIME_sucks
			print Content-Type: application/pgp-encrypted
			print Content-Disposition: attachment
			print
			print Version: 1
			print
			print -- --PGP/MIME_sucks
			print Content-Type: application/octet-stream
			print 'Content-Disposition: inline;' \
			    'filename="msg.asc"'
			[[ -n $cte ]] && print -r $cte
			print
		fi
		print -r -- "$line"
		(( inpgp )) && if [[ $lline = \
		    @(-----end pgp message-----)* ]]; then
			print
			print -- --PGP/MIME_sucks--
			print
			inpgp=2
		fi
	done >$S
	sed -e '/^PGP_MIME_sucks_hard/r'$R -e //d $S >$T
fi

sendmail ${SMIMEARGS} -oem -oi -t <$T
