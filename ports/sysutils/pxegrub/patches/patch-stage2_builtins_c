$MirOS: ports/sysutils/pxegrub/patches/patch-stage2_builtins_c,v 1.1.7.1 2005/03/18 15:52:19 tg Exp $
--- stage2/builtins.c.orig	Sun Jun 20 13:32:42 2004
+++ stage2/builtins.c	Wed Mar 22 13:00:37 2006
@@ -18,6 +18,14 @@
  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
  */
 
+/* Fucking GNU people use nested functions.  */
+void __enable_execute_stack(void *);
+
+void
+__enable_execute_stack(void *x)
+{
+}
+
 /* Include stdio.h before shared.h, because we can't define
    WITHOUT_LIBC_STUBS here.  */
 #ifdef GRUB_UTIL
@@ -81,6 +89,7 @@ static unsigned short bios_drive_map[DRI
 /* Prototypes for allowing straightfoward calling of builtins functions
    inside other functions.  */
 static int configfile_func (char *arg, int flags);
+void openbsd_boot(kernel_t, int, char *);
 
 /* Initialize the data for builtins.  */
 void
@@ -254,6 +263,10 @@ boot_func (char *arg, int flags)
       bsd_boot (kernel_type, bootdev, (char *) mbi.cmdline);
       break;
 
+    case KERNEL_TYPE_OPENBSD:
+      openbsd_boot (kernel_type, bootdev, (char *) mbi.cmdline);
+      break;
+
     case KERNEL_TYPE_LINUX:
       /* Linux */
       linux_boot ();
@@ -2341,9 +2354,11 @@ kernel_func (char *arg, int flags)
 	  else if (grub_memcmp (arg, "freebsd", 7) == 0)
 	    suggested_type = KERNEL_TYPE_FREEBSD;
 	  else if (grub_memcmp (arg, "openbsd", 7) == 0)
-	    /* XXX: For now, OpenBSD is identical to NetBSD, from GRUB's
-	       point of view.  */
-	    suggested_type = KERNEL_TYPE_NETBSD;
+	    suggested_type = KERNEL_TYPE_OPENBSD;
+	  else if (grub_memcmp (arg, "ekkobsd", 7) == 0)
+	    suggested_type = KERNEL_TYPE_OPENBSD;
+	  else if (grub_memcmp (arg, "mirbsd", 7) == 0)
+	    suggested_type = KERNEL_TYPE_OPENBSD;
 	  else if (grub_memcmp (arg, "linux", 5) == 0)
 	    suggested_type = KERNEL_TYPE_LINUX;
 	  else if (grub_memcmp (arg, "biglinux", 8) == 0)
@@ -3365,6 +3380,8 @@ static struct builtin builtin_savedefaul
   " `fallback' is used, next fallback entry is saved."
 };
 
+long boot_serial_unit = 0;
+long boot_serial_speed = 0;
 
 #ifdef SUPPORT_SERIAL
 /* serial */
@@ -3373,6 +3390,7 @@ serial_func (char *arg, int flags)
 {
   unsigned short port = serial_hw_get_port (0);
   unsigned int speed = 9600;
+  int unit = 0;
   int word_len = UART_8BITS_WORD;
   int parity = UART_NO_PARITY;
   int stop_bit_len = UART_1_STOP_BIT;
@@ -3385,7 +3403,6 @@ serial_func (char *arg, int flags)
       if (grub_memcmp (arg, "--unit=", sizeof ("--unit=") - 1) == 0)
 	{
 	  char *p = arg + sizeof ("--unit=") - 1;
-	  int unit;
 	  
 	  if (! safe_parse_maxint (&p, &unit))
 	    return 1;
@@ -3499,6 +3516,8 @@ serial_func (char *arg, int flags)
       return 1;
     }
   
+  boot_serial_unit = unit;
+  boot_serial_speed = speed;
   return 0;
 }
 
