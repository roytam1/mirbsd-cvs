$MirOS: ports/security/ekeyd/patches/patch-daemon_krnlop_c,v 1.1 2009/11/14 21:45:31 tg Exp $
--- daemon/krnlop.c.orig	Fri Nov  6 10:19:55 2009
+++ daemon/krnlop.c	Sat Nov 14 21:58:04 2009
@@ -24,10 +24,11 @@
 #include <sys/ioctl.h>
 #endif
 
-#ifdef EKEY_OS_OPENBSD
+#if defined(EKEY_OS_OPENBSD) || defined(EKEY_OS_MIRBSD)
 #include <sys/ioctl.h>
 #include <dev/rndvar.h>
 #include <dev/rndioctl.h>
+#include <errno.h>
 #endif
 
 #include "stream.h"
@@ -35,19 +36,20 @@
 
 static int krnlop_bpb;
 
-#if defined(EKEY_OS_LINUX) || defined(EKEY_OS_OPENBSD)
+/*-
+ * Disabled for OpenBSD and MirBSD, because at least MirBSD doesn't
+ * implement RNDADDENTROPY (chances are OpenBSD doesn't, either).
+ * Furthermore, struct rand_pool_info contains the entropy directly,
+ * whereas struct rnd_pool_info contains a pointer to the entropy
+ * buffer (so the code below cannot work on OpenBSD/MirBSD anyway).
+ */
+#ifdef EKEY_OS_LINUX
 ssize_t
 krnl_write(int fd, const void *buf, size_t count)
 {
-#ifdef EKEY_OS_LINUX
     struct rand_pool_info *rndpool;
     rndpool = alloca(sizeof(struct rand_pool_info) + count);
-#endif
-#ifdef EKEY_OS_OPENBSD
-    struct rnd_pool_info *rndpool;
-    rndpool = alloca(sizeof(struct rnd_pool_info) + count);
-#endif
-    
+
     rndpool->entropy_count = count * krnlop_bpb;
     rndpool->buf_size = count;
     memcpy(rndpool->buf, buf, count);
@@ -58,12 +60,40 @@ krnl_write(int fd, const void *buf, size
     }
     return count;
 }
+#elif defined(EKEY_OS_OPENBSD) || defined(EKEY_OS_MIRBSD)
+ssize_t
+krnl_write(int fd, const void *buf, size_t count)
+{
+    size_t ofs = 0;
+    ssize_t n;
+    unsigned int u;
+
+    while (ofs < count) {
+        n = write(fd, (const char *)buf + ofs, count - ofs);
+        if (n == -1) {
+            if (errno == EINTR)
+                continue;
+            perror("write");
+            return -1;
+        }
+        ofs += n;
+    }
+
+    /* from MirOS: src/libexec/cprng/cprng.c,v 1.14 */
+    u = count * krnlop_bpb;
+    if (ioctl(fd, RNDADDTOENTCNT, &u) == -1) {
+        perror("ioctl");
+        return -1;
+    }
+    return count;
+}
 #endif
 
 estream_state_t *estream_krnl_open(const char *path, int bpb)
 {
     estream_state_t *stream_state = NULL;
-#if defined(EKEY_OS_LINUX) || defined(EKEY_OS_OPENBSD)
+#if defined(EKEY_OS_LINUX) || defined(EKEY_OS_OPENBSD) || \
+  defined(EKEY_OS_MIRBSD)
     int fd;
 
     fd = open(path, O_RDWR | O_NOCTTY);
