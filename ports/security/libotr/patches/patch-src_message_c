$MirOS$
--- src/message.c.orig	Thu Jul 26 16:32:53 2007
+++ src/message.c	Thu Apr  3 21:00:42 2008
@@ -132,7 +132,8 @@ gcry_error_t otrl_message_sending(OtrlUs
 		    char *primary = malloc(strlen(format) +
 			    strlen(recipient) - 1);
 		    if (primary) {
-			sprintf(primary, format, recipient);
+			snprintf(primary, strlen(format) + strlen(recipient) - 1,
+				 format, recipient);
 			ops->notify(opdata, OTRL_NOTIFY_WARNING, accountname,
 				protocol, recipient, "OTR Policy Violation",
 				primary,
@@ -148,7 +149,7 @@ gcry_error_t otrl_message_sending(OtrlUs
 		if (context->lastmessage) {
 		    char *bettermsg = otrl_proto_default_query_msg(accountname,
 			    policy);
-		    strcpy(context->lastmessage, message);
+		    strlcpy(context->lastmessage, message, strlen(message) + 1);
 		    context->lastsent = time(NULL);
 		    context->may_retransmit = 2;
 		    if (bettermsg) {
@@ -169,18 +170,19 @@ gcry_error_t otrl_message_sending(OtrlUs
 			strlen(OTRL_MESSAGE_TAG_V1) : 0;
 		    size_t v2taglen = (policy & OTRL_POLICY_ALLOW_V2) ?
 			strlen(OTRL_MESSAGE_TAG_V2) : 0;
-		    char *taggedmsg = malloc(msglen + basetaglen + v1taglen
-			    +v2taglen + 1);
+		    size_t taggedmsglen = msglen + basetaglen + v1taglen +
+					  v2taglen + 1;
+		    char *taggedmsg = malloc(taggedmsglen);
 		    if (taggedmsg) {
-			strcpy(taggedmsg, message);
-			strcpy(taggedmsg + msglen, OTRL_MESSAGE_TAG_BASE);
+			strlcpy(taggedmsg, message, taggedmsglen);
+			strlcat(taggedmsg, OTRL_MESSAGE_TAG_BASE, taggedmsglen);
 			if (v1taglen) {
-			    strcpy(taggedmsg + msglen + basetaglen,
-				    OTRL_MESSAGE_TAG_V1);
+			    strlcat(taggedmsg,
+				    OTRL_MESSAGE_TAG_V1, taggedmsglen);
 			}
 			if (v2taglen) {
-			    strcpy(taggedmsg + msglen + basetaglen + v1taglen,
-				    OTRL_MESSAGE_TAG_V2);
+			    strlcat(taggedmsg,
+				    OTRL_MESSAGE_TAG_V2, taggedmsglen);
 			}
 			*messagep = taggedmsg;
 			if (context) {
@@ -229,7 +231,8 @@ gcry_error_t otrl_message_sending(OtrlUs
 		    "connection to you";
 		char *primary = malloc(strlen(fmt) + strlen(recipient) - 1);
 		if (primary) {
-		    sprintf(primary, fmt, recipient);
+		    snprintf(primary, strlen(fmt) + strlen(recipient) - 1,
+			     fmt, recipient);
 		    ops->notify(opdata, OTRL_NOTIFY_ERROR, 
 			    accountname, protocol, recipient,
 			    "Private connection closed", primary,
@@ -276,7 +279,7 @@ static gcry_error_t send_or_error_auth(c
 	}
 	buf = malloc(strlen(buf_format) + strlen(strerr) - 1);
 	if (buf) {
-	    sprintf(buf, buf_format, strerr);
+	    snprintf(buf, strlen(buf_format) + strlen(strerr) - 1, buf_format, strerr);
 	}
 	if ((!(ops->display_otr_message) ||
 		ops->display_otr_message(opdata, context->accountname,
@@ -474,7 +477,8 @@ static void maybe_resend(EncrData *edata
 		buf = malloc(strlen(format) +
 			strlen(edata->context->username) - 1);
 		if (buf) {
-		    sprintf(buf, format, edata->context->username);
+		    snprintf(buf, strlen(format) + strlen(edata->context->username) - 1,
+			     format, edata->context->username);
 		    if (edata->ops->display_otr_message) {
 			if (!edata->ops->display_otr_message(
 				    edata->opdata, edata->context->accountname,
@@ -917,7 +921,8 @@ int otrl_message_receiving(OtrlUserState
 		    buf = malloc(strlen(format) + strlen(context->username)
 			    - 1);  /* Remove "%s", add username + '\0' */
 		    if (buf) {
-			sprintf(buf, format, context->username);
+			snprintf(buf, strlen(format) + strlen(context->username) - 1,
+				 format, context->username);
 			if (ops->display_otr_message) {
 			    if (!ops->display_otr_message(opdata, accountname,
 					protocol, sender, buf)) {
@@ -944,7 +949,9 @@ int otrl_message_receiving(OtrlUserState
 				displayaccountname : context->accountname)
 			    - 1);
 		    if (buf) {
-			sprintf(buf, format, displayaccountname ?
+			snprintf(buf, strlen(format) + strlen(displayaccountname ?
+				 displayaccountname : context->accountname) - 1,
+				format, displayaccountname ?
 				displayaccountname : context->accountname);
 			if (ops->inject_message) {
 			    ops->inject_message(opdata, accountname, protocol,
@@ -974,7 +981,7 @@ int otrl_message_receiving(OtrlUserState
 			    "We received a malformed data message from %s.";
 			buf = malloc(strlen(format) + strlen(sender) - 1);
 			if (buf) {
-			    sprintf(buf, format, sender);
+			    snprintf(buf, strlen(format) + strlen(sender) - 1, format, sender);
 			    if ((!(ops->display_otr_message) ||
 				    ops->display_otr_message(opdata,
 					accountname, protocol, sender,
@@ -1078,7 +1085,7 @@ int otrl_message_receiving(OtrlUserState
 			format = "Heartbeat received from %s.\n";
 			buf = malloc(strlen(format) + strlen(sender) - 1);
 			if (buf) {
-			    sprintf(buf, format, sender);
+			    snprintf(buf, strlen(format) + strlen(sender) - 1, format, sender);
 			    if (ops->log_message) {
 				ops->log_message(opdata, buf);
 			    }
@@ -1113,7 +1120,7 @@ int otrl_message_receiving(OtrlUserState
 				buf = malloc(strlen(format) + strlen(sender)
 					- 1);
 				if (buf) {
-				    sprintf(buf, format, sender);
+				    snprintf(buf, strlen(format) + strlen(sender) - 1, format, sender);
 				    if (ops->log_message) {
 					ops->log_message(opdata, buf);
 				    }
@@ -1241,7 +1248,8 @@ int otrl_message_receiving(OtrlUserState
 			+ strlen(plainmsg) - 3);
 			/* Remove "%s%s", add username + message + '\0' */
 		if (buf) {
-		    sprintf(buf, format, context->username, plainmsg);
+		    snprintf(buf, strlen(format) + strlen(context->username) + strlen(plainmsg) - 3,
+			     format, context->username, plainmsg);
 		    if (ops->display_otr_message) {
 			if (!ops->display_otr_message(opdata, accountname,
 				    protocol, sender, buf)) {
@@ -1269,7 +1277,7 @@ int otrl_message_receiving(OtrlUserState
 		    "from %s.\n";
 		char *buf = malloc(strlen(format) + strlen(sender) - 1);
 		if (buf) {
-		    sprintf(buf, format, sender);
+		    snprintf(buf, strlen(format) + strlen(sender) - 1, format, sender);
 		    ops->log_message(opdata, buf);
 		    free(buf);
 		}
@@ -1351,7 +1359,7 @@ gcry_error_t otrl_message_fragment_and_s
 		/* Copy and return the entire given message. */
 		int l = strlen(message) + 1;
 		*returnFragment = malloc(sizeof(char)*l);
-		strcpy(*returnFragment, message);
+		strlcpy(*returnFragment, message, l);
 	    }
 	}
     }
