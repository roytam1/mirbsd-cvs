$MirOS$
--- egate.c.orig	Fri Jan  2 23:08:12 2004
+++ egate.c	Thu Aug 12 19:42:19 2004
@@ -18,6 +18,12 @@
 #define EGATE_CMD_RESET   0x90
 #define EGATE_CMD_FETCHSTATUS  0xa0
 
+#define EGATE_ATR_MAXSIZE 0x23
+#define EGATE_TIMEOUT 10000
+#define EGATE_DELAY 5000
+
+int egate_ready(struct egate *egate);
+
 #ifdef DEBUG
 /* auxiliary functions */
 void hexdump(const u_int8_t * buffer, int length)
@@ -25,6 +31,8 @@ void hexdump(const u_int8_t * buffer, in
 	char	line[256];
 	int	n, i;
 
+	if(length<1) return;
+
 	for (i = 0; i < length; i++) {
 		if ((i & 0xf) == 0) {
 			snprintf(line, sizeof(line), "%04x:", i);
@@ -46,7 +54,8 @@ int do_usb(usb_dev_handle * dev, int req
 
 	rc = usb_control_msg(dev, requesttype, request, value, index,
 			     bytes, size, timeout);
-	if (rc == -1) {
+	usleep(EGATE_DELAY);
+	if (rc <0) {
 		syslog(LOG_ERR,"usb_control_msg returned %u, error is %s",
 		       rc, usb_strerror());
 	} 
@@ -59,7 +68,7 @@ int egate_probe(struct egate *egate) {
 	struct usb_bus *mybus;
 	struct usb_device *mydev;
 	usb_dev_handle *myhandle;
- 
+
         if (!egate)
             return 0;	
         if (egate->usb) {
@@ -76,39 +85,77 @@ int egate_probe(struct egate *egate) {
 			    }
 		    }
 	    }
-    
+
 	    return 0;
  found:
 	    myhandle=usb_open(mydev);
 	    if (!myhandle)
 	        return 0;
         }
+#if 0
 	rc = do_usb(myhandle, USB_ENDPOINT_IN|USB_TYPE_VENDOR,
-		    EGATE_CMD_FETCHSTATUS,0, 0, &c, 1, 10000);
+		    EGATE_CMD_FETCHSTATUS,0, 0, &c, 1, EGATE_TIMEOUT);
+#else
+       rc=egate_ready(egate);
+#endif
         if (!egate->usb)
 	   usb_close(myhandle);
 	sleep(1);
 	egate->usb = NULL;	
+	syslog(LOG_DEBUG,"egate_probe successful: %d",rc);
         if (rc == 1) return 1;
         return 0;
 }
 
-#define EGATE_POLL(egate, wanted) \
-        do { \
-	do { \
-             int pollrc; \
-     pollrc = do_usb(egate->usb, USB_ENDPOINT_IN|USB_TYPE_VENDOR, \
-		     EGATE_CMD_FETCHSTATUS, 0, 0, \
-		     &egate->stat, 1, 10000); \
-     if (pollrc != 1) \
-	   return 0; \
-     } while ((egate->stat & EGATE_STAT_MASK) == EGATE_STAT_BUSY && (usleep(100) || 1)); \
-     if (wanted != -1 && (egate->stat  & EGATE_STAT_MASK) != wanted) {\
-         syslog(LOG_NOTICE,"Expected state 0x%x, got state 0x%x", wanted, egate->stat); \
-         return 0;\
-     } \
-     } while(0);
+int egate_ready(struct egate *egate)
+{
+	char buffer[8];
+	int rc;
+	int busy=0;
 
+	while(1)
+	{
+     		rc = do_usb(egate->usb, USB_ENDPOINT_IN|USB_TYPE_VENDOR, 
+		     EGATE_CMD_FETCHSTATUS, 0, 0, 
+		     buffer, 1, EGATE_TIMEOUT);
+
+
+		if(rc<1)
+		{
+			syslog(LOG_DEBUG,"%s: egate fetch status failed:%s",__FILE__,
+			usb_strerror());
+			return 0;
+		}
+
+		egate->stat=buffer[0];
+
+		if(rc!=1)
+		{
+			syslog(LOG_DEBUG,"%s: egate fetch status invalid length: %d",rc);
+			return 0;
+		}
+	
+		switch(buffer[0] & EGATE_STAT_MASK)
+		{
+			case EGATE_STAT_CMND:
+			case EGATE_STAT_RESP:
+			case EGATE_STAT_DATA:
+				syslog(LOG_DEBUG,"%s: egate ready",__FILE__);
+				return 1;
+
+			case EGATE_STAT_BUSY:
+			case 0x41:
+				if(!busy) syslog(LOG_DEBUG,"%s: egate busy",__FILE__);
+				busy=1;
+				break;
+			default:
+				syslog(LOG_DEBUG,"%s: unknown status code %d",(int) buffer[0]);
+		}
+	}
+
+	return 0;
+}
+
 int power_up_egate(struct egate *egate)
 {
 	int rc, len;
@@ -142,20 +189,29 @@ int power_up_egate(struct egate *egate)
 		return 0;
 	}
 
+#if 0
+	usb_reset(egate->usb);
+	usleep(10000); 
+#endif
+
 	/* reset */
 	rc = do_usb(egate->usb, USB_ENDPOINT_OUT|USB_TYPE_VENDOR,
-		    EGATE_CMD_RESET, 0, 0, buffer, 0, 10000);
+		    EGATE_CMD_RESET, 0, 0, buffer, 0, EGATE_TIMEOUT);
 	if ((rc == -1)) {
+		syslog(LOG_DEBUG,"%s: reset failed: %s", __FILE__,usb_strerror());
                 usb_close(egate->usb);
                 egate->usb=NULL;
 		return 0;
 	}
+	syslog(LOG_DEBUG,"%s: reset done",__FILE__);
 
-	EGATE_POLL(egate, EGATE_STAT_CMND);
+	egate_ready(egate);
+
 	/* request atr */
 	rc = do_usb(egate->usb, USB_ENDPOINT_IN|USB_TYPE_VENDOR, EGATE_CMD_ATR, 
-		    0, 0, buffer, 255, 10000);
+		    0, 0, buffer, EGATE_ATR_MAXSIZE, EGATE_TIMEOUT);
 	if ((rc < 2)) {
+	     syslog(LOG_DEBUG,"%s: ATR command failed: %s",__FILE__,usb_strerror());
 	     /* failed, we should get an atr; minimum atr is TS and T0 */
              usb_close(egate->usb);
              egate->usb=NULL;
@@ -177,12 +233,12 @@ int power_up_egate(struct egate *egate)
 }
 static int egate_condreset(struct egate *egate, int force) {
 
-        EGATE_POLL(egate, -1);
-	if (!force && (egate->stat & EGATE_STAT_MASK) == EGATE_STAT_CMND)
+        egate_ready(egate);
+	if (!force && egate_ready(egate))
 		return 0;
 	do_usb(egate->usb, USB_ENDPOINT_OUT|USB_TYPE_VENDOR,
-		    EGATE_CMD_RESET, 0, 0, 0, 0, 10000);
-        EGATE_POLL(egate, -1);
+		    EGATE_CMD_RESET, 0, 0, 0, 0, EGATE_TIMEOUT);
+        egate_ready(egate);
 	return 0;
 }
 
@@ -197,6 +253,7 @@ int power_down_egate(struct egate *egate
         memset(egate->atr, 0, 255);
 	return 0;
 }
+
 int usb_transfer(struct egate *egate, u_int8_t * buffer_out,
 		 u_int8_t * buffer_in, int len_out, int *len_in)
 {
@@ -208,7 +265,7 @@ int usb_transfer(struct egate *egate, u_
 		syslog(LOG_NOTICE,"token unavailable!");
 		return 0;
 	}
-	EGATE_POLL(egate, EGATE_STAT_CMND);
+	egate_ready(egate);
         if (len_out < 5) {
              syslog(LOG_NOTICE,"Invalid command");
 	     return 0;
@@ -220,8 +277,11 @@ int usb_transfer(struct egate *egate, u_
             if (write_bytes == buffer_out[4] + 1)
                    read_bytes=buffer_out[len_out-1];
 	    else if (len_out != buffer_out[4])
-                    syslog(LOG_ERR,
-                           "Buffer length probably incorrect -- help!");
+                    syslog(LOG_DEBUG,
+                           "Buffer length probably incorrect -- help!"
+			   " (%d != %d)",len_out,buffer_out[4]);
+		    /* isn't this the "variable length response" case? */
+		   read_bytes=255;
         } else { /* no Lc, so P3 is Le */
 	    read_bytes=buffer_out[len_out-1];
             if (read_bytes == 0)
@@ -232,17 +292,18 @@ int usb_transfer(struct egate *egate, u_
         syslog(LOG_DEBUG,"Sending command");
         hexdump(buffer_out, 5);
 #endif
-        
+
 	/* send via usb */
-	rc = do_usb(egate->usb, USB_TYPE_VENDOR, EGATE_CMD_SENDCMD, 
-		    0, 0, buffer_out, 5, 10000);
+	rc = do_usb(egate->usb, USB_ENDPOINT_OUT|USB_TYPE_VENDOR, EGATE_CMD_SENDCMD, 
+		    0, 0, buffer_out, 5, EGATE_TIMEOUT);
 	if (rc != 5) {
 		/* not the whole buffer was transmitted ! */
+		syslog(LOG_DEBUG,"error sending command");
                 egate_condreset(egate, 0);
 		return 0;
 	}
-	EGATE_POLL(egate, -1);
-        
+	egate_ready(egate);
+
         if (write_bytes > 0) {
              if ((egate->stat & EGATE_STAT_MASK) != EGATE_STAT_DATA) {
 #ifdef DEBUG
@@ -250,39 +311,38 @@ int usb_transfer(struct egate *egate, u_
 #endif
              } else {
 #ifdef DEBUG
-                  syslog(LOG_DEBUG,"Sending data");
+                  syslog(LOG_DEBUG,"Sending data (%d)",write_bytes);
                   hexdump(&buffer_out[5], write_bytes);
 #endif
-            
+
                    rc = do_usb(egate->usb, USB_ENDPOINT_OUT|USB_TYPE_VENDOR, 
 			      EGATE_CMD_WRITE, 0, 0, &buffer_out[5],
-                              write_bytes, 10000);
+                              write_bytes, EGATE_TIMEOUT);
                   if (rc != write_bytes) {
                        /* not the whole buffer was transmitted ! */
                        syslog(LOG_NOTICE,"Incomplete data-out transfer");
 		       egate_condreset(egate, 0);
                        return 0;
                   }
-		  EGATE_POLL(egate, -1);
+		  egate_ready(egate);
              }
         }
-        
-        
+
         if ((egate->stat & EGATE_STAT_MASK)== EGATE_STAT_DATA) {
 #ifdef DEBUG
              	syslog(LOG_DEBUG,"Reading %d requested bytes of response data", read_bytes);
 #endif
-             
+
             	/* receive answer via usb */
   	    	rc = do_usb(egate->usb, USB_ENDPOINT_IN|USB_TYPE_VENDOR, 
 				EGATE_CMD_READ, 0, 0, buffer_in,
-		  read_bytes, 10000);
+		  read_bytes, EGATE_TIMEOUT);
                 if (rc != read_bytes) {
                      syslog(LOG_NOTICE,"Incomplete data-in transfer");
 		     egate_condreset(egate, 0);
                      return 0;
                 }
-                EGATE_POLL(egate, EGATE_STAT_RESP);
+                egate_ready(egate);
 	    } else {
 	     read_bytes=0;
 	     if ((egate->stat & EGATE_STAT_MASK) != EGATE_STAT_RESP) {
@@ -291,18 +351,18 @@ int usb_transfer(struct egate *egate, u_
 	     return 0;
 	}
 	}
-        
+
 	/* receive answer via usb */
 	rc = do_usb(egate->usb, USB_ENDPOINT_IN|USB_TYPE_VENDOR, 
-		    EGATE_CMD_READ, 0, 0, &buffer_in[read_bytes], 2, 10000);
+		    EGATE_CMD_READ, 0, 0, &buffer_in[read_bytes], 2, EGATE_TIMEOUT);
 	if (rc < 2) {
-             
+
              syslog(LOG_NOTICE,"Incomplete response-in transfer");
              egate_condreset(egate, 0);
 		/* failed. */
 	     return 0;
 	}
-        
+
 #ifdef DEBUG
         syslog(LOG_DEBUG,"%s %d %s: received %d, hexdump follows",
 	 		__FILE__, __LINE__, __PRETTY_FUNCTION__, read_bytes +  2);
