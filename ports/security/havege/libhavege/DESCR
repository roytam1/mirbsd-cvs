Overview
========

HAVEGE (HArdware Volatile Entropy Gathering and Expansion) is a user-
level software unpredictable random number generator for general-purpose
computers that exploits these modifications of the internal volatile
hardware states as a source of uncertainty. During an initialization
phase, the hardware clock cycle counter of the processor is used to ga-
ther part of this entropy: tens of thousands of unpredictable bits can
be gathered per operating system call in average.

HAVEGE combines on-the-fly hardware volatile entropy gathering with
pseudo-random number generation. The internal state of HAVEGE includes
thousands of internal volatile hardware states and is merely unmonito-
rable. Therefore HAVEGE features a very high security level. HAVEGE can
reach an unprecedented throughput for a software unpredictable random
number generator: several hundreds of megabits per second on current
workstations and PCs.

The throughput of HAVEGE favorably competes with usual pseudo-random
number generators such as rand() or random(). While HAVEGE was initially
designed for cryptology-like application, this high throughput makes
HAVEGE usable for all application domains demanding for high performance
and high quality random number generators, e.g. Monte Carlo simulations.

Unpredictable Randomness Definition
===================================

Let's consider randomness as the outcome of an experiment, two extremal
cases are of interest.

The first is the truly random number generator, which is based on a non-
deterministic process. In that case, without condition, you cannot guess
the outcome before it actually happens.

The second extreme case is pseudo-randomness. The process takes as input
a (short) sequence of numbers (seed). It is called a pseudo-random num-
ber generator if, by considering only its outputs, it is computationally
infeasible to distinguish it from a truly random number generator. By
"computationally infeasible", we mean non polynomial time and memory and
by "distinguish", we mean that the probability to take the good decision
is significantly greater than 1/2.

Random bits produced by peripherals events (e.g. by Entropy Gathering
Daemons), or by HAVEGE, are not, strictly speaking, truly random bits
nor pseudo-random bits. They are not truly random because the process
which produces them is deterministic. One could theoretically reproduce
the sequence if he/she was able to reproduce all the past events on the
machine. They are not pseudo-random either since there is no (short)
seed which would allow an exact reproduction of the random sequence.

The randomness results instead from an inability to control or predict
with sufficient accuracy the events involved in the generation process.
For the sake of convenience, we will speak in that case of unpredictable
randomness.

Motivations
===========

An unpredictable random number generator is a practical approximation of
a truly random number generator. Most previous software algorithms for
generating unpredictable random number sequences rely on entropy gathe-
ring from measuring unpredictable external events. The throughput of
these generators are in the range of 10-100 bits per second. This limits
them to being used as seeds for pseudo-random generators. Such unpredic-
table random number generators are needed for cryptography.

Modern superscalar processors feature a large number of hardware mecha-
nisms which aim at improving performance: caches, branch predictors,
TLBs, long pipelines, instruction level parallelism, ... The state of
these components is not architectural (i.e. the result of an ordinary
application does not depend on it), it is also volatile and cannot be
directly monitored by the user. On the other hand, every invocation of
the operating system modifies thousands of these binary volatile states.
