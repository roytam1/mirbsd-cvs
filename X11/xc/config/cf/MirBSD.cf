XCOMM platform:	$MirOS: X11/xc/config/cf/MirBSD.cf,v 1.10 2006/04/11 01:25:09 tg Exp $
XCOMM platform:	$OpenBSD: OpenBSD.cf,v 1.140 2004/10/10 14:47:28 matthieu Exp $
XCOMM platform:	$XFree86: xc/config/cf/OpenBSD.cf,v 3.79 2003/01/12 17:03:23 herrb Exp $

#ifndef	OSMajorVersion
#define	OSMajorVersion		DefaultOSMajorVersion
#endif
#ifndef	OSMinorVersion
#define	OSMinorVersion		DefaultOSMinorVersion
#endif
#ifndef	OSTeenyVersion
#define	OSTeenyVersion		DefaultOSTeenyVersion
#endif

#define	XFree86CustomVersion	"for MirOS BSD"
#undef	MirBSDArchitecture

#ifdef	i386Architecture
#define	MirBSDArchitecture	i386
#endif

#ifdef	SparcArchitecture
#define	MirBSDArchitecture	sparc
#endif

#ifndef	MirBSDArchitecture
#error	Unknown architecture!
#endif

/* UseElfFormat defaults to YES if __ELF__ set */
#ifndef	UseElfFormat
# ifdef __ELF__
#  undef __ELF__		/* other imake files shouldn't care */
#  define UseElfFormat		YES
# else
#  define UseElfFormat		NO
# endif
#endif

#ifndef	OSBinaryType
# if UseElfFormat
#  define OSBinaryType		[ELF]
# else
#  define OSBinaryType		/**/
# endif
#endif

#ifndef	OSVendor
#define	OSVendor		/**/
#endif

#ifndef	OSName
#define	OSName			DefaultOSName OSBinaryType
#endif

XCOMM operating system:  OSName (OSMajorVersion./**/OSMinorVersion./**/OSTeenyVersion)

#ifdef	Ports

#define	BinDir			${LOCALBASE}/bin
#define	LibDir			${LOCALBASE}/lib/X11
#define	UsrLibDir		${LOCALBASE}/lib
#define	ManDirectoryRoot	${LOCALBASE}/man
#define	LdPreLib		-L/usr/X11R6/lib -L${LOCALBASE}/lib
#define	XpmLibDir		/usr/X11R6/lib
#define	XpmIncDir		/usr/X11R6/include
#define	ConfigDir		/usr/X11R6/lib/X11/config
#define	IncRoot			${LOCALBASE}/include
#define	TopXInclude		-I/usr/X11R6/include
#define	ImakeCmd		imake -DPorts
#define	DocDir			${LOCALBASE}/share/doc
#define	BuildHtmlManPages	NO

#endif

/*
 * C library features
 */
#define	HasPoll			YES
#define	HasNdbm         	YES
#define	HasPutenv       	YES
#define	HasSnprintf		YES
#define	HasAsprintf		YES
#define	HasStrlcat		YES
#define	HasBSD44Sockets 	YES
#define	Malloc0ReturnsNull	NO
#define	SetTtyGroup     	YES
#define	DBMLibrary		/**/
#define	HasLibCrypt		NO
#define	HasShm          	YES
#define	HasWChar32		YES
#define	HasMkstemp		YES
#define	HasSetProcTitle		YES
#define	HasZlib			YES
#define	HasLibpng		YES
#define	HasExpat		YES
#define	HasKrbIV		NO
#define	HasKrb5			NO
#define	HasUsableFileMmap	YES
#define	HasShadowPasswd		NO
#define IPv6SocketsAlsoIPv4	NO

#define HasArc4Random		YES

#define	HasNCurses		YES
#define	NCursesLibName		-lcurses
#undef	TermcapLibrary
#define	TermcapLibrary		-lcurses

#define	HasVarRun		YES
#define	HasVarDb		YES
#define	VarLibDir		VarDbDirectory

#define	InstallXloadSetGID	NO

#define	HasIssetugid		YES
#define	HasMktemp		YES
#define	HasGetIfAddrs		YES
#define	HasSetUserContext	YES
#define	HasBSDAuth		YES
#define	HasGetpeereid		YES
#define	HasApmKqueue		YES
#define	HasLibUsbHid		YES
#define	UsbHidLib 		-lusbhid

/*
 * Compiler Features
 */
#define	GccUsesGas		YES
#define	UseGas			YES
#define	GnuCpp			YES

#ifndef	HasGccStackProtector
# ifdef __SSP__
#define	HasGccStackProtector	YES
# else
#define	HasGccStackProtector	NO
# endif
#endif

#define	UseGnuMalloc		NO

#define	NeedConstPrototypes	YES
#define	NeedFunctionPrototypes	YES
#define	NeedNestedPrototypes	YES
#define	NeedVarargsPrototypes	YES
#define	NeedWidePrototypes	NO

#define	MkdirHierCmd		mkdir -p

#ifndef	CppCmd
#define	CppCmd          	/usr/bin/cpp
#endif
#define	StandardCppOptions	-traditional
#define	StandardCppDefines	$(CPPFLAGS)
#define	PreProcessCmd   	CppCmd
#define	PreIncDir		DefaultGccIncludeDir

#define	ModuleCcCmd		${CC}

#ifndef AsCmd
#define AsCmd			${CC} -c -x assembler
#endif

#define	HasCplusplus		YES
#define	CplusplusCmd		c++ -static-libgcc

#if defined(UseInstalled)
#  define DefaultCCOptions	$(COPTS)
#else
#  ifdef  PpcArchitecture
#    define DefaultCCOptions	-fsigned-char GccWarningOptions
#  else
#    define DefaultCCOptions 	GccWarningOptions
#  endif
#endif

#define	GccGasOption 		-DGCCUSESGAS
#if UseElfFormat
# define AsmDefines		-DUSE_GAS
#else
# define AsmDefines		-DUSE_GAS -D__AOUT__
#endif

#define	XawI18nDefines		-DUSE_XWCHAR_STRING -DUSE_XMBTOWC

#define	AdmDir			/var/log

#define	HasFlex			YES
#define	DontRebuildGperfOutput	YES

#ifndef UseRpath
#define UseRpath		UseElfFormat
#endif

/*
 * Make & install Features
 */

#define	HasBsdMake		YES

#define	StripInstalledPrograms	YES
#define	BuildCIDFonts		NO
#define	BuildCyrillicFonts	YES
#define	BuildBethMarduthoFonts	YES
#define	BuildEthiopicFonts	YES
#define	GzipFontCompression	YES
#define	GzipCmd			gzip -n9
#define	MakeLocalFontDir	YES
#define	DefaultUserPath		/bin:/usr/bin:/usr/local/bin:$(BINDIR)
#define	DefaultSystemPath	/sbin:/usr/sbin:/bin:/usr/bin:$(BINDIR)

#define	InstUidFlags		-m 4555
#undef	InstallCmd
#define	InstallCmd 		/usr/bin/install

#ifndef	ExtraFilesToClean
# define ExtraFilesToClean 	*.core
#endif

#define	BuildRman		NO
#define	BuildHtmlManPages	NO

/*
 * Documentation formatting
 */
#define	NeqnCmd			neqn
#define	NroffCmd		nrcon -e
#define	Nroff8Cmd		nrcon -8
#define	EqnCmd 			eqn -Tps
#define	HasGroff		NO

#ifndef	HasCookieMaker
#  define HasCookieMaker	YES
#  define MkCookieCmd \
	'dd if=/dev/arandom bs=16 count=1 2>/dev/null | hexdump -e \\"%08x\\"'
#endif


/*
 * Man pages need to be formatted when installed, so override the default
 * imake rules.
 */
#define	ManSuffix	1
#define	FileManSuffix	5
#define	ManSourcePath	$(MANPATH)/cat

#define	InstallManPageLongBase(file,destdir,dest)			@@\
all:: file.0								@@\
									@@\
file.0:: file.$(MANNEWSUFFIX)						@@\
	@if [ -f file.$(MANNEWSUFFIX) ]; \				@@\
	then \								@@\
	cat file.$(MANNEWSUFFIX) | $(NEQN) | $(TBL) | \			@@\
		$(NROFF) $(MANMACROS) | $(COL) > file.0; \		@@\
	fi 								@@\
									@@\
install.man::                                                           @@\
	MakeDir($(DESTDIR)destdir)					@@\
	-@if [ -f file.0 ]; \						@@\
	then \								@@\
	$(INSTALL) -c $(INSTMANFLAGS) file.0 $(DESTDIR)destdir/dest.0; \@@\
	fi								@@\
									@@\
clean::									@@\
	RemoveFile(file.0)

#define	InstallManPageLong(file,destdir,dest)				@@\
BuildInstallHtmlManPage(file,dest,$(MANSUFFIX))				@@\
									@@\
CppManTarget(file, $(EXTRAMANDEFS))					@@\
									@@\
InstallManPageLongBase(file,destdir,dest)

#define	InstallGenManPageLong(file,destdir,dest,suffix)			@@\
BuildInstallHtmlManPage(file,dest,suffix)				@@\
									@@\
CppManTarget(file, $(EXTRAMANDEFS))					@@\
									@@\
InstallManPageLongBase(file,destdir,dest)

#define	InstallMultipleMan(list,dest)                                   @@\
install.man:: 								@@\
	MakeDir($(DESTDIR)dest)						@@\
	case '${MFLAGS}' in *[i]*) set +e;; esac; \			@@\
	for i in list; do \                                             @@\
	(MNAME=`echo $$i | cut -f1 -d.`; \				@@\
	set -x; \							@@\
	cat $$i | $(NEQN) | $(TBL) | \					@@\
		$(NROFF) $(MANMACROS) | $(COL) > $${MNAME}.0; \		@@\
	$(INSTALL) -c $(INSTMANFLAGS) $${MNAME}.0 \			@@\
			$(DESTDIR)dest/$${MNAME}.0; \			@@\
	$(RM) $${MNAME}.0); \						@@\
	done

#define	InstallMultipleManSuffix(list,dest,suff)                        @@\
install.man:: 								@@\
	MakeDir($(DESTDIR)dest)						@@\
	case '${MFLAGS}' in *[i]*) set +e;; esac; \			@@\
	for i in list; do \                                             @@\
	(set -x; \							@@\
	cat $$i.suff | $(NEQN) | $(TBL) | \				@@\
		$(NROFF) $(MANMACROS) | $(COL) > $$i.0; \		@@\
	$(INSTALL) -c $(INSTMANFLAGS) $$i.0	\			@@\
		$(DESTDIR)dest/$$i.0; \					@@\
	$(RM) $$i.0 ); \						@@\
	done

#define	InstallManPageAliasesBase(file,destdir,aliases)			@@\
install.man:: 								@@\
	@case '${MFLAGS}' in *[i]*) set +e;; esac; \                    @@\
	for i in aliases; do \                                          @@\
		(set -x; \						@@\
		$(RM) $(DESTDIR)destdir/$$i.0;\  			@@\
		(cd $(DESTDIR)/destdir; $(LN) file.0 $$i.0);\ 		@@\
		); \							@@\
	done

#define	InstallManPageAliases(file,destdir,aliases)			@@\
InstallHtmlManPageAliases(file,aliases,$(MANSUFFIX))			@@\
									@@\
InstallManPageAliasesBase(file,destdir,aliases)

#define	InstallGenManPageAliases(file,destdir,suffix,aliases)		@@\
InstallHtmlManPageAliases(file,aliases,suffix)				@@\
									@@\
InstallManPageAliasesBase(file,destdir,aliases)


/*
 * InstallFontAliases - generate rules to install font aliases
 *                      databases without comments for X11R5 servers
 */
#ifndef	InstallFontAliasesNoComment
#define	InstallFontAliasesNoComment(dest)				@@\
install::								@@\
	$(RM) _fonts.alias 						@@\
	sed -e '/^!/d' -e '/^$$/d' < fonts.alias > _fonts.alias		@@\
	MakeDir($(DESTDIR)dest)						@@\
	$(INSTALL) $(INSTALLFLAGS) $(INSTALLDATFLAGS) _fonts.alias \	@@\
	$(DESTDIR)dest/fonts.alias					@@\
	$(RM) _fonts.alias
#endif /* InstallFontAliasesNoComment */

/*
 * MirOS BSD specific Imake Config files
 */
#ifndef	LocalConfigFiles
#define	LocalConfigFiles OpenBSDLib.rules
#endif
#define ShLibIncludeFile <bsdLib.tmpl>

/*
 * Architecture specific sections - put all architecture dependent
 * options and setting here into the correct section
 */


/*
 * Definitions for the i386 architecture
 */
#ifdef	i386Architecture

# ifndef DoLoadableServer
#  define DoLoadableServer		YES
# endif

/* DRI works, DRM not. DRI blanks the screen if no suitable
 * DRM is found, so enabling it right now would be pointless. */
# ifndef BuildXF86DRI
#  define BuildXF86DRI			NO
# endif
# ifndef BuildXF86DRM
#  define BuildXF86DRM			NO
# endif
# ifndef BuildXF86OldDRMCompat
#  define BuildXF86OldDRMCompat		NO
# endif

# define HasWeakSymbols			YES

/* To use the NetBSD Aperture driver */
# ifndef HasNetBSDApertureDriver
#  define HasNetBSDApertureDriver	YES
# endif

# ifndef HasMTRRSupport
#   define HasMTRRSupport		YES
# endif

#  ifndef HasAgpGart
#   define HasAgpGart   		YES
#  endif

# ifndef DefaultGcc2i386Opt
#   define DefaultGcc2i386Opt		-O2 GccAliasingArgs $(COPTS)
# endif
# define OptimizedCDebugFlags		DefaultGcc2i386Opt
# define ServerOSDefines		XFree86ServerOSDefines
# define ServerExtraSysLibs		-li386
# define LdPostLib			/**/
# define ServerExtraDefines		GccGasOption XFree86ServerDefines
# ifndef XFree86ConsoleDefines
#   define XFree86ConsoleDefines	-DWSCONS_SUPPORT -DPCVT_SUPPORT
# endif

# define JoystickSupport		NO

/* Support for USB Mice */
# ifndef UsbMouseSupport
#   define UsbMouseSupport		YES
# endif

/* Usb Tablets */
# ifndef OSXInputDrivers
#  if HasLibUsbHid
#   define OSXInputDrivers		usbtablet
#  endif
# endif

/* No MMX support in OpenBSD/a.out gas */
# ifndef HasMMXSupport
#   define HasMMXSupport		UseElfFormat
# endif

/* for DRI */
# ifndef HasX86Support
#  define HasX86Support			UseElfFormat
# endif

# include <xfree86.cf>

#endif /* i386Architecture */


/*
 * Definitions for the sparc architecture
 */
#ifdef SparcArchitecture

# define BuildXF86MiscExt	NO
# define BuildMITMiscExt	NO

#  define HasWeakSymbols	YES

#  define XF86Server		YES

#  ifndef Xsun24Server
#   define Xsun24Server		NO
#  endif
#  ifndef XsunServer
#   define XsunServer		NO
#  endif
#  ifndef XsunMonoServer
#   define XsunMonoServer	NO
#  endif
#  ifndef DoLoadableServer
#    define DoLoadableServer	YES
#  endif

#  define XF86CardDrivers	wsfb
#  define XFree86ConsoleDefines -DWSCONS_SUPPORT
#  define BuildXInputExt	YES
#  define ServerOSDefines	XFree86ServerOSDefines -DDDXOSINIT
#  define ServerExtraDefines	GccGasOption XFree86ServerDefines


# define XkbServerDefines	-DXKB_ALWAYS_USES_SOFT_REPEAT

# define BuildXF86VidModeExt	NO
# define BuildXF86DGA		NO
# ifndef BuildXInputExt
#  define BuildXInputExt	NO
# endif
# include <xfree86.cf>

#endif /* SparcArchitecture */

/* End or architecture specific section */

/*
 * Generic settings for all architectures
 * which can be overridden by architecture specific sections above
 */

#ifndef StandardDefines
# define StandardDefines		-DCSRG_BASED $(CPPFLAGS)
#endif

#if !defined(OptimizedCDebugFlags)
# define OptimizedCDebugFlags		-O2
#endif

#ifndef	ServerOSDefines
#  define ServerOSDefines 		/**/
#endif

#ifndef	ServerExtraDefines
#  define ServerExtraDefines		GccGasOption
#endif

#ifndef	ServerExtraSysLibs
#  define ServerExtraSysLibs		/**/
#endif

#ifndef	HasWeakSymbols
# define HasWeakSymbols			NO
#endif

/*
 * Multi-thread safe libs
 */
#if HasWeakSymbols == YES
#  define HasPosixThreads		YES
#  define ThreadedX			YES
#  define SystemMTDefines		-D_REENTRANT
#  define BuildThreadStubLibrary	YES
#  define NeedUIThrStubs		YES
#  define ThreadsCompileFlag		-pthread
#  define ThreadsLibraries		-pthread
#else
#  define ThreadedX			NO
#endif

/* Set this to YES when getpwuid_r is added to libc_r */
#define	HasThreadSafeAPI		NO

#ifndef	ExtraLibraries
# define ExtraLibraries			/**/
#endif

/* Dynamic loading of i18n modules in libX11 has too many problems for now */
#ifndef	BuildLoadableXlibI18n
#define	BuildLoadableXlibI18n		NO
#endif

#ifndef	DoLoadableServer
#define	DoLoadableServer		NO
#endif

#ifndef	XVirtualFramebufferServer
# undef BuildServer
# define BuildServer			YES
# define XVirtualFramebufferServer	YES
#endif

#ifndef	XnestServer
# undef BuildServer
# define BuildServer			YES
# define XnestServer			YES
#endif

#ifndef	BuildScreenSaverLibrary
# define BuildScreenSaverLibrary	YES
#endif

#ifndef	BuildXInputLib
# define BuildXInputLib			YES
#endif

#ifndef	BuildXFree86ConfigTools
# define BuildXFree86ConfigTools	NO
#endif

#ifndef	ForceNormalLib
# define ForceNormalLib			YES
#endif

#ifndef	CompressAllFonts
# define CompressAllFonts		YES
#endif

#ifndef	SharedLibXdmGreet
# define SharedLibXdmGreet		NO
#endif

/*
 * XFree86 uses its own (more portable) database routines to speed up
 * the RGB database lookups
 * However, if you want to use ndbm anyway, you can set that to NO in
 * host.def
 */
#ifndef	UseRgbTxt
# define UseRgbTxt			YES
#endif

#ifndef	HasXdmAuth
# define HasXdmAuth			YES
#endif

#ifndef	HasDlopen
# define HasDlopen			YES
#endif

#ifndef	DlLibrary
# define DlLibrary			/**/
#endif

#ifndef	GccWarningOptions
# define GccWarningOptions		-Wall -Wpointer-arith
#endif

#undef	CplusplusLibC
#define	CplusplusLibC			/* implied by $(CXX) */

/* This must come last */
#include <OpenBSDLib.rules>
