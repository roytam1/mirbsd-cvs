#!/bin/mksh
# $MirOS: src/share/misc/licence.template,v 1.6 2006/01/24 22:24:02 tg Rel $
#-
# Copyright (c) 2004, 2006
#	Thorsten Glaser <tg@mirbsd.de>
#
# Licensee is hereby permitted to deal in this work without restric-
# tion, including unlimited rights to use, publicly perform, modify,
# merge, distribute, sell, give away or sublicence, provided all co-
# pyright notices above, these terms and the disclaimer are retained
# in all redistributions or reproduced in accompanying documentation
# or other materials provided with binary redistributions.
#
# All advertising materials mentioning features or use of this soft-
# ware must display the following acknowledgement:
#	This product includes material provided by Thorsten Glaser.
#
# Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
# express, or implied, to the maximum extent permitted by applicable
# law, without malicious intent or gross negligence; in no event may
# licensor, an author or contributor be held liable for any indirect
# or other damage, or direct damage except proven a consequence of a
# direct error of said person and intended use of this work, loss or
# other issues arising in any way out of its use, even if advised of
# the possibility of such damage or existence of a nontrivial bug.
#-
# Sample implementation for the Heartbeat protocol, originally desi-
# gned by the SixXS IPv6 tunnel provider. MirOS hbServer is not sup-
# ported or endorsed by SixXS but has proven inter-operable.
# This is a multi-server client implementation.
#
# Overview:
# This script is intended to be both usable as standalone command as
# well as a DJB-style "/service/*/run" script for supervision by djb
# daemontools. Configuration is at the top of the script; first end-
# user specific configuration such as passwords or interfaces; after
# that, machine class configuration (such as adaptions for the OS).
#
# The script ought to be chmod'd 0500 so no password leakage occurs.
#
# Installation instructions:
# Put this into /service/hbeat/run chmod 0500. Create a subdirectory
# log/main, chown it to the log user (for example _dnslog). Create a
# /service/hbeat/log/run script (chmod 0555) containing these lines:
#	#!/bin/sh
#	exec setuidgid _dnslog multilog t ./main
# Edit the configuration sections below and start the service.
#
# Invocation if not run via daemontools:
# hbmulti &		- run in the background, beating regularly
# hbmulti down		- run once, tell the server the host is down
# hbmulti once		- run once, beat once only
#
# Configuration information is kept in a set of arrays:
# cf_type		- the type (ipv6:gif0 or simple)
# cf_user		- the username (or ipv6 address)
# cf_pass		- the password
# cf_host		- the remote server (and ipv6 tunnel server)
#
# For IPv6, only unnumbered tunnels are supported (configure the IPs
# after the script has started if needed). The "SENDER" extension is
# not available in this version of the script, nor does it support a
# password change operation (MirOS hbServer only).


#=== global configuration ===

#-- common

# log to syslog (uncomment to enable)
#SYSLOG="hbMulti"			# syslog tag
# log to stdout (comment out to disable)
STDOUT=1
# execute the script with "set -x" (uncomment to enable, debugging)
#STDERR=1				# debug to user
#STDERR=logfile				# debug to file

EXT_IF=pppoe0				# name of external interface

#-- per server

#      variable   server1 server2 ...
set -A cf_type -- simple ipv6:gif0
set -A cf_user -- dnsusername "2001:6f8:900:<xxxx>::2"
set -A cf_pass -- dnspw hagelslag
set -A cf_host -- dns.server 212.224.0.188

#=== OS specifica ===

# get external IP address (run once a minute!)
function getip
{
	local gotit=0
	ifconfig $EXT_IF | while read a b c; do
		[[ $a = inet ]] || continue
		gotit=1
		print $b
		break
	done
	[[ $gotit = 1 ]] || print 0.0.0.0
}

# set up an IPv6 tunnel (run at startup)
# 1: tunnel interface name
# 2: "1" if this is a default route
function setup_v6tunnel
{
	# just in case...
	ifconfig $1 destroy >/dev/null 2>&1

	ifconfig $1 up
	[[ $2 = 1 ]] && route -n add -inet6 default fe80::%$1 -mtu 1280
}

# throw the IPv6 tunnel through IPv4 land (run on IP address change)
# 1: tunnel interface name
# 2: our IP (or empty or 0.0.0.0 on DOWN event)
# 3: server IP (ignored on DOWN event)
function throw_v6tunnel
{
	# just in case... should be done by /etc/ppp/ip-up already
	ifconfig $1 down >/dev/null 2>&1

	ifconfig $1 deletetunnel
	[[ -z $2 || $2 = 0.0.0.0 ]] || ifconfig $1 giftunnel $2 $3

	# don't delete this...
	ifconfig $1 up
}

# clean up, remove interface and routes
# 1: tunnel interface name
# 2: "1" if this was a default route
function clean_v6tunnel
{
	[[ $2 = 1 ]] && route -n delete -inet6 default
	ifconfig $1 destroy
}

#=== subroutines (not configurable) ===

progname="${0:-hbMulti}"	# programme name
progname="${progname##*/}"	# basename of progname

#-- logging

# send a line to the log
function log
{
	[[ -n $STDOUT ]] && print -- "$@"
	[[ ${SYSLOG+set} = set ]] && print -- "$@" \
	    | logger -t "${SYSLOG:-hbClient}"
}

# send always; send to syslog if no stdout logging
function logall
{
	if [[ -n $STDOUT ]]; then
		log "$@"
	else
		print -- "$@" | logger -t "${SYSLOG:-hbClient}"
	fi
}

#-- server communication

# add date, password/hash and send to server
# 1: index
function tell
{
	let nr=$1; shift
	line="$* $(date +%s)"
	cl="$line ${cf_pass[nr]}"
	sl="$line $(print -nr -- "$cl" | md5)"
	print -n -- "$sl"\\0 | nc -4nuw0 ${cf_host[nr]} 3740
}

# send DISABLE TUNNEL to server
# 1: index
function do_disable
{
	log disabling tunnel for ${cf_user[$1]}
	tell $1 DISABLE TUNNEL ${cf_user[$1]} sender
}

# send HEARTBEAT TUNNEL to server
# 1: index
# 2: ip
function do_heartbeat
{
	log beating tunnel for ${cf_user[$1]} on $2
	tell $1 HEARTBEAT TUNNEL ${cf_user[$1]} $2
}

#-- running the script

# clean up
function destruct
{
	logall received destruct, code \'$1\'
	iterate diable
	iterate throw
	iterate clean
	log bye
	exit ${1:-0}
}

# abort with error
function die
{
	print -- "${progname}:" "$@"
	exit 1
}

# iterate over all servers
# 1: type
# 2...: parametres
function iterate
{
	let n=0
	while (( n < ${#cf_type[*]} )); do
		case ${cf_type[n]} {
		(?(def)ipv6:*)
			tunnel=${cf_type[n]#*:}
			if [[ ${cf_type[n]} = def* ]]; then
				defroute=1
			else
				defroute=0
			fi
			case $1 {
			(beat)
				do_heartbeat $n $2 ;;
			(clean)
				clean_v6tunnel $tunnel $defroute ;;
			(disable)
				do_disable $n ;;
			(setup)
				setup_v6tunnel $tunnel $defroute ;;
			(throw)
				throw_v6tunnel $tunnel $2 ${cf_host[n]} ;;
			(*)
				log "Unknown keyword '$1' in '${cf_type[n]}'" \
				    "(#$n), ignoring"
				;;
			}
			;;
		(simple)
			case $1 {
			(beat)
				do_heartbeat $n $2 ;;
			(clean)
				;;
			(disable)
				do_disable $n ;;
			(setup)
				;;
			(throw)
				;;
			(*)
				log "Unknown keyword '$1' in #$n, ignoring"
				;;
			}
			;;
		(*)
			log "Unknown type '${cf_type[n]}' (#$n), ignoring"
			;;
		}
		let ++n
	done
}

#=== main programme ===

typeset -u parm="$1"

if [[ $parm = DOWN ]]; then
	iterate disable
	exit 0
fi

if [[ $parm = ONCE ]]; then
	iterate beat $(getip)
	exit 0
fi

[[ -n $parm ]] && die "Unknown command: '$parm'"


#-- run as heartbeat client

# daemonise or run under supervision
exec 0<&-
[[ -n $STDOUT || $STDERR = 1 ]] || exec 1>&-
if [[ -z $STDERR ]]; then
	exec 2>&-
else
	if [[ $STDERR = 1 ]]; then
		exec 2>&1
	else
		eval "exec 2>>$STDERR"
	fi
	set -x
fi

# set up
log Setting up for ${#cf_type[*]} users
iterate setup

# trap exits
trap 'destruct 0' HUP TERM
trap 'destruct 1' INT

# main loop
OLD_IP=0.0.0.0
while : ; do
	NEW_IP=$(getip)
	if [[ $NEW_IP != $OLD_IP ]]; then
		# status change
		if [[ $NEW_IP = 0.0.0.0 ]]; then
			logall ERROR: cannot find new IP, disabling
			iterate disable
		else
			logall reconfiguring to $NEW_IP
		fi
		iterate throw $NEW_IP
		OLD_IP=$NEW_IP
	fi
	[[ $NEW_IP = 0.0.0.0 ]] || iterate beat $NEW_IP
	sleep 60 & wait
done
# NOTREACHED
