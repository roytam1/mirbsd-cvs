#!/bin/mksh
# $MirOS: contrib/code/heartbeat/hbserver,v 1.4 2006/03/20 00:16:54 tg Exp $
#-
# Copyright (c) 2004, 2006
#	Thorsten Glaser <tg@mirbsd.de>
#
# Licensee is hereby permitted to deal in this work without restric-
# tion, including unlimited rights to use, publicly perform, modify,
# merge, distribute, sell, give away or sublicence, provided all co-
# pyright notices above, these terms and the disclaimer are retained
# in all redistributions or reproduced in accompanying documentation
# or other materials provided with binary redistributions.
#
# All advertising materials mentioning features or use of this soft-
# ware must display the following acknowledgement:
#	This product includes material provided by Thorsten Glaser.
#
# Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
# express, or implied, to the maximum extent permitted by applicable
# law, without malicious intent or gross negligence; in no event may
# licensor, an author or contributor be held liable for any indirect
# or other damage, or direct damage except proven a consequence of a
# direct error of said person and intended use of this work, loss or
# other issues arising in any way out of its use, even if advised of
# the possibility of such damage or existence of a nontrivial bug.
#-
# Sample implementation for the Heartbeat protocol, originally desi-
# gned by the SixXS IPv6 tunnel provider. MirOS hbServer is not sup-
# ported or endorsed by SixXS.
# This is the server part of the implementation.
#
# Command overview:
# - PASSWD
#	<newpassword> <user/ip> <date> <md5>		-> extension
# - HEARTBEAT
#	TUNNEL <user/ip> <ipv4|"sender"> <date> <md5>	-> supported
#	HOST ...					-> ignored
# - DISABLE
#	TUNNEL <user/ip> <ipv4|"sender"> <date> <md5>	-> supported
#	HOST ...					-> ignored
# - ACTION
#	CALL <cookie> [arguments]			-> calling
#
# This script is not configurable in the source code.


#=== global variables ===

# helpers
progname="${0:-hbServer}"	# programme name
progname="${progname##*/}"	# basename of progname
conf=hbserver.cfg		# configuration file
let netcmd=0			# network sub PID

# arrays for user configuration
let anum=0			# number of users
set -A auser			# username
set -A apass			# password
set -A ascript			# script
set -A astat			# status

# filedescriptors for co-routines
set -A afd			# user script input
let freefd=4			# first free one
let netin=0			# network sub output

# the action script cookie
let thecookie="RANDOM * RANDOM + $$"
let action_fd=0

#=== subroutines ===

#-- general programe flow and configuration

# show help
function usage
{
	print "Usage: $progname [-h | -c hbserver.cfg]"
	exit 0
}

# abort with error
function die
{
	print -- "${progname}:" "$@"
	exit 1
}

# clean up (called by trap)
function cleanup
{
	# which error code?
	rv=${1:-0}
	print finishing up, $anum clients, netio $netin/$netcmd
	# shut down network coprocess
	(( netcmd > 0 )) && kill $netcmd
	(( action_fd )) && tell $action_fd QUIT
	# shut down user coprocesses
	let i=anum
	while (( i > 0 )); do
		tell ${afd[--i]} QUIT
	done
	sleep 3
	print bye
	exit $rv
}

# dump current configuration
# ATTENTION: debug only, shows passwords in plain text
function dumpcfg
{
	print == Current Configuration:
	print Number of user co-routines: $anum
	let i=anum
	while (( i > 0 )); do
		let --i
		print "id $i for user '${auser[i]}' pw '${apass[i]}'" \
		    "calls '${ascript[i]}' on fd ${afd[i]} is ${astat[i]}"
	done
	print Network I/O: read from $netin, signal to $netcmd
	print == End of Configuration Dump
}

#-- communication with co-routines

# write command to co-process
function tell
{
	let fd=${1:-0}
	shift
	(( fd > 0 )) && print -u$fd "$@" &
}

#-- networking

# netio co-routine
function net_reader
{
	nc_pid=
	trap '[[ -n $nc_pid ]] && kill $nc_pid; exit 0' TERM
	while : ; do
		nc -4Inluw0 3740 &
		nc_pid=$!
		wait
		nc_pid=
		print
	done
}

#-- user functions

# look through arrays for user
function lookup
{
	let rv=65535	# "not found"
	let i=anum
	u="$1"
	while (( i > 0 )); do
		if [[ ${auser[--i]} = $u ]]; then
			let rv=i
			break
		fi
	done
	print $rv
}

#-- backend calls

# command PASSWD: change password for user
function do_passwd
{
	let uid=$1
	pw="$2"

	# 1) log action
	print doing PASSWD for ${auser[uid]}

	# 2) edit persistent database
	np="${auser[uid]}\t$(print -nr -- "$pw" \
	    | b64encode -r)\t${ascript[uid]}"
	print "/^${auser[uid]}[\t ]/ka\ni\n$np\n.\n'ad\nwq" | ed -s "$conf"

	# 3) run-time info
	apass[uid]="$pw"

	# 4) heartbeat backend
	tell ${afd[uid]} -r PASS "$pw"
}

# command HEARTBEAT/DISABLE subcommand TUNNEL
function do_tunnel
{
	let uid=$1
	newstate=$2

	# did the state change?
	if [[ ${astat[uid]} = $newstate ]]; then
		# no, just idle
		tell ${afd[uid]} IDLE
	else
		# yes, log action
		print doing HEARTBEAT for ${auser[uid]} to $newstate
		# and ask backend to act
		tell ${afd[uid]} $newstate
		astat[uid]=$newstate
	fi
}

#=== main programme ===

# parse arguments
while getopts ":c:h" opt; do
	case $opt {
	c)	[[ -s $OPTARG ]] || usage
		conf="$OPTARG"
		;;
	h)	usage
		;;
	\?)	usage
		;;
	}
done
shift $((OPTIND - 1))

# parse configuration file
[[ -s $conf && -r $conf ]] || die Configuration file "$conf" not readable
let lineno=0
while read s; do
	let lineno++

	# skip over comments, blanks
	s="${s%%#*}"
	[[ -n $s ]] || continue
	# invalid lines
	[[ $s = +([!$IFS])+([$IFS])+([!$IFS])+([$IFS])+([!$IFS]) ]] \
	    || die Syntax error in "$conf" line $lineno

	# parse fields
	set -A line -- $s
	auser[anum]="${line[0]}"
	apass[anum]="$(print -r -- ${line[1]} | b64decode -r 2>/dev/null)"
	ascript[anum]="${line[2]}"

	# check for validity
	[[ ${auser[anum]} = *[$IFS]* ]] \
	    && die User contains whitespace in "$conf" line $lineno
	[[ -n ${apass[anum]} ]] \
	    || die Password not given or malformed in "$conf" line $lineno
	[[ -x ${ascript[anum]} ]] \
	    || die Script "${ascript[anum]}" not found in "$conf" line $lineno

	# loop
	let anum++
done <"$conf"

# start the action script manager
eval "PATH=$PATH:. hbaction >/dev/null 2>&1 |&"
exec 3<&p; exec 3<&-
let action_fd=freefd++
eval "exec ${action_fd}>&p"

# start the subprocesses, one per user
let i=anum
while (( i > 0 )); do
	# start the backend as a co-routine
	eval "PATH=$PATH:. ${ascript[--i]} >/dev/null 2>&1 |&"

	# discard output from backend
	exec 3<&p; exec 3<&-

	# initialise backend to DOWN state
	print -rp "INIT ${auser[i]} ${apass[i]}"
	astat[i]=DOWN

	# allocate free filedescriptor and decouple
	let afd[i]=freefd++
	eval "exec ${afd[i]}>&p"
done

# set up exit traps
trap "cleanup 0" HUP TERM
trap "cleanup 1" INT

# say hello to the logfile
print starting hbServer for $anum clients

# start network I/O subprocess
net_reader |&
netcmd=$(jobs -p %net_reader)
# close its input filedescriptor
exec 3>&p; exec 3>&-
# allocate free output fd
let netin=freefd++
eval "exec ${netin}<&p"

# check if network I/O really works
cookie="SETUP $$ $RANDOM"
print -n "$cookie\0" | nc -4nuw0 -p 3741 127.0.0.1 3740
read -u$netin NETIP NETIN
if [[ "$NETIP $NETIN" != "[127.0.0.1]:3741 $cookie" ]]; then
	print fatal error: network I/O process not working
	cleanup 2
fi

# initialise the cookie (action manager)
tell $action_fd INIT $thecookie

# main loop
while : ; do
	# read input from the network
	read -u$netin NETIP NETIN
	set -A line -- $NETIN

	# 0) check for action
	(( action_fd )) && if [[ ${line[0]} = ACTION ]]; then
		case ${line[1]} {
		CALL)
			if [[ ${line[2]} = $thecookie ]]; then
				cookie=
				let i=3
				while (( i < ${#line[*]} )); do
					cookie="$cookie ${line[i++]}"
				done
				tell $action_fd CALL ${cookie# }
			fi
			;;
		GOTCOOKIE)
			if [[ ${line[2]} = $thecookie ]]; then
				let i=anum
				while (( i > 0 )); do
					tell ${afd[--i]} SETCOOKIE $thecookie
				done
			fi
			;;
		}
		continue
	fi

	# 1) how many tokens do we have?
	let ln=${#line[*]}-1		# 0 .. n-1
	(( ln < 3 )) && continue	# min: CMD HOST TIME MD5

	# 2) does the time match?
	let i=$(date +%s)
	let tm=${line[ln-1]}
	# difference more than 60+(utc-tai) seconds?
	(( (dt = ( (i > tm) ? (i - tm) : (tm - i) )) > 82 )) && continue

	# 3) search for user (third token)
	let uid=$(lookup ${line[2]})
	(( uid < 65535 )) || continue

	# 4) match MD5 given ("is") with MD5 calculated ("should be")
	md5=$(print -nr -- "${NETIN% *} ${apass[uid]}" | md5)
	[[ $md5 = ${line[ln]} ]] || continue

	# 5) calculate IPv4 address of sender
	ip="${NETIP#\[}"
	ip=${ip%]*}

	# 6) execute command received
	case ${line[0]} {
	DISABLE)
		# correct subcommand?
		[[ ${line[1]} = TUNNEL ]] || continue
		do_tunnel $uid DOWN
		;;
	HEARTBEAT)
		# correct subcommand?
		[[ ${line[1]} = TUNNEL ]] || continue
		# correct IPv4 address?
		case ${line[3]} {
		sender)
			;;
		+([0-9]).+([0-9]).+([0-9]).+([0-9]))
			[[ ${line[3]} = $ip ]] || continue
			;;
		*)
			continue
			;;
		}
		do_tunnel $uid IP$ip
		print delta temporis for ${auser[uid]} is $dt
		;;
	PASSWD)
		do_passwd $uid "${line[1]}"
		;;
	}
done
# NOTREACHED
