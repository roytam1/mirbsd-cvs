#!/bin/mksh
# $MirOS: src/share/misc/licence.template,v 1.6 2006/01/24 22:24:02 tg Rel $
#-
# Copyright (c) 2006
#	Thorsten Glaser <tg@mirbsd.de>
#
# Licensee is hereby permitted to deal in this work without restric-
# tion, including unlimited rights to use, publicly perform, modify,
# merge, distribute, sell, give away or sublicence, provided all co-
# pyright notices above, these terms and the disclaimer are retained
# in all redistributions or reproduced in accompanying documentation
# or other materials provided with binary redistributions.
#
# All advertising materials mentioning features or use of this soft-
# ware must display the following acknowledgement:
#	This product includes material provided by Thorsten Glaser.
#
# Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
# express, or implied, to the maximum extent permitted by applicable
# law, without malicious intent or gross negligence; in no event may
# licensor, an author or contributor be held liable for any indirect
# or other damage, or direct damage except proven a consequence of a
# direct error of said person and intended use of this work, loss or
# other issues arising in any way out of its use, even if advised of
# the possibility of such damage or existence of a nontrivial bug.
#-
# This helper script is sent a message by the heartbeat server when-
# ever it's requested by the other scripts (e.g., a DNS change). The
# action is executed about half a minute later than the last request
# received in that timeframe. You must chmod +x this script to work.

let mycookie=0
mydown=
myinfo=

function make_it
{
	# insert your desired action here, e.g. send a NOTIFY request
	print triggered make_it "<$myinfo>" | /usr/bin/logger -t hbaction
	# end of action
	myinfo=
}

function do_call
{
	shift
	if [[ -n $mydown ]]; then
		kill -USR1 $mydown 2>/dev/null
		mydown=
	fi
	myinfo="$*"
	triggerup &
	mydown=$!
}

function triggerup
{
	trap 'exit 0' USR1
	sleep 32 & wait %sleep
	trap - USR1
	mydown=
	make_it &
}

function do_quit
{
	if [[ -n $mydown ]]; then
		kill -USR1 $mydown 2>/dev/null
		mydown=
	fi
	exit 0
}

while read line; do
	case $line {
	INIT*)
		set -A foo -- $line
		let mycookie=${foo[1]}
		if (( mycookie )); then
			print GOTCOOKIE $mycookie
		else
			do_quit
		fi
		;;
	CALL*)
		(( mycookie )) && do_call $line
		;;
	QUIT)
		do_quit
		;;
	}
done
do_quit
