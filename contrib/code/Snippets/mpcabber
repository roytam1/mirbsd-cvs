#!/usr/bin/env mksh
# $MirOS: contrib/code/Snippets/mpcabber,v 1.1 2008/06/26 13:01:20 tg Exp $
#-
# Copyright (c) 2008
#	Thorsten Glaser <tg@mirbsd.org>
#
# Provided that these terms and disclaimer and all copyright notices
# are retained or reproduced in an accompanying document, permission
# is granted to deal in this work without restriction, including un-
# limited rights to use, publicly perform, distribute, sell, modify,
# merge, give away, or sublicence.
#
# This work is provided “AS IS” and WITHOUT WARRANTY of any kind, to
# the utmost extent permitted by applicable law, neither express nor
# implied; without malicious intent or gross negligence. In no event
# may a licensor, author or contributor be held liable for indirect,
# direct, other damage, loss, or other issues arising in any way out
# of dealing in the work, even if advised of the possibility of such
# damage or existence of a defect, except proven that it results out
# of said person’s immediate fault when using the work as intended.
#-
# mpg123-0.59r-MirPorts-6 to mcabber-0.9.7 FIFO gateway
# Requires mksh R34 or above
#
# User Tunes strings are courtesy of Jonathan Schleifer (my personal
# XEP to German gateway ☺)

# Configuration
integer usestate=1	# use Away Status
integer usetunes=1	# use User Tunes (XEP #0118)


integer rv gotintr=0
curdir=
if [[ $1 = -p ]]; then
	shift
	player=$1
	shift
fi

trap 'gotintr=1' INT

${player:-mpg123} "$@" 2>&1 |&
subpid=$!

while :; do
	IFS= read -pr line
	rv=$?
	if (( gotintr )); then
		gotintr=0
		kill -INT $subpid
		continue
	fi
	(( rv )) && break
	print -r -- "$line"
	case $line {
	(@(ICY metadata:)*)
		curdir=
		title=${line/*StreamTitle=\'}
		title=${title/@(\';StreamUrl=)*}
		title=${title%%?(\');}
		;;
	(@(Directory: http://)*)
		curdir=${line#Directory: }
		continue
		;;
	(@(Playing MPEG stream from )*)
		title=$(sed -e 's/^Playing MPEG stream from \(.*\) ...$/\1/' \
		    <<<"$line")
		[[ $title = $line ]] && continue	# sanity
		[[ -n $curdir ]] && title=$curdir$title
		curdir=
		;;
	(@(decoding of file )*)
		title=${line##decoding of file ?(\')}
		title=${title%\'}
		curdir=
		;;
	(@(Playing )*.)
		title=${line#Playing }
		title=${title%.}
		curdir=
		;;
	(*)
		continue
		;;
	}
	title=${title##+([	 ])}
	title=${title##[Nn]?(ow )[Pp]?(laying):}
	title=${title##+([	 ])}
	title=${title%%+([	 ])}
	title=${title%%.@([Mm][Pp][234CcPp]|[Aa][Vv][Ii]|[Mm][Kk][Vv]|[Ff][Ll][Aa][Cc]|[Ff][Ll][Vv])}
	title=${title%%+([	 ])}
	[[ -n $title ]] || continue

	# Debugging
	#print -ru2 -- "setting title: $title"

	# Is mcabber running and listening on the FIFO?
	[[ -p ~/.etc/mcabber/mcabber.fifo ]] || continue

	# Away Status
	(( usestate )) && print -r -- "/status message ♫ $title" >~/.etc/mcabber/mcabber.fifo

	# Give the mcabber FIFO some rest, will ya?
	(( usestate && usetunes )) && sleep 1

	# User Tunes
	(( usetunes )) && print -r -- '/rawxml send <iq type="set"><pubsub xmlns="http://jabber.org/protocol/pubsub"><publish node="http://jabber.org/protocol/tune"><item id="0"><tune xmlns="http://jabber.org/protocol/tune"><title>'"$(sed \
	    -e "s/&/\&#38;/g" \
	    -e "s/</\&#60;/g" \
	    -e "s/>/\&#62;/g" \
	    -e "s/'/\&#39;/g" \
	    <<<"$title")"'</title></tune></item></publish></pubsub></iq>' >~/.etc/mcabber/mcabber.fifo
done

if [[ -p ~/.etc/mcabber/mcabber.fifo ]]; then
	# Away Status
	(( usestate )) && print '/status message ∅' >~/.etc/mcabber/mcabber.fifo
	# Give the mcabber FIFO some rest
	(( usestate && usetunes )) && sleep 1
	# User Tunes
	(( usetunes )) && print '/rawxml send <iq type="set"><pubsub xmlns="http://jabber.org/protocol/pubsub"><publish node="http://jabber.org/protocol/tune"><item id="0"><tune xmlns="http://jabber.org/protocol/tune" /></item></publish></pubsub></iq>' >~/.etc/mcabber/mcabber.fifo
fi

exit 0
