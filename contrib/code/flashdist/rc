# $MirOS: contrib/code/flashdist/rc,v 1.2 2005/02/17 22:20:00 bsiegert Exp $
#
# Example config: Soekris net4xxx Boot for router with DHCP, NAT, VLAN
#
# chris@nmedia.net

# Strip comments (and leading/trailing whitespace if IFS is set)
# from one or more file(s) given (or stdin if none) and spew to stdout
function stripcom
{
	local _line

	set -o noglob
	cat "$@" | while read _line; do
		_line=${_line%%#*}
		[[ -n $_line ]] && echo $_line
	done
	set +o noglob
}
stty status '^T'

# Set shell to ignore SIGINT (2), but not children;
# shell catches SIGQUIT (3) and returns to single user.
trap : 2
trap : 3

HOME=/; export HOME
PATH=/sbin:/bin:/usr/sbin:/usr/bin
export PATH

if [ "$1" == "shutdown" ]; then
	mount -o ro /
	exit 0
fi

# pick up configuration options
. /etc/rc.conf

# Check filesystems
if [[ -e /fastboot ]]; then
	echo "Fast boot: skipping disk checks."
  elif [[ $1 == autoboot ]]; then
	echo "Automatic boot in progress: starting filesystem checks."
	fsck -p
	case $? {
	  0)
		;;
	  2)
		exit 1
		;;
	  4)
		echo "Rebooting..."
		reboot
		echo "Reboot failed; help!"
		exit 1
		;;
	  8)
		echo "Automatic filesystem check failed; help!"
		exit 1
		;;
	  12)
		echo "Boot interrupted."
		exit 1
		;;
	  130)
		# interrupt before catcher installed
		exit 1
		;;
	  *)
		echo "Unknown error; help!"
		exit 1
		;;
	}
fi

trap "echo 'Boot interrupted.'; exit 1" 3

rm -f /fastboot

echo mfs: mounting /tmp
mount_mfs -s 16384 /dev/wd0b /tmp

echo mfs: populating /tmp
# flashdist makes /var a link to /tmp/var
mkdir /tmp/var
mkdir /tmp/var/tmp
mkdir /tmp/var/tmp/vi.recover
mkdir /tmp/var/run
mkdir /tmp/var/log
mkdir /tmp/var/db
mkdir /tmp/var/empty
if [ -d /root ]; then
 cp -R /root /tmp/root
fi
chmod -R 755 /tmp/var
chmod a+rwxt /tmp/var/tmp/vi.recover
touch /tmp/var/run/utmp
touch /tmp/var/log/authlog
touch /tmp/var/log/messages

# Copy over devices created from flashdist into a place where the permissions
# can be changed.  Flashdist already created links to /var/run/dev/XXX for
# these devices.
mkdir /var/run/dev
tar cf - -C /dev/devtmp . | tar xpf - -C /var/run/dev

# set flags on ttys.  (do early, in case they use tty for SLIP in netstart)
echo 'setting tty flags'
ttyflags -a

if [[ $pf != NO ]]; then
	RULES="block all"
	RULES="$RULES\npass on lo0"
	RULES="$RULES\npass in proto tcp from any to any port 22 keep state"
	RULES="$RULES\npass out proto { tcp, udp } from any to any port 53 keep state"
	RULES="$RULES\npass out inet proto icmp all icmp-type echoreq keep state"
	case $(sysctl vfs.mounts.nfs 2>/dev/null) {
	  *[1-9]*)
		# don't kill NFS
		RULES="scrub in all no-df\n$RULES"
		RULES="$RULES\npass in proto udp from any port { 111, 2049 } to any"
		RULES="$RULES\npass out proto udp from any to any port { 111, 2049 }"
		;;
	}
	echo $RULES | pfctl -f - -e
fi

if [[ -f /etc/sysctl.conf ]]; then
(
	# delete comments and blank lines
	set -- $(stripcom /etc/sysctl.conf)
	while [[ $# -ge 1 ]]; do
		sysctl -w $1
		shift
	done
)
fi

# set hostname, turn on network
echo 'starting network'
. /etc/netstart

if [[ $pf != NO ]]; then
	if [[ -f $pf_rules ]]; then
		pfctl -f "$pf_rules"
	fi
fi

# You don't need to make databases, but they help ps and some other
# programs ... (skipped kvm for now since /dev/ksyms is a waste of time
# on an embedded router)
#
echo -n 'building ps databases:'
echo -n " dev"
dev_mkdb
echo

# Init will do this for us, but to be proper we should do it now, before
# remote login services start
echo -n 'setting kernel security level: '
sysctl -w kern.securelevel=${securelevel:=1}


if [ -f /etc/nshrc -a -x /bin/nsh ]; then
 echo nsh: starting nsh
 nsh -i /etc/nshrc
fi

if [ -f /etc/syslog.conf ]; then
  echo syslogd: starting log daemon...
  syslogd -p /var/run/log
fi

#echo dhcp: starting server...
#touch /var/db/dhcpd.leases
#dhcpd -q vlan0

mounted_rw=NO

if [[ x$shared_libs = xYES -a -f /sbin/ldconfig ]]; then
	echo 'creating runtime link editor directory cache.'
	if [[ -d /usr/local/lib ]]; then
		shlib_dirs="/usr/local/lib $shlib_dirs"
	fi
	ldconfig $shlib_dirs
fi

if [ -d /etc/ssh -a ! -f /etc/ssh/ssh_host_dsa_key ]; then
	echo -n "ssh-keygen: generating new DSA host key... "
	mount -o rw /dev/wd0a /
	mounted_rw=YES
	if /usr/bin/ssh-keygen -q -t dsa -f /etc/ssh/ssh_host_dsa_key -N ''; then
		echo done.
	else
		echo failed.
	fi
fi
if [ -d /etc/ssh -a ! -f /etc/ssh/ssh_host_rsa_key ]; then
	echo -n "ssh-keygen: generating new RSA host key... "
	if [ $mounted_rw != YES ] ; then
		mount -o rw /dev/wd0a /
		mounted_rw=YES
	fi
	if /usr/bin/ssh-keygen -q -t rsa -f /etc/ssh/ssh_host_rsa_key -N ''; then
		echo done.
	else
		echo failed.
	fi
fi
if [ -d /etc/ssh -a ! -f /etc/ssh/ssh_host_key ]; then
	echo -n "ssh-keygen: generating new RSA1 host key... "
	if [ $mounted_rw != YES ] ; then
		mount -o rw /dev/wd0a /
		mounted_rw=YES
	fi
	if /usr/bin/ssh-keygen -q -t rsa1 -f /etc/ssh/ssh_host_key -N ''; then
		echo done.
	else
		echo failed.
	fi
fi

# now switch to ro mode if we remounted rw before
if [ $mounted_rw = YES ] ; then
	mount -o ro /dev/wd0a /
fi

echo -n starting network daemons:

# $dhcpd_flags is imported from /etc/rc.conf
# If $dhcpd_flags == NO or /etc/dhcpd.conf doesn't exist, then dhcpd isn't run.
if [[ $dhcpd_flags != NO && -f /etc/dhcpd.conf ]]; then
	touch /var/db/dhcpd.leases
	if [[ -f /etc/dhcpd.interfaces ]]; then
		dhcpd_ifs=$(stripcom /etc/dhcpd.interfaces)
	fi
	_flags="$dhcpd_flags $dhcpd_ifs"
	echo -n ' dhcpd';		/usr/sbin/dhcpd $_flags
fi

if ifconfig lo0 inet6 >/dev/null 2>&1; then
	fw=$(sysctl -n net.inet6.ip6.forwarding)
	if [[ $fw == 0 ]]; then
		# $rtsold_flags is imported from /etc/rc.conf;
		# If $rtsold_flags == NO, then rtsold isn't run.
		if [[ $rtsold_flags != NO ]]; then
			echo -n ' rtsold'
			/usr/sbin/rtsold $rtsold_flags
		fi
	  else
		# $route6d_flags is imported from /etc/rc.conf;
		# If $route6d_flags == NO, then route6d isn't run.
		if [[ $route6d_flags != NO ]]; then
			echo -n ' route6d'
			/usr/sbin/route6d $route6d_flags
		fi
		# $rtadvd_flags is imported from /etc/rc.conf;
		# If $rtadvd_flags == NO, then rtadvd isn't run.
		if [[ $rtadvd_flags != NO ]]; then
			echo -n ' rtadvd'
			/usr/sbin/rtadvd $rtadvd_flags
		fi
	fi
fi

echo -n " ssh"
/usr/sbin/sshd 

echo
