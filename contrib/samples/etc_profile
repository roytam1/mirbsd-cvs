# $MirOS: contrib/samples/etc_profile,v 1.14 2011/06/21 11:09:30 tg Exp $
#-
# Initialisation file for MirOS ksh (pdksh, sh), (s)ash and GNU bash
# Fallback mode only for non-Korn-shells, though.

echo >&2 sample, not maintained since 2005, please adjust
exit 1

[ -s "${HOME}/.profile.preinit" ] && . ${HOME}/.profile.preinit

if [ -n "$SFUDIR" -o -n "$OPENNT_ROOT" -o x"$OS" = x"Windows_NT" ]; then
	NOSETPATH=1
else
	# just in case, and not on Interix or other host OSes
	export PATH=/usr/bin:/bin:/usr/sbin:/sbin
fi
[ -n "$BASH_VERSION" ] && alias print='echo -e'
umask 022
[ -z "$TERM" ] && if test -x /usr/bin/tset; then
	MIROS=$(ulimit -c 0; /usr/bin/tset -sQ \?vt220)
	if [ -z "$MIROS" ]; then
		export TERM=vt100
	else
		eval $MIROS
	fi
else
	export TERM=vt220
fi
export RUNLEVEL=2
case "$TERM" in
xterm*)
	export RUNLEVEL=3
	export COLORTERM=1
	;;
wsvt*)
	export COLORTERM=1
	;;
screen)
	export COLORTERM=1
	if [ -n "$MIROS_BWTERM" -a x"$MIROS_BWTERM" != x"1" ]; then
		unset COLORTERM
		unset TERMCAP
		export TERM="$MIROS_BWTERM"
		NOCOLOURPROMPT=1
	fi
	;;
interix)
	export COLORTERM=1
	NOCOLOURPROMPT=1
	;;
*)
	if [ x"$COLORTERM" != x"1" ]; then
		unset COLORTERM
		NOCOLOURPROMPT=1
	fi
	;;
esac
[ -z "$USER" ] && export RUNLEVEL=S
if [ -x /usr/bin/id ]; then
	USER_ID="$(ulimit -c 0; /usr/bin/id -u 2>/dev/null)"
	[ -z "$USER_ID" ] && USER_ID=0
else
	USER_ID=0
fi
[ -z "$HOME" ] && HOME=/
export USER_ID HOME
[ -n "$NOSETPATH" ] || if [ -z "$USER" ]; then
	export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin
	unset COLORTERM
elif [ $USER_ID -eq 0 ]; then
	export PATH=/usr/sbin:/sbin:/usr/bin:/bin:/usr/X11R6/bin:/usr/local/bin:/usr/games
else
	export PATH=~/.etc/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/X11R6/bin:/usr/local/bin:/usr/games
fi
export PS1='SINGLE:${PWD} # '
CVS_RSH="$(whence -p ssh 2>/dev/null)" || CVS_RSH=/usr/bin/ssh; export CVS_RSH
export CVSUMASK=002
export IRCSERVER=irc.mirbsd.org
export IRCPORT=6666
HOSTNAME="$(ulimit -c 0; hostname -s 2>/dev/null)"
OSNAME="$(ulimit -c 0; uname -s 2>/dev/null)"
export HOSTNAME="${HOSTNAME:-noFQDN}" OSNAME="${OSNAME:-unknown}"
export PAGER=less BROWSER=lynx LESSHISTFILE=- MANWIDTH=80
EDITOR="$(whence -p jupp 2>/dev/null)" || \
    EDITOR="$(whence -p jstar 2>/dev/null)" || \
    EDITOR=/usr/local/bin/jupp
[ -x "$EDITOR" ] || EDITOR=ed; export EDITOR
[ -n "$NOCOLOURPROMPT" ] || if [ x"$COLORTERM" = x"1" ]; then
	X_COLOUR=
	[ $RUNLEVEL = 3 ] && if [ $USER_ID -eq 0 ]; then
		X_COLOUR=']11;MistyRose3]10;black'
	else
		X_COLOUR=']11;GhostWhite]10;black'
	fi
	[ "$TERM" = "xterm-xfree86" ] && X_COLOUR=']11;black]10;lightgrey'
else
	export MIROS_BWTERM="${TERM:-vt220}"
fi
MIROS=
if [ -n "$SFUDIR_INTERIX" ]; then
	MIROS="-interix"
elif [ -n "$SFUDIR" ]; then
	MIROS="-winsfu"
elif [ x"$OS" = x"Windows_NT" ]; then
	MIROS="-winnt"
elif [ "$OSTYPE" = "linux-gnu" -o "$OSTYPE" = "Linux" ]; then
	MIROS="-linux"
fi
if [ -z "$KSH_VERSION" -a -z "$DONTWANTMKSH" ]; then
	if [ -n "$KSH_TRIED" ]; then
		echo Warning: cannot start mirbsdksh
	else
		export KSH_TRIED=1
		F=$HOME/.etc/bin/mksh
		[ ! -x $F ] && F=$HOME/.bin/mksh
		[ ! -x $F ] && F=$HOME/bin/mksh
		[ ! -x $F ] && F=$HOME/mksh
		[ ! -x $F ] && F=/bin/mksh
		exec $F -l
	fi
fi
if [ -n "$KSH_VERSION" ]; then
	(set +o sh) 2>/dev/null && set +o sh
	(set +o vi) 2>/dev/null && set +o vi
	(set +o posix) 2>/dev/null && set +o posix
	(set -o emacs) 2>/dev/null && set -o emacs
	unset KSH_TRIED
	[[ ${COLUMNS:-1} -le 1 ]] && export COLUMNS=80
	# we rely on ~/.mkshrc to set $PS1 here
	if [ -z "$NOCOLOURPROMPT" ]; then
		# XXX doesn't work since ~/.mkshrc overrides this
		if [ $USER_ID -eq 0 ]; then
			PS1='${X_COLOUR}[41;30m${USER}[0m@${HOSTNAME}:${PWD} # '
		else
			PS1='${X_COLOUR}${USER}@${HOSTNAME}:${PWD} $ '
		fi
	fi
	alias ls='/bin/ls -F'
	export PS1 MIROS=ksh$MIROS
elif [ -n "$BASH_VERSION" ]; then
	[ x"$TERM" = x"screen" ] && \
	    export X_COLOUR="${X_COLOUR}"'[5;34;40m\]screen:\[[0m'
	if [ "$OSTYPE" = "linux-gnu" -o "$OSTYPE" = "Linux" ]; then
		PS1='\['"${X_COLOUR}"'[1;31m\]Linux!\[[0m\]\u@\h:\w \$ '
		export RUNLEVEL=4
		alias ls='/bin/ls -F --color'
	else
		PS1='\['"${X_COLOUR}"'[34m\]bash!\[[0m\]\u@\h:\w \$ '
		alias ls='/bin/ls -F'
	fi
	[ -n "$NOCOLOURPROMPT" ] && PS1=${MIROS}':\u@\h:\w \$ '
	export PS1 MIROS=bash$MIROS
else
	export MIROS=ash$MIROS
fi
alias cls='echo -ne \\033c'
function bye {		# cu ;-)
	[ "$1" = k ] && ssh-agent -k
	M='\033c'
	[ $? -ne 0 ] && M='\033c Warning: ssh-agent returned error!\n'
	print -n "$M"
	exit
	logout
}
function rcsedit {	# check out, edit, commit
	t_cwd="$(pwd)"
	for file in "$@"; do
		cd "$(dirname "$file")"
		co -l "$file"
	done
	cd "$t_cwd"
	$EDITOR "$@"
	for file in "$@"; do
		cd "$(dirname "$file")"
		ci -u "$file"
	done
	cd "$t_cwd"
}
function ddg {		# DuckDuckGo Search
	${BROWSER:-lynx} "https://duckduckgo.com/?kp=-1&kl=wt-wt&kb=t&kh=1&kj=g2&km=l&ka=monospace&ku=1&ko=s&k1=-1&kv=1&q=$*"
}
function ggs {		# Google Search
	${BROWSER:-lynx} "http://www.google.com/search?hl=la&num=100&safe=off&q=$*"
}
function ggr {		# Google GRoups
	${BROWSER:-lynx} "http://groups.google.com/groups?hl=la&num=100&safe=off&as_umsgid=$*"
}
function ge {		# German English
	${BROWSER:-lynx} "http://dict.leo.org/?search=$*"
}
function ges {		# German Spanish
	${BROWSER:-lynx} "http://dict.leo.org/esde?search=$*"
}
function espanol {	# explica en espaÃ±ol
	lynx -dump --nolist "http://buscon.rae.es/draeI/SrvltGUIBusUsual?TIPO_HTML=2&LEMA=$*"
}
function ulynx {	# uxterm lynx (UTF-8)
	lynx -display_charset utf8 "$@"
}
function klynx {	# kterm lynx (EUC-JP)
	( sleep 1; cls; print -n 'Press Ctrl-L!' ) 2>/dev/null &
	lynx -display_charset euc-jp "$@"
}
function loadimage {	# call xloadimage by URI
	for fi in "$@"; do
		if [ -e "$fi" ]; then
			xloadimage "$fi"
		else
			ftp -mo - "$fi" | xloadimage stdin
		fi
	done
}
function Lfirstcol {	# only the first column (useful for regen-obsdp)
	set -o noglob
	cat "$@" | while read a b; do
		echo "$a"
	done
	set +o noglob
}
function Lseccol {	# only the second column (useful for cvs output)
	set -o noglob
	cat "$@" | while read a b; do
		echo "$b"
	done
	set +o noglob
}
function Lretrocfg {	# retrieve kernel config file
	strings -n4 ${1:-/bsd} | sed -n 's/^=CF=//p'
}
[ -x /emul/linux/bin/bash ] && alias lx='/emul/linux/bin/bash --login'
unset HISTFILE
set -o emacs
USER_NAME=_nonexistent
[ -x /usr/bin/id ] && USER_NAME=$(id -un 2>/dev/null)
if [ -O /tmp/.ssh-agent/$USER_NAME ]; then
	# If the agent is not running, remove stale files
	[ ! -e /tmp/.ssh-agent/$USER_NAME/socket ] && \
	    rm -f /tmp/.ssh-agent/$USER_NAME/{agent,keyread}
	# Start ssh-agent if it is not already started
	if [ ! -e /tmp/.ssh-agent/$USER_NAME/agent ]; then
		ssh-agent -s -a /tmp/.ssh-agent/$USER_NAME/socket \
		    >/tmp/.ssh-agent/$USER_NAME/agent
	fi
	# Do the following only if ssh-agent is running
	if [ -e /tmp/.ssh-agent/$USER_NAME/socket ]; then
		# Read configuration file if it exists
		[ -e /tmp/.ssh-agent/$USER_NAME/agent ] && \
		    . /tmp/.ssh-agent/$USER_NAME/agent >&2
		# Read in the keys, if not already done
		if [ ! -e /tmp/.ssh-agent/$USER_NAME/keyread ]; then
			ssh-add
			touch /tmp/.ssh-agent/$USER_NAME/keyread
		fi
	fi
fi
unset USER_NAME X_COLOUR NOSETPATH NOCOLOURPROMPT

[ -f /etc/profile.local ] && . /etc/profile.local
[ -f ~/.profile.local ] && . ~/.profile.local
