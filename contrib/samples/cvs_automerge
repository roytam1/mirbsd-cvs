#!/bin/mksh
# $MirOS: contrib/samples/cvs_automerge,v 1.3 2005/12/17 05:46:11 tg Exp $
#-
# Copyright (c) 2004, 2005
#	Thorsten "mirabile" Glaser <tg@66h.42h.de>
#
# Licensee is hereby permitted to deal in this work without restric-
# tion, including unlimited rights to use, publicly perform, modify,
# merge, distribute, sell, give away or sublicence, provided all co-
# pyright notices above, these terms and the disclaimer are retained
# in all redistributions or reproduced in accompanying documentation
# or other materials provided with binary redistributions.
#
# Advertising materials mentioning features or use of this work must
# display the following acknowledgement:
#	This product includes material provided by Thorsten Glaser.
#
# Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
# express, or implied, to the maximum extent permitted by applicable
# law, without malicious intent or gross negligence; in no event may
# licensor, an author or contributor be held liable for any indirect
# or other damage, or direct damage except proven a consequence of a
# direct error of said person and intended use of this work, loss or
# other issues arising in any way out of its use, even if advised of
# the possibility of such damage or existence of a defect.
#-
# Shell madness to automerge conflicts.
# Its use is highly *DEPRECATED* and *ONLY IF YOU KNOW WHAT YOU
# ARE DOING* you are allowed to use this script.
# Manual post-processing of this file's output is needed.

T1=$(mktemp) || exit 1
T2=$(mktemp) || { rm -f $T1; exit 1; }
T3=$(mktemp) || { rm -f $T1 $T2; exit 1; }
T4=$(mktemp) || { rm -f $T1 $T2 $T3; exit 1; }
T5=$(mktemp) || { rm -f $T1 $T2 $T3 $T4; exit 1; }
trap 'rm -f $T1 $T2 $T3 $T4 $T5 ; exit 0' 0
trap 'rm -f $T1 $T2 $T3 $T4 $T5 ; exit 1' 1 2 3 5 13 15

fgrep -A 4 '<<<<<<< ' "$1" >$T1
if [ $(wc -l <$T1) -ne 5 ]; then
	echo More than one conflict in "$1", exiting
	exit 1
fi

head -2 $T1 | tail -1 >$T2
head -3 $T1 | tail -1 >$T3
head -4 $T1 | tail -1 >$T4
head -5 $T1 | tail -1 >$T5

fgrep '>>>>>>> ' $T5 || {
	echo Not a one-line conflict in "$1", exiting
	exit 1
}

fgrep '=======' $T3 || {
	echo Not a one-line conflict in "$1", exiting
	exit 1
}

OLD="$(<$T2)"
NEW="$(<$T4)"

OLDS="$(echo "$OLD" | sed \
	-e 's/\$''Id: .*\$//' \
	-e 's/\$''CVSHeader: .*\$//' \
	-e 's/\$''OpenBSD: .*\$//' \
	-e 's/\$''FreeBSD: .*\$//' \
	-e 's/\$''NetBSD: .*\$//' \
	-e 's/\$''ekkoBSD: .*\$//' \
	-e 's/\$''MirBSD: .*\$//' \
	-e 's/\$''MirOS: .*\$//' \
	-e 's/\$''XFree86: .*\$//' \
	-e 's/\$''From: .*\$//' \
	-e 's/\$''Revision: .*\$//' \
	-e 's/\$''Author: .*\$//' \
	-e 's/\$''Header: .*\$//' \
	-e 's/\$''Date: .*\$//' \
	-e 's/\$''Name: .*\$//')"
NEWS="$(echo "$NEW" | sed \
	-e 's/\$''Id: .*\$//' \
	-e 's/\$''CVSHeader: .*\$//' \
	-e 's/\$''OpenBSD: .*\$//' \
	-e 's/\$''FreeBSD: .*\$//' \
	-e 's/\$''NetBSD: .*\$//' \
	-e 's/\$''ekkoBSD: .*\$//' \
	-e 's/\$''MirBSD: .*\$//' \
	-e 's/\$''MirOS: .*\$//' \
	-e 's/\$''XFree86: .*\$//' \
	-e 's/\$''From: .*\$//' \
	-e 's/\$''Revision: .*\$//' \
	-e 's/\$''Author: .*\$//' \
	-e 's/\$''Header: .*\$//' \
	-e 's/\$''Date: .*\$//' \
	-e 's/\$''Name: .*\$//')"

if [ x"$OLDS" != x"$NEWS" ]; then
	echo Old string "($OLDS)" is not identical
	echo to new string "($NEWS)" in "$1", exiting
	exit 1
fi

ed -s "$1" <<-EOF
	/<<<<<<< /d
	d
	/=======/d
	/>>>>>>> /d
	wq
EOF
