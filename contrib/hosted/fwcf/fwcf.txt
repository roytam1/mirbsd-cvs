                 FreeWRT Configuration Filesystem
                 ================================

                      Specification Document

                                  Version 0.93 - 23 September 2006


Copyright (c) 2006
	Thorsten Glaser <tg@mirbsd.de>

This specification is subject to change. Users are advised to wait
for the release of the specification version 1.0 released together
with the first version of the configfs tool.

Licensee is hereby permitted to deal in this work without restric-
tion, including unlimited rights to use, publicly perform, modify,
merge, distribute, sell, give away or sublicence, provided all co-
pyright notices above, these terms and the disclaimer are retained
in all redistributions or reproduced in accompanying documentation
or other materials provided with binary redistributions.

Advertising materials mentioning features or use of this work must
display the following acknowledgement:
	This product includes material provided by Thorsten Glaser
	for the FreeWRT Project.

Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
express, or implied, to the maximum extent permitted by applicable
law, without malicious intent or gross negligence; in no event may
licensor, an author or contributor be held liable for any indirect
or other damage, or direct damage except proven a consequence of a
direct error of said person and intended use of this work, loss or
other issues arising in any way out of its use, even if advised of
the possibility of such damage or existence of a defect.


1. Abstract
-----------

FreeWRT is an operating system for embedded devices. At the moment,
it provides a uClibc/GNU/Linux-based operating environment for mips-
based hardware routers, e.g. from Linksys or Asus.

FreeWRT operates on flash memory and as such is under constraints to
reduce the amount of write operations to the root filesystem, because
flash memory has limited lifetime. Changing the file-based configura-
tion in /etc, however, often requires a fair amount of write opera-
tions; furthermore, usual reconfiguration operations change more than
only one file, possibly erasing and re-writing the same flash memory
block several times. In addition, in between these changes, the sy-
stem is in an inconsistent state, and, if the configuration changes
render the system unusable, a simple reboot will not be able to fix
it, a full reflash and reconfiguration is required.

My proposed implementation will present /etc as a memory filesystem,
loaded at boot with the content of the underlying /etc from the de-
fault root filesystem (usually on squashfs or jffs2), then populated
with additional files read from a custom flash partition in the be-
low documented format. Changes to /etc will never be reflected in the
underlying root filesystem, and the fwcf partition is only updated by
a userland programme to be run manually.


2. Implementation details
-------------------------

The size of the flash partition has been set by the FreeWRT project
to 128 KiB (usually two flash blocks). A custom flash map driver is
going to be added to the FreeWRT kernel before the import of fwcf.

The command-line utility will support three operations:
* fwcf setup		to be run by the rc bootup script early
* fwcf commit		similar to Cisco 'write'
* fwcf erase		similar to Cisco 'erase startup-config'


2.1. Operation of 'fwcf setup'
------------------------------

This command will first remap the existing /etc (via mount --bind)
to /var/fwcf/root. Then, it will create a memory filesystem (tmpfs)
at /var/fwcf/tmp and populate it with all files from /var/fwcf/root.
Now, the fwcf flash partition will be read, the format and checksum
verified and data extracted to /var/fwcf/tmp, possibly overwriting
pre-existing files. Then, the /var/fwcf/tmp filesystem will be re-
bound to /etc and, if possible, the mountpoint at /var/fwcf/tmp un-
loaded.

Data from the end of the fwcf data in the flash partition to the
end of the 64 KiB block the end of data resides in will be written
to /dev/urandom.


2.2. Operation of 'fwcf commit'
-------------------------------

A new memory filesystem (tmpfs) will be createt at /var/fwcf/tmp
and populated with the data currently in /etc. Then, all files
with exactly the same content in /var/fwcf/root will be removed
from /var/fwcf/tmp. Any remaining files will be packed into the
fwcf format documented below and written to the flash partition,
padded to a multiple of 64 KiB with data read from /dev/urandom.

The first public release will not remove any files before gene-
rating the compressed data, and only support directories, files
and symbolic links, for simplicity. Stored hard links and other
file types will be skipped, because their storage format is al-
ready specified (as "reserved for future use"), and ignored. No
inode or file-sequential-number information is read or written.


2.3. Operation of 'fwcf erase'
------------------------------

In theory, just writing a NUL byte to the beginning of the flash
partition would suffice. However, this requires an mtd erase and
flash operation of one entire flash block (usually 64 KiB), so an
empty fwcf filesystem padded with random data to the next 64 KiB
will be written instead, for the added benefit of improving the
quality of the kernel PRNG even over total reconfigurations.


3. Structure of the fwcf data
-----------------------------

All data is written in little-endian format.

The fwcf data begins at offset 0 in the flash partition, with the
magic bytes "FWCF" (0x46435746).

The next doubleword (four bytes) is the "outer length" of the fwcf
data, including the header (including the magic bytes and the length
information itself) and the trailer (checksum), but not the padding;
the length takes up the lower 24 bits of this doubleword. The upper
8 bits are the (major) version of the specification adhered to, i.e.
0x00 for this document. This information shall be true for all ver-
sions of this specification in order to enable the fwcf command-line
utility to perform as follows: it is not required to process any non-
native versions of fwcf data, but even if reading a different version,
the random data used for the padding should be written to /dev/urandom.

The following information is dependent on the version of the speci-
fication.

The next doubleword (starting at offset 8) is the "inner length" of
the compressed fwcf data (lower 24 bit), or'd with the identification
number of the compression algorithm used (upper 8 bit). Note this ef-
fectively limits both the uncompressed and the compressed size of an
fwcf filesystem to 2^24 bytes = 16 MiB. Since the filesystem is de-
signed for /etc, this limitation is not expected to be troublesome.

After this, at offset 12, the compressed data starts. It is padded
to the next 4-byte boundary with zeroes.

The next doubleword is the ADLER-32 checksum (as defined by libz)
of all previous data, starting from the magic bytes at offset 0,
ending with the zero-padding of the compressed data.


4. Compression algorithm allocation
-----------------------------------

An implementation is only required to be able to use exactly one of
the compression algorithms defined below, but it is not required to
implement a specific algorithm. Conversion might be achieved by un-
and repacking the data, or using an fwcf implementation with multi-
ple algorithms. Every implementation, however, is required to offer
at least one of the non-private algorithms below.

This draft of the specification offers two compression algorithms:

0x00 = plain uncompressed data
0x01 = zlib deflate compression as per http://www.zlib.net/
0x02 = LZO1X-999 as per http://www.oberhumer.com/opensource/lzo/

Algorithm codes from 0xC0 to 0xFF are available for private use.


5. Structure of the fwcf filesystem
-----------------------------------

The compressed/inner data consists of a byte stream without padding
applied, in the following format:

entry ::= file-entry | NUL-byte

file-entry ::= pathname NUL-byte attributes NUL-byte data

attributes ::= attribute ( attribute )*

The pathname is a POSIX pathname, i.e. can contain any character
except NUL. Directories are separated with '/' and automatically
created by the extraction tool if required. If the first octet
of the pathname is a NUL byte (i.e. it is of zero length), the
end of the filesystem has been reached. Any data read afterwards
MUST be discarded for security reasons.

Attributes consist of a one-byte identifier, which is usually a
letter, and a zero-to-multiple-bytes payload. If the identifier
is a letter, its lowercase and uppercase forms denote the same
attribute with a different payload length.

The raw file data is not padded or aligned; its length is an at-
tribute. Alternate streams / forks are not supported.


6. Currently defined attributes
-------------------------------

0x01	this file is a block special device (*1)
	no payload
	reserved for future use

0x02	this file is a character special device (*1)
	no payload
	reserved for future use

0x03	this file is a symbolic link (*2)
	no payload

0x04	this file is a hard link to another file (*1) (*4)
	no payload
	reserved for future use

0x05	this file is a directory (*4)
	no payload

0x10	modification time of the entry
	optional
	ignored for symbolic links
	payload length: 32 bit

g/G	group of the file (numeric GID)
	optional
	payload length: lowercase = 8 bit, uppercase = 32 bit

i/I	"inode" of the file (*1) (*4)
	required if this file is a hard link source or target
	optional (ignored) otherwise
	payload length: lowercase = 8 bit, uppercase = 16 bit
	reserved for future use

m/M	mode_t / permissions of the file (*3)
	optional
	ignored for symbolic links
	payload length: lowercase = 16 bit, uppercase = 32 bit

o/O	owner of the file (numeric UID)
	optional
	payload length: lowercase = 8 bit, uppercase = 32 bit

s/S	size of the file
	for files and symbolic links: mandatory
	for directories, device nodes and hard links: forbidden
	payload length: lowercase = 8 bit, uppercase = 24 bit

*1) These identifiers are defined in this specification for future
    use; implementations do not need to support them at this time.

*2) The name of the target is the data, thus, size is required.

*3) Defaults to 0 if not used (for security reasons), so labelling
    it as "optional" is probably a farce ;)

*4) Implementing hard links and directories is, of course, optional
    for the writer.


7. Miscellaneous
----------------

The initial idea for a "configuration filesystem" based upon the
Linux FUSE kernel module has been communicated to me by Waldemar
Brodkorb, FreeWRT Project Founder. After a discussion with him I
decided on the archive/userland tool layout outlined in sections
1 and 2 above.

For now, nodes other than directories, files, and symbolic links
are not supported.

Development of FWCF is hosted in the CVS repository of the MirOS
project. Anonymous read-only CVS access is available at the root
":ext:anoncvs@anoncvs.mirbsd.org:/cvs" using password "anoncvs",
SSH on port 22; module "fwcf". CVSweb is also available, e.g. at
http://cvs.mirbsd.de/contrib/hosted/fwcf/ or its mirrors.

FWCF will be released under the same licence terms as the speci-
fication, but without the advertising clause. The author however
would really appreciate users to credit his name and that of the
FreeWRT Project in derived works and/or links to the CVS reposi-
tory of the original source.

_______________________________________________________________________
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.7 2006/09/23 18:41:15 tg Exp $
