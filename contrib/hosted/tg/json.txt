My notes on JSON
================

Compiled from both ECMA 262 (normative) and RFC 4627 (Informational)
for tarent Gesellschaft fuer Softwareentwicklung und IT-Beratung mbH.

An implementation (no guarantees for completeness / correctness) is at:
https://evolvis.org/scm/viewvc.php/evolvis/trunk/gforge_base/evolvisforge/gforge/common/include/minijson.php?view=log


Any JSON (JavaScript Object Notation) text shall be encoded in Unicode.

MIME: application/json
File extension: .json
Macintosh code: TEXT
default encoding and content-transfer-encoding: UTF-8, 8bit
alternative: UTF-16 and UTF-32, binary

A JSON text consists of an optional Unicode BOM <U+FEFF> in either
UTF-16 variant (or UTF-8) and one expansion of the syntactical goal
either JSON<RFC> or JSON<ECMA> (or, probably, their subset).


primitive types:
- string
- number (can emit integral, fractional, exponential number or null literal)
- boolean (literal: true, false)
- null (literal: null) -- also: NaN, -Inf, +Inf (infinite numbers)
structured types:
- object (associative array)
- array (indexed array, 0-based, no gaps)

Rules for associative arrays:
- keys SHOULD be unique (recommend: overwrite dups with last one)
- order of keys is unsorted but usually preserving


/* lexical grammar (case-sensitive) */

whitespace ::= <0x09> | <0x0A> | <0x0D> | <0x20>

string ::= '"' *( stringcharacter ) '"'
stringcharacter ::= literalcharacter | escapesequence
literalcharacter ::= <0x20..D7FF except '"', '\'> | <E000..FFFD>
escapesequence ::= '\'			// ''		: no production
	( '"'				// '"'		: unescape
	| '/'				// '/'		: unescape
	| '\'				// '\'		: unescape
	| 'b'				// <0x08>	: as in C
	| 'f'				// <0x0C>	: as in C
	| 'n'				// <0x0A>	: as in C
	| 'r'				// <0x0D>	: as in C
	| 't'				// <0x09>	: as in C
	| 'u' 4( hexdigit )		// : Unicode BMP codepoint
	)
hexdigit ::= '0'..'9' | 'a'..'f' | 'A'..'F'	// : case-insensitive

number ::= ?( '-' ) decimalnumber ?( '.' decimaldigits ) ?( exponent )
decimaldigits ::= +( '0'..'9' )
decimalnumber ::= '0' | ( '1'..'9' ?( decimaldigits ) )
exponent ::= 'e' | 'E' ?( '+' | '-' ) decimaldigits

literalnull ::= "null"
literalbool ::= "true" | "false"

/* syntactical grammar, separate tokens by *( whitespace ) */

JSON<RFC> ::= Object | Array		// : goal element, RFC 4627
JSON<ECMA> ::= Value			// : goal element, ECMA 262

Value ::= literalnull | literalbool | Object | Array | string | Number
Array ::= '[' ?( Value *( ',' Value ) ) ']'
Object ::= '{' ?( Member *( ',' Member ) ) '}'
Member ::= string /* key */ ':' Value
/* for parsing, Number=number; this is for emitting */
Number ::= literalnull /* not a finite number */ | number

/* token separation considerations */
literalnull, literalbool, number are always separated by the grammar
so neither next element lookup nor mandatory whitespace are required.

Both lexems/tokens and the content (keys and values) are case-sensitive,
although some decoders read e.g. literalnull or \n case-insensitively.


/* when emitting a Number */
- ECMA: NaN and both positive and negative infinity emit a literalnull
- RFC: NaN and infinities are disallowed (yield undefined value?)
- negative 0 emits a "0" even though "-0" is valid by the grammar
- values other than -0 have the identity mapping

/* when emitting a string */
- escape '"\' with \
- escape BS/FF/NL/CR/HT with \+letter
- escape <0x00..0x1F> with \uNNNN
- pass <0x7F> and <0080..009F> literally!
- pass everything else literally
- for codepoints outside the BMP, emit the UTF-16 surrogate pair as
  escapes \uNNNN\uNNNN (do not pass them literally)
- any character MAY be escaped (as unicode)

/* when emitting an Object or Array */
- if the object/array is cyclical, throw an error
- acyclical nesting depth is unlimited
- Objects are in for-in enumeration order, if any, otherwise unsorted
- Arrays are in numerical order, from 0 to nelems-1, with no gaps
- 'undefined', functions, etc. produce an undefined value
- Objects do not emit slots whose value is undefined at all!
- Arrays emit undefined values as literalnull

_____________________________________________________________________
$MirOS: contrib/hosted/tg/json.txt,v 1.2 2010/03/27 17:45:44 tg Exp $
