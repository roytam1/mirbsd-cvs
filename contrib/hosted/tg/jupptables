#!/bin/mksh
# $MirOS: contrib/hosted/tg/jupptables,v 1.2 2017/01/11 00:34:02 tg Exp $
#-
# Â© 2013, 2017 mirabilos <m@mirbsd.org>
#-
# Warning: this is SLOW! Generates tables for jupp from the UCD.

set -x
set -e
cat >jupptables.c <<'EOCI'
/* Copyright (C) 1999-2001 Free Software Foundation, Inc.
   This file is part of the GNU UTF-8 Library.

   The GNU UTF-8 Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Library General Public License as
   published by the Free Software Foundation; either version 2 of the
   License, or (at your option) any later version.

   The GNU UTF-8 Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with the GNU UTF-8 Library; see the file COPYING.LIB.  If not,
   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* Generate tables for towlower, towupper, and the isw* functions. */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct unicode_attribute {
  const char* name;           /* Character name */
  const char* category;       /* General category */
  const char* combining;      /* Canonical combining classes */
  const char* bidi;           /* Bidirectional category */
  const char* decomposition;  /* Character decomposition */
  const char* decdigit;       /* Decimal digit value */
  const char* digit;          /* Digit value */
  const char* numeric;        /* Numeric value */
  int mirrored;               /* mirrored */
  const char* oldname;        /* Old Unicode 1.0 name */
  const char* comment;        /* Comment */
  unsigned int upper;         /* Upper case equivalent mapping */
  unsigned int lower;         /* Lower case equivalent mapping */
  unsigned int title;         /* Title case equivalent mapping */
};

#define NONE (~(unsigned int)0)

struct unicode_attribute unicode_attributes [0x110000];

static void fill_attribute (unsigned int i,
                            const char* field1, const char* field2,
                            const char* field3, const char* field4,
                            const char* field5, const char* field6,
                            const char* field7, const char* field8,
                            const char* field9, const char* field10,
                            const char* field11, const char* field12,
                            const char* field13, const char* field14)
{
  struct unicode_attribute * uni;

  if (i >= 0x110000) {
    fprintf(stderr, "index too large\n");
    exit(1);
  }
  if (strcmp(field2,"Cs") == 0)
    return;
  uni = &unicode_attributes[i];
  uni->name = strdup(field1);
  uni->category = (field2[0]=='\0' ? "" : strdup(field2));
  uni->combining = (field3[0]=='\0' ? "" : strdup(field3));
  uni->bidi = (field4[0]=='\0' ? "" : strdup(field4));
  uni->decomposition = (field5[0]=='\0' ? "" : strdup(field5));
  uni->decdigit = (field6[0]=='\0' ? "" : strdup(field6));
  uni->digit = (field7[0]=='\0' ? "" : strdup(field7));
  uni->numeric = (field8[0]=='\0' ? "" : strdup(field8));
  uni->mirrored = (field9[0]=='Y');
  uni->oldname = (field10[0]=='\0' ? "" : strdup(field10));
  uni->comment = (field11[0]=='\0' ? "" : strdup(field11));
  uni->upper = (field12[0]=='\0' ? NONE : strtoul(field12,NULL,16));
  uni->lower = (field13[0]=='\0' ? NONE : strtoul(field13,NULL,16));
  uni->title = (field14[0]=='\0' ? NONE : strtoul(field14,NULL,16));
}

static int getfield (FILE* f, char* buffer, int delim)
{
  int c;
  for (; (c = getc(f)), (c != EOF && c != delim); )
    *buffer++ = c;
  if (c == EOF) return 0;
  *buffer = '\0';
  return 1;
}

static void fill_attributes (const char* unicodedata_filename)
{
  unsigned int i, j;
  FILE* f;
  char field0 [100];
  char field1 [100];
  char field2 [100];
  char field3 [100];
  char field4 [100];
  char field5 [100];
  char field6 [100];
  char field7 [100];
  char field8 [100];
  char field9 [100];
  char field10 [100];
  char field11 [100];
  char field12 [100];
  char field13 [100];
  char field14 [100];
  int lineno = 0;

  for (i = 0; i < 0x110000; i++)
    unicode_attributes[i].name = NULL;

  f = fopen(unicodedata_filename, "r");
  if (!f) {
    fprintf(stderr, "error during fopen of `%s'\n", unicodedata_filename);
    exit(1);
  }
  for (;;) {
    int n;
    lineno++;
    n = getfield(f, field0, ';') + getfield(f, field1, ';')
        + getfield(f, field2, ';') + getfield(f, field3, ';')
        + getfield(f, field4, ';') + getfield(f, field5, ';')
        + getfield(f, field6, ';') + getfield(f, field7, ';')
        + getfield(f, field8, ';') + getfield(f, field9, ';')
        + getfield(f, field10, ';') + getfield(f, field11, ';')
        + getfield(f, field12, ';') + getfield(f, field13, ';')
        + getfield(f, field14, '\n');
    if (n == 0)
      break;
    if (n != 15) {
      fprintf(stderr, "short line in `%s':%d\n", unicodedata_filename, lineno);
      exit(1);
    }
    i = strtoul(field0,NULL,16);
    if (field1[0] == '<'
        && strlen(field1) >= 9
        && !strcmp(field1+strlen(field1)-8, ", First>")) {
      /* Deal with a range. */
      lineno++;
      n = getfield(f, field0, ';') + getfield(f, field1, ';')
          + getfield(f, field2, ';') + getfield(f, field3, ';')
          + getfield(f, field4, ';') + getfield(f, field5, ';')
          + getfield(f, field6, ';') + getfield(f, field7, ';')
          + getfield(f, field8, ';') + getfield(f, field9, ';')
          + getfield(f, field10, ';') + getfield(f, field11, ';')
          + getfield(f, field12, ';') + getfield(f, field13, ';')
          + getfield(f, field14, '\n');
      if (n != 15) {
        fprintf(stderr, "missing end range in `%s':%d\n", unicodedata_filename, lineno);
        exit(1);
      }
      if (!(field1[0] == '<'
            && strlen(field1) >= 8
            && !strcmp(field1+strlen(field1)-7, ", Last>"))) {
        fprintf(stderr, "missing end range in `%s':%d\n", unicodedata_filename, lineno);
        exit(1);
      }
      field1[strlen(field1)-7] = '\0';
      j = strtoul(field0,NULL,16);
      for (; i <= j; i++)
        fill_attribute(i, field1+1, field2, field3, field4, field5, field6,
                          field7, field8, field9, field10, field11, field12,
                          field13, field14);
    } else {
      /* Single character line */
      fill_attribute(i, field1, field2, field3, field4, field5, field6,
                        field7, field8, field9, field10, field11, field12,
                        field13, field14);
    }
  }
  if (ferror(f)) {
    fprintf(stderr, "error from ferror of `%s'\n", unicodedata_filename);
    exit(1);
  }
  if (fclose(f)) {
    fprintf(stderr, "error during fclose of `%s'\n", unicodedata_filename);
    exit(1);
  }
}

static unsigned int uppercase (unsigned int ch)
{
  if (unicode_attributes[ch].name != NULL && unicode_attributes[ch].upper != NONE)
    return unicode_attributes[ch].upper;
  else
    return ch;
}

static unsigned int lowercase (unsigned int ch)
{
  if (unicode_attributes[ch].name != NULL && unicode_attributes[ch].lower != NONE)
    return unicode_attributes[ch].lower;
  else
    return ch;
}

static unsigned int titlecase (unsigned int ch)
{
  if (unicode_attributes[ch].name != NULL && unicode_attributes[ch].title != NONE)
    return unicode_attributes[ch].title;
  else
    return ch;
}

/* Create toupper.h, used by libutf8. */
static void output_toupper_table (void)
{
  unsigned int ch;
  const char* filename = "toupper.h";
  FILE* f = fopen(filename, "w");
  if (!f) {
    fprintf(stderr, "error during fopen of `%s'\n", filename);
    exit(1);
  }
  for (ch = 0; ch < 0x110000; ++ch)
    if (uppercase(ch) != ch) {
      fprintf(f, "%04X %d\n", ch, (int)ch - (int)uppercase(ch));
    }
  if (ferror(f)) {
    fprintf(stderr, "error writing on `%s'\n", filename);
    exit(1);
  }
  if (fclose(f)) {
    fprintf(stderr, "error closing `%s'\n", filename);
    exit(1);
  }
}

/* Create tolower.h, used by libutf8. */
static void output_tolower_table (void)
{
  unsigned int ch;
  const char* filename = "tolower.h";
  FILE* f = fopen(filename, "w");
  if (!f) {
    fprintf(stderr, "error during fopen of `%s'\n", filename);
    exit(1);
  }
  for (ch = 0; ch < 0x110000; ++ch)
    if (lowercase(ch) != ch) {
      fprintf(f, "%04X %d\n", ch, (int)lowercase(ch) - (int)ch);
    }
  if (ferror(f)) {
    fprintf(stderr, "error writing on `%s'\n", filename);
    exit(1);
  }
  if (fclose(f)) {
    fprintf(stderr, "error closing `%s'\n", filename);
    exit(1);
  }
}

#define upper    1
#define lower    2
#define alpha    4
#define digit    8
#define xdigit  16
#define space   32
#define print   64
#define graph  128
#define blank  256
#define cntrl  512
#define punct 1024
#define alnum 2048

/* Create attribute.h, used by libutf8. */
static void output_attribute_table (void)
{
  unsigned int ch;
  const char* filename = "attribute.h";
  FILE* f = fopen(filename, "w");
  if (!f) {
    fprintf(stderr, "error during fopen of `%s'\n", filename);
    exit(1);
  }
  for (ch = 0; ch < 0x110000; ch++) {
    int attributes = 0;
    if ((uppercase(ch) == ch || titlecase(uppercase(ch)) == ch)
        && lowercase(ch) != ch)
      attributes |= upper;
    if (lowercase(ch) == ch && uppercase(ch) != ch)
      attributes |= lower;
    /* The OpenGroups's susv2/xbd/locale.html says only characters satisfying
       isupper() or islower() can have a nontrivial toupper() or tolower()
       mapping. */
    if ((attributes & (upper | lower)) == 0) {
      if (uppercase(ch) != ch)
        fprintf(stderr, "U%04x is not upper|lower but toupper(U%04x) = U%04x\n", ch, ch, uppercase(ch));
      if (lowercase(ch) != ch)
        fprintf(stderr, "U%04x is not upper|lower but tolower(U%04x) = U%04x\n", ch, ch, lowercase(ch));
    }
    if (unicode_attributes[ch].name != NULL
        && (unicode_attributes[ch].category[0] == 'L'
            || (attributes & (upper | lower)) != 0))
      attributes |= alpha;
    if ((((attributes & upper) != 0) || ((attributes & lower) != 0)) && ((attributes & alpha) == 0))
      fprintf(stderr, "U%04x is upper or lower but not alpha\n", ch);
#if 0
    if (unicode_attributes[ch].name != NULL
        && unicode_attributes[ch].category[0] == 'N'
        && unicode_attributes[ch].category[1] == 'd')
#else
    /* The OpenGroups's susv2/xbd/locale.html and Dinkumware's C lib reference
       say isdigit() may not return true for additional characters. */
    if (ch >= '0' && ch <= '9')
#endif
      attributes |= digit;
    if (((attributes & digit) != 0) && ((attributes & alpha) != 0))
      fprintf(stderr, "U%04x is both digit and alpha\n", ch);
    if (((attributes & digit) != 0) || (ch >= 'A' && ch <= 'F') || (ch >= 'a' && ch <= 'f'))
      attributes |= xdigit;
    if (ch == ' ' || ch == '\f' || ch == '\n' || ch == '\r' || ch == '\t' || ch == '\v')
      attributes |= space;
    /* Don't make U00A0 a space. Non-breaking space means that all programs
       should treat it like a punctuation character, not like a space. */
    if (unicode_attributes[ch].name != NULL
        && strcmp(unicode_attributes[ch].name, "<control>"))
      attributes |= print;
    if (((attributes & print) != 0) && ((attributes & space) == 0))
      attributes |= graph;
    if (ch == ' ' || ch == '\t')
      attributes |= blank;
    if (unicode_attributes[ch].name != NULL
        && !strcmp(unicode_attributes[ch].name, "<control>"))
      attributes |= cntrl;
    if (((attributes & graph) != 0)
        && ((attributes & alpha) == 0) && ((attributes & digit) == 0))
      /* This includes punctuation and symbols. */
      attributes |= punct;
    if (((attributes & alpha) != 0) || ((attributes & digit) != 0))
      attributes |= alnum;

	/* jupp specials */
	if (!strcmp(unicode_attributes[ch].bidi, "WS") && ch != 0x2007)
		attributes |= space;
	if (!strcmp(unicode_attributes[ch].category, "Zs") &&
	    ch != 0x00A0 && ch != 0x2007 && ch != 0x202F)
		attributes |= blank;
	switch (ch) {
	case 0x005F:
		attributes |= alpha;
		break;
	case 0x200B:
		attributes |= blank | space;
		break;
	case 0x2029:
		attributes |= space;
		/* FALLTHROUGH */
	case 0x2028:
		attributes |= cntrl;
		break;
	}

#define FNORD(upper) if (attributes & upper) fprintf(f, "echo >>%s.lst %04X\n", #upper, ch);
FNORD(upper)
FNORD(lower)
FNORD(alpha)
FNORD(digit)
FNORD(xdigit)
FNORD(space)
FNORD(print)
FNORD(graph)
FNORD(blank)
FNORD(cntrl)
FNORD(punct)
  }
  if (ferror(f)) {
    fprintf(stderr, "error writing on `%s'\n", filename);
    exit(1);
  }
  if (fclose(f)) {
    fprintf(stderr, "error closing `%s'\n", filename);
    exit(1);
  }
}

int main (int argc, char* argv[])
{
  if (argc != 2)
    exit(1);

  fill_attributes(argv[1]);

  output_toupper_table();
  output_tolower_table();
  output_attribute_table();

  return 0;
}
EOCI

# My parts are MirOS licenced. //mirabilos

rm -f *.lst *.h *.out
make -f /usr/share/mk/bsd.prog.mk PROG=jupptables.hlp SRCS=jupptables.c NOMAN=Yes __CRAZY=Yes
./jupptables.hlp UnicodeData.txt
mksh attribute.h
set +x
set +e
for file in *.lst; do
	print -ru2 "+ working on $file"
	set -A rangelo
	set -A rangehi
	typeset -Uui16 -Z9 rangelo[*] rangehi[*]
	integer nrange=0
	lastwc=-2
	rangelo[0]=-1
	while read wc; do
		wc=0x$wc
		if (( wc != (lastwc + 1) )); then
			(( rangehi[nrange] = lastwc ))
			(( rangelo[nrange] == -1 )) || (( nrange++ ))
			(( rangelo[nrange] = wc ))
		fi
		(( lastwc = wc ))
	done <"$file"
	(( rangehi[nrange++] = lastwc ))
	print -ru2 "+ parsed"
	exec >"$file.out"
	print "static const struct mb_ucsrange data_wctype_${file%.lst}[] = {"
	i=-1
	if [[ $file = print.lst ]]; then
		while (( ++i < nrange - 1 )); do
			if (( rangelo[i] < 0x2022 && rangehi[i] > 0x2022 )); then
				print '#ifdef __CYGWIN__'
				print '	/* WTF?! https://blogs.msdn.microsoft.com/oldnewthing/20070104-12/?p=28513 */'
				print "	{ ${rangelo[i]}, 0x2021 },"
				print "	{ 0x2023, ${rangehi[i]} },"
				print '#else'
				print "	{ ${rangelo[i]}, ${rangehi[i]} },"
				print '#endif'
			else
				print "	{ ${rangelo[i]}, ${rangehi[i]} },"
			fi
		done | sed 's/16#0\{0,2\}/0x/g'
	else
		while (( ++i < nrange - 1 )); do
			print "	{ ${rangelo[i]}, ${rangehi[i]} },"
		done | sed 's/16#0\{0,2\}/0x/g'
	fi
	print "	{ ${rangelo[nrange]}, ${rangehi[nrange]} }" | sed 's/16#0\{0,2\}/0x/g'
	print "};"
done
for file in tolower.h toupper.h; do
	print -ru2 "+ working on $file"
	set -A ch
	set -A rangelo
	set -A rangehi
	set -A rangecv
	typeset -Uui16 -Z9 rangelo[*] rangehi[*]
	integer ch[*] rangecv[*]
	integer nrange=0
	while read wc delta; do
		(( ch[0x$wc] = delta ))
	done <"$file"
	lastval=0
	lastwc=-2
	rangelo[0]=-1
	for wc in ${!ch[*]}; do
		if (( ((val = ch[wc]) != lastval) || (wc != (lastwc + 1)) )); then
			(( rangehi[nrange] = lastwc ))
			(( rangelo[nrange] == -1 )) || (( nrange++ ))
			(( rangelo[nrange] = wc ))
			(( rangecv[nrange] = val ))
		fi
		(( lastwc = wc ))
		(( lastval = val ))
	done
	(( rangehi[nrange++] = lastwc ))
	print -ru2 "+ parsed"
	exec >"$file.out"
	print "static const struct mb_ucsrange data_wcrange_${file%.h}[] = {"
	i=-1
	while (( ++i < nrange - 1 )); do
		print "	{ ${rangelo[i]}, ${rangehi[i]} },"
	done | sed 's/16#0\{0,2\}/0x/g'
	print "	{ ${rangelo[nrange]}, ${rangehi[nrange]} }" | sed 's/16#0\{0,2\}/0x/g'
	print "};"
	print "static const int data_wcdelta_${file%.h}[] = {"
	i=-1
	while (( ++i < nrange - 1 )); do
		print "	${rangecv[i]},"
	done
	print " ${rangecv[nrange]}"
	print "};"
done
print -u2 "+ done."
