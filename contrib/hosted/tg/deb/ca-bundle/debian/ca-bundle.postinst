#!/bin/sh
# $MirOS: contrib/hosted/tg/deb/ca-bundle/debian/ca-bundle.postinst,v 1.4 2011/09/06 20:18:40 tg Exp $

set -e

# This maintainer script can be called the following ways:
#
# * new-postinst "configure" [$most_recently_configured_version]
# The package is unpacked; all dependencies are unpacked and, when there
# are no circular dependencies, configured.
#
# * old-postinst "abort-upgrade" $new_version
# * conflictors-postinst "abort-remove" "in-favour" $package
#	$new_version
# * postinst "abort-remove"
# * deconfigureds-postinst "abort-deconfigure" "in-favour"
#	$failed_install_package $fip_version ["removing"
#	$conflicting_package $cp_version]
# The package is unpacked; all dependencies are at least Half-Installed,
# previously been configured, and not removed. In some error situations,
# dependencies may not be even fully unpacked.
#
# * postinst "triggered" "${triggers[*]}"
# For trigger-only calls, i.e. if "configure" is not called.

trigger_gcj_keystore() {
	# sharing a conffile with libgcj-common is impossible,
	# no matter whether we depend on it or not, so we must
	# ditch strict Policy here and ship ours, always
	mkdir -p /etc/java
	rm -f /etc/java/cacerts-gcj
	cp /usr/share/ca-bundle/keystore.gcj /etc/java/cacerts-gcj
}

case $1 in
configure)
	# on first installation
	if test -z "$2"; then
		rm -f /etc/ssl/certs/ca-certificates.crt* \
		    /etc/ssl/certs/java/cacerts
	fi

	# upgrade from ca-certificates-java package
	if [ -e /etc/ca-certificates/update.d/jks-keystore ]; then
		rm -f /etc/ca-certificates/update.d/jks-keystore
		rm -rf /etc/ssl/certs/java
	fi

	# create necessary directories
	mkdir -p /etc/ssl/certs/java

	# drop all broken symbolic links
	find /etc/ssl/certs -type l -print | while read f; do
		test -f "$f" || rm -f "$f"
	done

	# install the PEM certificate files (for OpenSSL)
	(cd /usr/share/ca-bundle/certs; for f in *; do
		if test -h /etc/ssl/certs/$f; then
			# drop any symlink to old packages
			r=$(readlink /etc/ssl/certs/$f)
			case $r in
			/usr/share/ca-bundle/*)
				rm -f /etc/ssl/certs/$f
				;;
			/usr/share/ca-certificates/*)
				rm -f /etc/ssl/certs/$f
				;;
			/usr/share/ca-certificates-java/*)
				rm -f /etc/ssl/certs/$f
				;;
			esac
			# keep any non-broken symlinks...
			if test -f /etc/ssl/certs/$f; then
				# ... to stuff not ours
				continue
			else
				rm -f /etc/ssl/certs/$f
			fi
		elif test -f /etc/ssl/certs/$f; then
			# keep any non-symlink files
			continue
		elif test -d /etc/ssl/certs/$f; then
			# keep any non-symlink dirs (oO?)
			continue
		fi
		ln -sf /usr/share/ca-bundle/certs/$f /etc/ssl/certs/$f
	done)

	# install the PEM certificate bundle (for GnuTLS)
	test -f /etc/ssl/certs/ca-certificates.crt || {
		rm -f /etc/ssl/certs/ca-certificates.crt*
		cp /usr/share/ca-bundle/ca-certificates.crt /etc/ssl/certs/
	}

	# install the JKS keystore if it did not exist (or first install)
	if test \! -s /etc/ssl/certs/java/cacerts; then
		rm -f /etc/ssl/certs/java/cacerts
		cp /usr/share/ca-bundle/keystore.jks /etc/ssl/certs/java/cacerts
	fi

	# handle the GCJ keystore
	trigger_gcj_keystore
	;;

abort-upgrade|abort-remove|abort-deconfigure)
	;;

triggered)
	# someone upgraded libgcj-common, time to put ours back
	trigger_gcj_keystore
	;;

*)
	echo >&2 "postinst called with unknown subcommand '$1'"
	exit 1
	;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
