#!/bin/mksh
# $MirOS: contrib/hosted/tg/deb/arngc/arngc,v 1.5 2013/10/24 09:32:36 tg Exp $
#-
# Copyright © 2011, 2013, 2014
#	Thorsten Glaser <tg@mirbsd.org>
# Copyright © 2012
#	Thorsten Glaser <t.glaser@tarent.de>
#
# Provided that these terms and disclaimer and all copyright notices
# are retained or reproduced in an accompanying document, permission
# is granted to deal in this work without restriction, including un‐
# limited rights to use, publicly perform, distribute, sell, modify,
# merge, give away, or sublicence.
#
# This work is provided “AS IS” and WITHOUT WARRANTY of any kind, to
# the utmost extent permitted by applicable law, neither express nor
# implied; without malicious intent or gross negligence. In no event
# may a licensor, author or contributor be held liable for indirect,
# direct, other damage, loss, or other issues arising in any way out
# of dealing in the work, even if advised of the possibility of such
# damage or existence of a defect, except proven that it results out
# of said person’s immediate fault when using the work as intended.

me=$(realpath "$0")
export PATH=/bin:/sbin:/usr/bin:/usr/sbin

if (( USER_ID )); then
	if [[ -n $arngc_FOO && $arngc_FOO = $arngc_BAR ]]; then
		print -u2 Error: need superuser
		exit 2
	fi
	arngc_FOO=$RANDOM$me$RANDOM$USER_ID$(date +$s)
	arngc_BAR=$arngc_FOO
	export arngc_FOO arngc_BAR
	exec sudo mksh "$me" "$@"
	print -u2 NOTREACHED
	exit 255
fi

case $1 {
(status)
	if ! pkill -USR1 rngd; then
		print -u2 no process running?
		exit 1
	fi
	print -u2 watch syslog for status
	exit 0
	;;
(stop)
	print -nu2 killing all rngd processes...
	if ! pkill rngd; then
		print -u2 none found
		exit 1
	fi
	print -u2 done
	exit 0
	;;
(start)
	;;
(*)
	print -ru2 "syntax: $me (start [server:port [threshold]]|stop|status)"
	exit 2
	;;
}

if opid=$(pgrep rngd); then
	print -ru2 Error: rngd already running on pid $opid
	exit 1
fi

if [[ ! -e /proc/self/fd/0 ]]; then
	print -u2 no stdin: /proc/self/fd/0
	exit 2
fi

threshold=3072
server=

if [[ -s /etc/arngc.cfg ]]; then
	while read key value; do
		case $key {
		(threshold)
			[[ $value = +([0-9]) ]] && \
			    (( value > 0 && value <= 4096 )) && \
			    threshold=$((value))
			;;
		(server)
			[[ $value = +([0-9]).+([0-9]).+([0-9]).+([0-9]):+([0-9]) ]] && \
			    server=$value
			;;
		}
	done </etc/arngc.cfg
fi

[[ $2 = +([0-9]).+([0-9]).+([0-9]).+([0-9]):+([0-9]) ]] && server=$2
value=$3; [[ $value = +([0-9]) ]] && (( value > 0 && value <= 4096 )) && threshold=$((value))

if [[ $server != +([0-9]).+([0-9]).+([0-9]).+([0-9]):+([0-9]) ]]; then
	print -u2 You must configure a server like 6.7.8.9:12345
	print -u2 either on the command line or in /etc/arngc.cfg
	exit 2
fi

if ! T=$(mktemp -d /tmp/XXXXXXXX) || [[ ! -d $T/. ]]; then
	print -u2 cannot create temporary directory
	exit 255
fi

use4=0
for prog in stunnel4 stunnel; do
	prog=$(whence -p $prog)
	[[ -n $prog && -x $prog ]] || continue
	x=$("$prog" -version 2>&1 | grep '^stunnel [0-9]')
	[[ $x = 'stunnel 4'* ]] || continue
	use4=1
	break
done
function doscript {
	print -r "server='$server' threshold='$threshold'"
	print -r "T='${T//\'/\'\\\'\'}'"
	print "function runtunnel {"
	if (( use4 )); then
		print -r "	prog='${prog//\'/\'\\\'\'}'"
		cat >"$T/control" <<-EOF
			client = yes
			connect = $server
		EOF
		print -r '	"$prog" "$T/control"'
	else
		print -r '	stunnel -c -r "$server"'
	fi
	cat <<-'EOF'
		}
		function runchain {
			/usr/lib/stunnel/arngc-slrd | runtunnel | \
			    rngd -f -r /proc/self/fd/0 -H 0.99 -B 2 \
			    -s 32 -W "$threshold" -t 300 -T 60
		}
		runchain </dev/urandom 2>&1 | logger -t arngc &
		sleep 60
		rm -rf "$T"
	EOF
}
doscript >"$T/arngc2"

echo $threshold >/proc/sys/kernel/random/write_wakeup_threshold
cd /
mksh -T- "$T/arngc2"
sleep 0.25
print -u2 It may take up to one minute to decide whether rngd works.
print -u2 Get statistics into syslog with: sudo pkill -USR1 rngd
exit 0
