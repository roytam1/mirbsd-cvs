My notes on JSON
================

Compiled from both ECMA 262 (normative) and RFC 4627 (Informational)
for tarent Gesellschaft fuer Softwareentwicklung und IT-Beratung mbH
with subsequent independent development in private. Updated via both
RFC 7159 and ECMA 404.

An implementation (no guarantees for completeness / correctness) is at:
https://evolvis.org/plugins/scmgit/cgi-bin/gitweb.cgi?p=evolvis-platfrm/evolvisforge.git;a=blob;f=src/common/include/minijson.php;hb=HEAD
That implementation ("minijson") was created for tarent solutions GmbH.
Everything else in here was independently made. Still credits to tarent
for sponsoring the initial development and giving it a reason.

More thoughts: https://www.mirbsd.org/permalinks/wlog-10_e20121201-tg.htm


Any JSON (JavaScript Object Notation) text shall be encoded in Unicode.

MIME: application/json
File extension: .json
Macintosh code: TEXT
default encoding and content-transfer-encoding: UTF-8, binary

former default: UTF-8, 8bit (no change)
deprecated alternative: UTF-16 and UTF-32, binary (deprecated)
+ note that the MIME type has no charset parameter, so signalling
  a non-UTF8 encoding is not possible

A JSON text, following a deprecated, optional, Unicode BOM U+FEFF,
consists of optional whitespace, exactly one expansion of the syn-
tactic goal Value, followed by optional whitespace. Compliant code
MUST NOT emit an Unicode BOM (using U+FEFF in the JSON text is, of
course, perfectly valid). RFC4627 limited interoperable JSON texts
to an Array or Object top-level element; RFC7159 lifts that.


primitive types that can be represented in JSON:
- string (Unicode; not binary-safe)
  + usually UTF-16, but no surrogate integrity guaranteed
- number (can emit integral, fractional, exponential number or null literal)
- boolean (literal: true, false)
- null (literal: null) -- also: NaN, -Inf, +Inf (infinite numbers)
structured types:
- object (associative array)
- array (indexed array, 0-based, no gaps)

JSON basic data types:
- literal null (also representing a non-number)
- boolean (literal true, literal false)
- integral Number
  + IEEE 754 makes [-2^53+1; 2^53-1] interoperable
- floating-point Number (decimal fractional with decimal exponent)
  + RFC7159 says IEEE 754 "double" are interoperable
- String
- Object (associative array)
- Array (zero-based non-sparse indexed array)

Rules for associative arrays:
- keys SHOULD be unique (RFC7159 says duplicates are not interoperable)
- order of keys is unsorted (rarely preserving; usually not visible)
Strict rules for associative arrays:
- the last element wins in case of duplicates
- keys are sorted ASCIIbetically (read: in numerically ascending order
  of their Unicode BMP codepoints (UTF-16 encoded)) before emitting
- this implies that keys are unique when emitted
- and that a round-trip is not order-preserving but the order is stable
- rationale for this: CVE-2011-4815 (in short: we MUST NOT leak the
  internal order if the internal representation of an associative array
  is a hash table that does not preserve order of addition)


/* lexical grammar (case-sensitive) */

whitespace ::= <0x09> | <0x0A> | <0x0D> | <0x20>

string ::= '"' *( stringcharacter ) '"'
stringcharacter ::= literalcharacter | escapesequence
literalcharacter ::= <0x20..D7FF except '"', '\'> | <E000..FFFD>
					// : RFC7159 permits ..10FFFF
escapesequence ::= '\'			// ''		: no production
	( '"'				// '"'		: unescape
	| '/'				// '/'		: unescape
	| '\'				// '\'		: unescape
	| 'b'				// <0x08>	: as in C
	| 'f'				// <0x0C>	: as in C
	| 'n'				// <0x0A>	: as in C
	| 'r'				// <0x0D>	: as in C
	| 't'				// <0x09>	: as in C
	| 'u' 4( hexdigit )		// : Unicode BMP codepoint
	)
hexdigit ::= '0'..'9' | 'a'..'f' | 'A'..'F'	// : case-insensitive

number ::= ?( '-' ) decimalnumber ?( '.' decimaldigits ) ?( exponent )
decimaldigits ::= +( '0'..'9' )
decimalnumber ::= '0' | ( '1'..'9' ?( decimaldigits ) )
exponent ::= 'e' | 'E' ?( '+' | '-' ) decimaldigits

literalnull ::= "null"
literalbool ::= "true" | "false"

/* syntactical grammar */

JSON ::= *( whitespace ) Value *( whitespace )		// : goal element

/*
 * insignificant *( whitespace ) permitted explicitly between structural
 * tokens ('[', ',', ']', '{', '}', and ':') and literal tokens
 * (literalnull, literalbool), and implicitly (by the grammar) around
 * any Value (Object, Array, string, Number) or Member
 */

Value ::= literalnull | literalbool | Object | Array | string | Number
Array ::= '[' ?( Value *( ',' Value ) ) ']'
Object ::= '{' ?( Member *( ',' Member ) ) '}'
Member ::= string /* key */ ':' Value
/* for parsing, Number=number; this is for emitting */
Number ::= literalnull /* not a finite number */ | number

/* token separation considerations */
literalnull, literalbool, number are always separated by the grammar
so neither next element lookup nor mandatory whitespace are required.

Both lexems/tokens and the content (keys and values) are case-sensitive,
although some decoders read e.g. literalnull or \n case-insensitively.
RFC7159 allows parsers to accept such extensions, but we urge to fail
parsing the document in such cases instead (ECMA-262 explicitly forbids
them; ECMA-404 is silent on this but forbids them for conformant texts).

To add insult to injury, RFC4627 listed ECMA-262 as normative reference;
RFC7159 lists ECMA-262 and ECMA-404 as informative only.

/* security considerations */
- ensure no invalid things (e.g. unencoded SMP characters) show up
- according to ECMA-262, RFC4627 allows a parser to accept extensions
  (possibly, but not limited to, different numerical formats, writing
  Object keys with apostrophes or unescaped, allowing trailing commata
  in Object and Array definitions, allowing comments, etc.); this MUST
  NOT be done; be strict and anal as per the standard. (See above.)
- a String is a sequence of arbitrary 16-bit Unicode codepoints, that
  is, \u0000 \uFFFE \uFFFF and loose UTF-16 surrogates are valid, since
  the base language uses (UCS-2) Unicode
  + RFC7159 warns that codes that are not valid Unicode characters,
    such as loose surrogares, are not interoperable and may cause faults
    (they are allowed since earlier versions of Unicode, BMP-only,
    did not yet have surrogates, did not reserve the range thus)
  + we wish to forbid \u0000 (NUL) as some environments use C strings
    (but the RFC doesn't recognise this as interoperability problem)
  + we request to forbid \uFFFE and \uFFFF, as they are > WCHAR_MAX
  + see below about 21-bit Unicode codepoints and RFC7159 badness
- impose a nesting depth limit when reading


/* when emitting a Number */
- ECMA: NaN and both positive and negative infinity emit a literalnull
- RFC: NaN and infinities are disallowed (yield undefined value?)
  (most common implementations seem to use the RFC and interpret it as
  literally raising an error if they are encountered; support for them
  as literal values is a common extension, but *we* stick to ECMA!)
- negative 0 emits a "0" even though "-0" is valid by the grammar
- values other than -0 have the identity mapping

/* when emitting a string */
- escape '"' and '\' with \
- escape BS/FF/NL/CR/HT with \+letter
- escape <0x00..0x1F> with \uNNNN
  (except <0x00> should never happen)
- pass <0x7F> and <0080..009F> literally!
  + you may wish to escape them though
- for codepoints outside the BMP, emit the UTF-16 surrogate pair as
  escapes \uNNNN\uNNNN (do not pass them literally)
  + RFC7159 permits and suggests JSON generators to not encode them
    but keep them as literal 4-octet UTF-8 forms; an attempt to tell
    them about the wrongness and interop problem as erratum was rejected
- pass everything else (up to <FFFD>) literally
  (<FFFE> and <FFFF> should never happen either)
  + U+2028 and U+2029 SHOULD be escaped, they are not valid in
    literal strings in ECMAscript (but in JSON)
- any character MAY be escaped (as unicode, not octet)
  + string comparison and other operations must operate on the unencoded form,
    i.e. operate on each UCS-2 codepoint sequentially, for interoperability

/* when emitting an Object or Array */
- if the object/array is cyclical, throw an error
- acyclical nesting depth is unlimited (implementations SHOULD impose a limit)
- (ECMA says: Objects are in for-in enumeration order, if any, otherwise unsorted)
- Objects are ASCIIbetically sorted by their keys
  (to avoid CVE-2011-4815 and because JSON is an interchange format)
- Arrays are in numerical order, from 0 to nelems-1, with no gaps
- (ECMAscript only: 'undefined', functions, etc. produce an undefined value)
- Objects do not emit slots whose value is undefined at all! (but slots with null)
- Arrays emit undefined values as literalnull

___________________________________________________________________________________
$MirOS: contrib/hosted/tg/code/MirJSON/json.txt,v 1.6 2014/11/26 12:01:47 tg Exp $
