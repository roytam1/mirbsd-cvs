# (cd /; sudo -u zufall env HOME=~zufall mksh -T- /usr/mpkg/bin/sirc -d -q -X -l ~zufall/.etc/sirc/randexBot.pdpc -i "RANDEX bot in sirc" randexBot calkins.freenode.net:s7000)
# ADJUSTME set the paths to your liking and replace the other items:
# ADJUSTME randexBot -> your nick
# ADJUSTME calkins.freenode.net s 7000 -> ircserver, ssl on, port
# SSL ports are: Freenode 7000, Testnet 9003, OFTC 9999, Polska 6669
#-
# $MirOS: src/share/misc/licence.template,v 1.28 2008/11/14 15:33:44 tg Rel $
#-
# Copyright (c) 2009, 2010
#	Thorsten Glaser <tg@mirbsd.org>
#
# Provided that these terms and disclaimer and all copyright notices
# are retained or reproduced in an accompanying document, permission
# is granted to deal in this work without restriction, including un-
# limited rights to use, publicly perform, distribute, sell, modify,
# merge, give away, or sublicence.
#
# This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
# the utmost extent permitted by applicable law, neither express nor
# implied; without malicious intent or gross negligence. In no event
# may a licensor, author or contributor be held liable for indirect,
# direct, other damage, loss, or other issues arising in any way out
# of dealing in the work, even if advised of the possibility of such
# damage or existence of a defect, except proven that it results out
# of said person's immediate fault when using the work as intended.
#-
# randexBot sample implementation for MirSirc (which has problems,
# e.g. doesn't handle disconnects well; IF it reconnects it drops
# SSL for example; doesn't handle renames; doesn't keep a seedfile
# which means it needs to run on MirBSD or Windows with pushk, â€¦)
# XXX note all lines with ADJUSTME

# ADJUSTME number of hours for log rotation
my $loghours = 12;
# ADJUSTME (2) query intervals
my $userinterval = 30;
my $channelinterval = 600;

use BSD::arc4random qw(:all);
use POSIX qw(strftime);

$interactive = 0;

@users = ();

# ADJUSTME possibly path too
$logbase=$ENV{'HOME'}."/.etc/sirc/randexBot.log";
# ADJUSTME suffix per IRC network (PDPC = Freenode)
$logfile=$logbase."_pdpc";

sub cyclelogtrigger {
  my $ft = $logbase . strftime(".%Y%m%d.%H%M%S", gmtime);

  &docommand("set log off");
  while (-e $ft) {
    $ft = $logbase . ".=" . $RANDOM . $RANDOM;
  }
  rename($logfile, $ft);
  &docommand("set log on");
  &timer((3600 * $loghours), "&cyclelogtrigger");
}
&cyclelogtrigger;

sub hook_nameslist {
  local($g, $m, $c, $r)=split(/ +/, $args, 4);
  $r =~ s/^://;
  my @nicks = split(/ +/, $r);

  foreach my $luser (@nicks) {
    $luser =~ s/^[\@\+]//;
    next if (&eq($luser, "chanserv") ||
      &eq($luser, $nick));
    push (@users, $luser);
  }
# $logging && print LOG "=>D: names_hook, appending <$r> to users yielding <@users>\n";
}
&addhook("353", "nameslist");

sub timetrigger {
  my $interval;
  my $target;

  if (@users) {
    $target = shift @users;
    $interval = arc4random_uniform($userinterval) + ($userinterval / 2);
  } else {
    $target = "##/dev/arandom";
    $interval = arc4random_uniform($channelinterval) + ($channelinterval / 2);
    &sl("NAMES ##/dev/arandom");
  }
  &timer($interval, "&timetrigger");
# $logging && print LOG "=>D: writing to $target, users is <@users>\n";

  local($t) = pack("u", arc4random_bytes(32, "$target @users"));
  chop($t);

  &sl("PRIVMSG $target :\caENTROPY $t\ca");
}

sub hook_connected {
  @users = ();
  # ADJUSTME username/password for NickServ on Freenode, or similar
  &sl("NS IDENTIFY freenodeuser freenodepass");
  #&sl("PRIVMSG NickServ :IDENTIFY oftcpass oftcuser");
  sleep(1);			# wait until identified, hopefully
  &sl("JOIN ##/dev/arandom");
  &timer(5, "&timetrigger");
# $logging && print LOG "=>D: connected\n";
}
#XXX this doesn't work on all networks
&addhook("376", "connected");   # join on the "end of MOTD" numeric
#&addhook("266", "connected");	# join on the "global users" numeric

#XXX may be required on some networks (OFTC?)
#sub getnick {
#  &hook_badnick;
#}

sub hook_trynick {
  # ADJUSTME randexBot -> desired nickname
  &sl("NS GHOST randexBot");	# Freenode
  #&sl("PRIVMSG NickServ :REGAIN oftcuser oftcpass");
  sleep(3);
  &sl("NICK randexBot");
}

sub hook_badnick {
  local($n);
  $n="mirbot".$RANDOM;  # send a garbage nick...
  &sl("NICK $n");
  $skip=1;
  &timer(60, "&hook_trynick");
}
&addhook("432", "badnick");             # if told that ours is taken
&addhook("433", "badnick");

sub hook_disc {         # if we got disconnected
  sleep(30);		# wait 30 seconds (so we don't bring the machine
			# down to a crawl if the server is down)
  &docommand("server 0"); # reconnect to the initial server
}
&addhook("disconnect", "disc");

sub hook_joined {	# whenever someone joins
  return if &eq($who, $nick);

  local($t) = pack("u", arc4random_bytes(32, "$who ($user\@$host) joined $_"));
  chop($t);

  &sl("PRIVMSG $who :\caENTROPY $t\ca");
  push @users, $who;
# $logging && print LOG "=>D: <$who> joined, users is now <@users>\n";
}
&addhook("join", "joined");

sub hook_left {
  my $i;

  arc4random_pushb("$who ($user\@$host) left $_");
  if (@users) {
    for ($i = 0; $i <= $#users; $i++) {
      if (&eq($users[$i], $who)) {
#	$logging && print LOG "=>D: LEFT $i <$who> eq <$users[$i]>\n";
	splice (@users, $i, 1);
	last;
#     } else {
#	$logging && print LOG "=>D: LEFT $i <$who> ne <$users[$i]>\n";
      }
    }
  }
# $logging && print LOG "=>D: <$who> left, users is now <@users>\n";
}
&addhook("leave", "left");
&addhook("signoff", "left");
