# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.47 2007/06/10 12:48:36 tg Exp $

.include <bsd.own.mk>
.include "${GNUSYSTEM_AUX_DIR}/locations.mk"
.include "../Makefile.inc"

MAN=		doc/cpp.1 doc/mgcc.1 doc/gcov.1
INFO=		doc/cpp.info doc/cppinternals.info doc/gcc.info doc/gccint.info

.if !defined(NO_ADA) || ${NO_ADA:L} == "no"
INFO+=		doc/gnat-style.info doc/gnat_rm.info doc/gnat_ugn_unw.info
.endif

.if !defined(NO_CXX) || ${NO_CXX:L} == "no"
MLINKS=		mgcc.1 g++.1
.endif

.if !defined(NO_JAVA) || ${NO_JAVA:L} == "no"
MAN+=		doc/gcj.1 doc/gcjh.1 doc/gij.1 doc/jcf-dump.1 \
		doc/jv-convert.1 doc/jv-scan.1 doc/rmic.1 doc/rmiregistry.1
INFO+=		doc/gcj.info
.endif

.if (${CROSS_MODE:L} == "yes") && !defined(_CROSSBUILD)
ALL_TARGET?=	native xgcc cpp xlimits.h
FSFMARGS+=	LANGUAGES='c $$(CONFIG_LANGUAGES)'
XARGS+=		GNATMAKENATIVE="--GCC=/usr/bin/mgcc --GNATLINK='/usr/bin/gnatlink --GCC=/usr/bin/mgcc --LINK=/usr/bin/mgcc'"
.else
ALL_TARGET?=
.endif
.if (${CROSS_MODE:L} == "yes") && !defined(_CROSSBUILD)
INST_TARGET=	INSTALL_TARGET='install-common lang.install-normal' install
.elif defined(_CROSSBUILD)
INST_TARGET=	INSTALL_TARGET='install-common $$(INSTALL_HEADERS) \
		$$(INSTALL_LIBGCC) lang.install-normal install-driver' install
.else
INST_TARGET=	INSTALL_TARGET='install-common $$(INSTALL_HEADERS) \
		$$(INSTALL_LIBGCC) lang.install-normal' install
.endif
FSFMAKE=	PATH=${FSFOBJDIR}/lbin:$$PATH ${XVARS} \
		    ${GMAKE} ${FSFMARGS} ${XARGS}
FSFMARGS+=	MAKE=${GMAKE}

__LANGS=	--enable-languages=c
.if !defined(NO_ADA) || ${NO_ADA:L} == "no"
__LANGS:=	${__LANGS},ada
.endif
.if !defined(NO_CXX) || ${NO_CXX:L} == "no"
__LANGS:=	${__LANGS},c++
.endif
.if !defined(NO_OBJC) || ${NO_OBJC:L} == "no"
__LANGS:=	${__LANGS},objc
.endif
.if !defined(NO_JAVA) || ${NO_JAVA:L} == "no"
__LANGS:=	${__LANGS},java
.endif
.if !defined(NO_PASCAL) || ${NO_PASCAL:L} == "no"
__LANGS:=	${__LANGS},pascal
# must use c99 because of // comments in pascal
# must use gnu extensions because of crtstuff
COPTS+=		-std=gnu99
.endif

BOOT_CFLAGS?=	${FSFCFLAGS}
GNATLIBCFLAGS?=	${BOOT_CFLAGS}
CPPFLAGS+=	-I${GNU_LIBIBERTY_INC}
XARGS+=		BISON=yacc LIBIBERTY_HDRS="${GNU_LIBIBERTY_INC}" \
		extrapartsdir='${GCC_PREFIX}/lib' BOOT_CFLAGS="${BOOT_CFLAGS}" \
		CFLAGS="${FSFCFLAGS}" GNATLIBCFLAGS="${GNATLIBCFLAGS}" \
		HOST_CC="${HOSTCC}" MAKEINFOFLAGS=--no-split \
		VALGRIND_DRIVER_DEFINES="-DNO_SHARED_LIBGCC_MULTILIB"
.ifdef _CROSSBUILD
XARGS+=		TCFLAGS="${CROSSCFLAGS}"
.else
XARGS+=		TCFLAGS="${FSFCFLAGS}"
.endif
XARGS+=		CC_FOR_BUILD=${HOSTCC:C/ *$//:Q}
.if ${GCC_NATIVE:L} == "yes"
CPPFLAGS+=	-DMIRBSD_NATIVE
XARGS+=		BUILD_LIBIBERTY="-liberty" LIBIBERTY="-liberty" \
		SUB_LIBERTY="-liberty" STMP_FIXINC=stmp-fixinc-fake
M_CPP=		mcpp
.else
CPPFLAGS+=	-DMIRBSD_CROSS
_LIBERTY?=	${GNU_LIBIBERTY_SRC}/obj/libiberty.a
XARGS+=		BUILD_LIBIBERTY="${_LIBERTY}" LIBIBERTY="${_LIBERTY}" \
		SUB_LIBERTY="${_LIBERTY}" WITH_SHARED_LIBGPC=no
M_CPP=		cpp
.endif

# This is to prevent the compiler from "overloading" us with pseudo-local
# symbols e.g. in shared libraries - for now...
CFVARS+=	gcc_cv_as_ix86_gotoff_in_data=no

CFARGS+=	--prefix=${GCC_PREFIX} --libexecdir=${GCC_PREFIX}/lib \
		--infodir=${GCC_INFODIR} --mandir=${GCC_MANDIR} \
		--disable-generated-files-in-srcdir --with-system-zlib \
		--disable-threads ${OBJC_GC} --enable-shared \
		--enable-stack-protector --disable-sjlj-exceptions \
		--with-local-prefix=${GCC_PREFIX} --disable-nls \
		--with-gxx-include-dir=${GCC_PREFIX}/include/gxx ${__LANGS}
.if (${CROSS_MODE:L} == "yes") && !defined(_CROSSBUILD)
# required if build != (host == target), for the chained auto-build.h call
# breaks if build == host == target *sigh*
CFARGS+=	--target=${GCCTARGET}
.endif
.if !defined(NO_THREADS) || ${NO_THREADS:L} == "no"
CFARGS+=	--enable-threads=posix
.else
CFARGS+=	--disable-threads
.endif

CLEANFILES+=	gcclink ${MAN} ${INFO} doc/fsf-funding.7 doc/gccinstall.info \
		doc/gfdl.7 doc/gnat_ugn_unw.texi doc/gpl.7 doc/gcc.1 \
		gcov-iov.h gengtype-lex.c gengtype-yacc.c gengtype-yacc.h \
		gpr2make gprcmd gpc-run p/handle-opts.c

# For Ada (native/host gnatmake)
config.status: gcclink

gcclink:
.if ${CC} != "gcc"
	test -d lbin || mkdir lbin
	-rm -f lbin/gcc
	print '#!/bin/sh\nexec ${CC:S/'/'\''/g} "$$@"' >lbin/gcc
	chmod a+x lbin/gcc
.endif
	touch $@

tconfig.h:	prereq
	cd ${FSFOBJDIR} && ${FSFMAKE} $@

tree-check.h:	prereq
	cd ${FSFOBJDIR} && ${FSFMAKE} $@

all-quick:
	cd ${FSFOBJDIR} && ${FSFMAKE} ${ALL_TARGET}

pre-install:
	mkdir -p ${DESTDIR}${GCC_PREFIX}/lib/gcc/${GCCTARGET}/${GCCVERSION} \
	    ${DESTDIR}${MANDIR}1
.if !defined(NO_PASCAL) || ${NO_PASCAL:L} == "no"
.  if (${GCC_NATIVE:L} != "yes") && exists(${.SYSMK}/libmirmake.a)
	mkdir libmirmake && cd libmirmake && ar x ${.SYSMK}/libmirmake.a md5.o
	ar r libgpc.a libmirmake/md5.o
	-rm -rf libmirmake
.  endif
.endif

${MAN}: .MADE do-build

doc/gcc.1: .MADE do-build

doc/mgcc.1: .MADE doc/gcc.1
	sed -e 's#^gcc\( .*- GNU project C and\)#mgcc, c++\1#' \
	    <doc/gcc.1 >doc/mgcc.1

post-install:
.if ${GCC_NATIVE:L} == "yes"
.  if ${NOPIC:L} == "no"
	${INSTALL} ${INSTALL_COPY} -o ${LIBOWN} -g ${LIBGRP} -m ${LIBMODE} \
	    libgcc_s_fpic.so.${LIBGCC_REV} \
	    ${DESTDIR}${GCC_PREFIX}/lib/libgcc_s.so.${LIBGCC_REV}
.  endif
.endif
.if ${NOMAN:L} == "no"
.for _i in ${INFO}
	${INSTALL} ${INSTALL_COPY} -o ${MANOWN} -g ${MANGRP} -m ${MANMODE} \
	    ${_i} ${DESTDIR}${GCC_INFODIR}/
.endfor
.endif
.ifndef _CROSSBUILD
	${INSTALL} ${INSTALL_COPY} ${INSTALL_STRIP} -m ${BINMODE} \
	    -o ${BINOWN} -g ${BINGRP} cpp ${DESTDIR}${GCC_PREFIX}/bin/${M_CPP}
	${INSTALL} ${INSTALL_COPY} ${INSTALL_STRIP} -m ${BINMODE} \
	    -o ${BINOWN} -g ${BINGRP} xgcc ${DESTDIR}${GCC_PREFIX}/bin/mgcc
	cd ${DESTDIR}${GCC_PREFIX}/bin && ln -f mgcc gcc-${GCCVERSION}
.endif
.if (${CROSS_MODE:L} == "yes") && !defined(_CROSSBUILD)
	@echo 'Remember to copy over: /usr/lib/crt{begin,end}{,S,T}.o'
	@echo '  /usr/lib/gcc/${GCCTARGET}/${GCCVERSION}/{f{PIC,pic},include}'
	@echo '  /usr/lib/gcc/${GCCTARGET}/${GCCVERSION}/lib{gcc,gcov}.a'
.  if !defined(NO_ADA) || ${NO_ADA:L} == "no"
	@echo '  /usr/lib/gcc/${GCCTARGET}/${GCCVERSION}/ada{include,lib}'
.  endif
.endif
	chown -R ${BINOWN}:${BINGRP} \
	    ${DESTDIR}${GCC_PREFIX}/lib/gcc/${GCCTARGET}/${GCCVERSION}

pre-clean:
	-rm -rf ada lbin

.PHONY: all-quick

.include <bsd.cfwrap.mk>

.ifdef _CROSSBUILD
CFARGS+=--with-gnu-as=${GCC_PREFIX}/${GCCTARGET}/bin/as \
	--with-gnu-ld=${GCC_PREFIX}/${GCCTARGET}/bin/ld \
	--with-sysroot=${GCC_PREFIX:H} \
	--disable-shared
XVARS+=	GCC_NO_WERROR=1 GCC_HONOUR_COPTS=0
XARGS+=	AR_FOR_TARGET=${GCC_PREFIX}/${GCCTARGET}/bin/ar \
	NM_FOR_TARGET=${GCC_PREFIX}/${GCCTARGET}/bin/nm \
	RANLIB_FOR_TARGET=${GCC_PREFIX}/${GCCTARGET}/bin/ranlib
.endif
