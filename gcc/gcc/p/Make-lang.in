# $MirOS: gcc/gcc/p/Make-lang.in,v 1.5 2005/03/28 00:07:09 tg Exp $
# Top level Makefile fragment for GNU Pascal.
#
# Copyright (C) 1987-2005 Free Software Foundation, Inc.
#
# Authors: Jukka Virtanen <jtv@hut.fi>
#          J.J. van der Heijden <j.j.vanderheijden@student.utwente.nl>
#          Peter Gerwinski <peter@gerwinski.de>
#          Matthias Klose <doko@cs.tu-berlin.de>
#          Frank Heckenbach <frank@pascal.gnu.de>
#          Waldek Hebisch <hebisch@math.uni.wroc.pl>
#
# This file is part of GNU Pascal.
#
# GNU Pascal is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# GNU Pascal is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU Pascal; see the file COPYING. If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

# This file provides the language dependent support in the main Makefile.
# Each language makefile fragment must provide the following targets:
#
# foo.all.build, foo.all.cross, foo.start.encap, foo.rest.encap,
# foo.info, foo.dvi,
# foo.install-normal, foo.install-common, foo.install-info, foo.install-man,
# foo.uninstall, foo.distdir,
# foo.mostlyclean, foo.clean, foo.distclean, foo.extraclean,
# foo.maintainer-clean, foo.stage1, foo.stage2, foo.stage3, foo.stage4
#
# where `foo' is the name of the language.
#
# It should also provide rules for:
#
# - making any compiler driver (e.g.: gpc)
# - the compiler proper (e.g.: gpc1)
# - define the names for selecting the language in LANGUAGES.

# GCC version dependent stuff
# gcc-2.8.1 doesn't set $(gcc_version). Only gcc-3 sets $(BACKEND).
# So GCC_VERSION_FOR_GPC yields:
# `28' for gcc-2.8.1
# `2'  for gcc-2.95.x
# `'   for gcc-3.[0-3].x
# GCC_VERSION_FOR_GPC34 yields additionally:
# `34' for gcc-3.[4-9].x
GPC_GCC_2_=2
GPC_GCC_28_=8
GPC_GCC_34_PPQ_=foo
GPC_GCC_34_PPP=$(GPC_GCC_34_PPQ_$(target_noncanonical))
GPC_GCC_34_PP_=34
GPC_GCC_34_=$(GPC_GCC_34_PP_$(GPC_GCC_34_PPP))
GCC_VERSION_FOR_GPC=$(GPC_GCC_2_$(BACKEND))$(GPC_GCC_28_$(gcc_version))
GCC_VERSION_FOR_GPC34=$(GCC_VERSION_FOR_GPC)$(GPC_GCC_34_)
GPC_GCC_VERSION_28=$(version)
GPC_GCC_VERSION_2=$(gcc_version)
GPC_GCC_VERSION_=$(gcc_version)
GPC_GCC_VERSION=$(GPC_GCC_VERSION_$(GCC_VERSION_FOR_GPC))
GPC_GCC_VERSION_OBJS_28=pexecute.o
GPC_GCC_VERSION_OBJS_=intl.o
GPC_GCC_VERSION_OBJS=$(GPC_GCC_VERSION_OBJS_$(GCC_VERSION_FOR_GPC))
GPC_GCC_VERSION_LINK_=p/diagnostic.o attribs.o main.o libbackend.a ../libiberty/libiberty.a
GPC_GCC_VERSION_LINK_2=`cat p/stamp-gbe`
GPC_GCC_VERSION_LINK_28=`cat p/stamp-gbe` choose-temp.o pexecute.o
GPC_GCC_VERSION_LINK=$(GPC_GCC_VERSION_LINK_$(GCC_VERSION_FOR_GPC))
GPC_GCC_VERSION_DEPS_=$(GPC_GCC_VERSION_LINK)
GPC_GCC_VERSION_DEPS_2=p/stamp-gbe ../libiberty/libiberty.a
GPC_GCC_VERSION_DEPS_28=p/stamp-gbe choose-temp.o pexecute.o
GPC_GCC_VERSION_DEPS=$(GPC_GCC_VERSION_DEPS_$(GCC_VERSION_FOR_GPC))
GPC_GCC_VERSION_H_=target.h dbxout.h ../include/libiberty.h
GPC_GCC_VERSION_H_2=gansidecl.h dbxout.h ../include/libiberty.h
GPC_GCC_VERSION_H_28=gansidecl.h
GPC_GCC_VERSION_H=$(GPC_GCC_VERSION_H_$(GCC_VERSION_FOR_GPC))
GPC_ALL_WARNINGS_=$(WARN_CFLAGS) $(STRICT_WARN)
GPC_ALL_WARNINGS_2=`case "$(CC)" in *gcc*) echo -Wall -Wmissing-prototypes -Wpointer-arith;; esac`
GPC_ALL_WARNINGS_28=`case "$(CC)" in *gcc*) echo -Wall -Wmissing-prototypes -Wpointer-arith;; esac`
GPC_ALL_WARNINGS=$(GPC_ALL_WARNINGS_$(GCC_VERSION_FOR_GPC))
man1dir_28=$(mandir)# gcc-2.8.1 includes `man1' in $(mandir)
man1dir_2=$(mandir)/man1
man1dir_=$(mandir)/man1
man1dir=$(man1dir_$(GCC_VERSION_FOR_GPC))
LEX_28=$(LEX)
LEX_2=$(LEX)
LEX_=$(FLEX)
GPC_LEX=$(LEX_$(GCC_VERSION_FOR_GPC))
LEXFLAGS_28=$(LEXFLAGS)
LEXFLAGS_2=$(LEXFLAGS)
LEXFLAGS_=$(FLEXFLAGS)
GPC_LEXFLAGS=$(LEXFLAGS_$(GCC_VERSION_FOR_GPC))
GPC_HOST_28=$(host)
GPC_HOST_2=$(host_canonical)
GPC_HOST_=$(host_canonical)
GPC_HOST_34=$(host)
GPC_HOST=$(GPC_HOST_$(GCC_VERSION_FOR_GPC34))
GPC_BUILD_28=$(build)
GPC_BUILD_2=$(build_canonical)
GPC_BUILD_=$(build_canonical)
GPC_BUILD_34=$(build)
GPC_BUILD=$(GPC_BUILD_$(GCC_VERSION_FOR_GPC34))
LIBEXECSUBDIR_34=$(libexecsubdir)
LIBEXECSUBDIR_=$(libsubdir)
LIBEXECSUBDIR=$(LIBEXECSUBDIR_$(GPC_GCC_34_))

# gcc<3 doesn't set $(STAMP) and $(man1ext).
# gcc-3 does, but it should not matter to set them here again.
STAMP=echo timestamp >
man1ext=.1

RTSSRCDIR=$(srcdir)/p/rts

# Version numbers
VERSION_FILENAME=$(srcdir)/p/version.h
RTS_VERSION_FILENAME=$(RTSSRCDIR)/rts-version
gpc_major=2
gpc_minor=1
gpc_version=`sed -ne 's/"[^"]*$$//;s/^\#define GPC_VERSION_STRING *"//p' $(VERSION_FILENAME)`
rts_version=`cat $(RTS_VERSION_FILENAME)`

GPCSOLIBSHORTNAME=libgpc.so
GPCSOLIBNAME=$(GPCSOLIBSHORTNAME).$(gpc_major).$(gpc_minor)
GPCSOLIBDIR=lib
WITH_SHARED=@with_shared@

BISON=bison
BISONFLAGS=
LEX=flex
LEXFLAGS=
FLEX=flex
FLEXFLAGS=
MAKEINFO=makeinfo
MAKEINFOFLAGS=

GPC_PAGESIZE=@afourpaper

# Can be overwritten for Dos hosts
SYMLINK=ln -s

# Can be overwritten to install additional libraries
GPC_EXTRA_INSTALL_LIBS=

# Actual names to use when installing a native compiler.
GPC_INSTALL_NAME=`t='$(program_transform_name)'; echo gpc | sed $$t`

# Actual names to use when installing a cross-compiler.
GPC_CROSS_NAME_=`t='$(program_transform_cross_name)'; echo gpc | sed $$t`
GPC_CROSS_NAME_34=$(target_noncanonical)`t='$(program_transform_name)'; echo gpc | sed $$t`
GPC_CROSS_NAME=$(GPC_CROSS_NAME_$(GPC_GCC_34_))

# The GPC to use for compiling libgpc.a
# Usually the one we just built.
GPC_FOR_TARGET=./xgpc -B./

ADD_RTS_PARENT_DIR=sed -e 's,\(-[BI]\)\([^/][^:]\),\1../../\2,g;s,^\([^/][^:]*/\),../../\1,'
GCC2GPC=sed 's, *$$,,;s,^\([^ ]*[/\][^/\]*\)gcc,\1gpc,;s/^gcc$$/gpc/;s/$$/ /' # $(CC) might be .../gcc-foo/.../xgcc

# The ' ' is there so, e.g., `-B.' will be replaced by ADD_RTS_PARENT_DIR
RTS_COMPILERS=CC="`echo $(GCC_FOR_TARGET)' ' | $(ADD_RTS_PARENT_DIR)`" \
              PC="`echo $(GPC_FOR_TARGET)' ' | $(ADD_RTS_PARENT_DIR)`"
#(Doesn't work)              PC="`echo $(GCC_FOR_TARGET)' ' | $(ADD_RTS_PARENT_DIR) | sed -e 's,gcc,gpc,g;s,gpc/,gcc/,g'`"

# Flags to pass when installing GPC.
GPC_INSTALL_FLAGS_TO_PASS=\
	"exeext=$(exeext)" \
	"version=$(version)" \
	"target_alias=$(target_alias)" \
	"program_transform_name=$(program_transform_name)" \
	"program_transform_cross_name=$(program_transform_cross_name)" \
	"SYMLINK=$(SYMLINK)" \
	"GCC_FOR_TARGET=$(GCC_FOR_TARGET)" \
	"GPC_FOR_TARGET=$(GPC_FOR_TARGET)" \
	"GPCSOLIBSHORTNAME=$(GPCSOLIBSHORTNAME)" \
	"GPCSOLIBDIR=$(GPCSOLIBDIR)" \
	"GPC_EXTRA_INSTALL_LIBS=$(GPC_EXTRA_INSTALL_LIBS)" \
	"WITH_SHARED=$(WITH_SHARED)" \
	"FLOAT_H=$(FLOAT_H)" \
	"EXTRA_PARTS=$(EXTRA_PARTS)" \
	$(GPC_EXTRA_INSTALL_FLAGS_TO_PASS)

# Flags to pass when building the utilities. (PC is the GPC for the host!)
UTILS_FLAGS_TO_PASS=\
	SHELL="$(SHELL)" \
	PC="`if [ x"$(GPC_HOST)" = x"$(target)" ]; then echo $(GPC_FOR_TARGET) -L../..' '; else echo $(CC) | $(GCC2GPC); fi | $(ADD_RTS_PARENT_DIR)` -I../rts" \
	CFLAGS="$(CFLAGS)" \
	PFLAGS="$(PFLAGS)" \
	exeext="$(exeext)" \
	INSTALL_PROGRAM="$(INSTALL_PROGRAM)" \
	INSTALL_DATA="$(INSTALL_DATA)" \
	BUILD="$(GPC_BUILD)" \
	HOST="$(GPC_HOST)"

# Flags to pass when building the RTS.
RTS_FLAGS_TO_PASS_ALL=\
	GCC_VERSION="$(GPC_GCC_VERSION)" \
	SHELL="$(SHELL)" \
	CFLAGS="$(CFLAGS)" \
	PFLAGS="$(PFLAGS)" \
	AR_FLAGS="$(AR_FLAGS)" \
	RTSFLAGS="$(RTSFLAGS)" \
	DESTDIR="../.."

RTS_FLAGS_TO_PASS_28=\
	AR="$(AR)" \
	RANLIB="$(RANLIB)" \
	RANLIB_TEST="$(RANLIB_TEST)"

RTS_FLAGS_TO_PASS_=\
	AR="$(AR_FOR_TARGET)" \
	RANLIB="$(RANLIB_FOR_TARGET)" \
	RANLIB_TEST="$(RANLIB_TEST_FOR_TARGET)"

RTS_FLAGS_TO_PASS_2=$(RTS_FLAGS_TO_PASS_)

RTS_FLAGS_TO_PASS_34=$(RTS_FLAGS_TO_PASS_)

RTS_FLAGS_TO_PASS=$(RTS_FLAGS_TO_PASS_ALL) \
	$(RTS_FLAGS_TO_PASS_$(GCC_VERSION_FOR_GPC))

# Define the names for selecting Pascal in LANGUAGES.
# @@ Removing "pascal.rts pascal.utils" here fails for a cross-built compiler
Pascal pascal: xgpc$(exeext) gpc1$(exeext) gpcpp$(exeext) gpc-run \
               specs pascal.generated-files \
               pascal.rts pascal.utils

# Tell GNU make to ignore these if they exist.
.PHONY: Pascal pascal

p/gpc.o: $(srcdir)/p/gpc.c $(CONFIG_H) multilib.h Makefile \
 $(lang_specs_files) $(srcdir)/p/version.h specs.h
	$(CC) -DGPC $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(GPC_ALL_WARNINGS) $(INCLUDES) \
	$(DRIVER_DEFINES) -c `echo $(srcdir)/p/gpc.c | sed 's,^\./,,'` -o $@

# We call this executable `xgpc' rather than `gpc'
# to avoid confusion if the current directory is in the path
# and PC is `gpc'. It is renamed to `gpc' when it is installed.
xgpc$(exeext): p/gpc.o $(GPC_GCC_VERSION_OBJS) prefix.o version.o \
 $(LIBDEPS) $(EXTRA_GCC_OBJS)
	$(CC) $(ALL_CFLAGS) $(GPC_ALL_WARNINGS) $(LDFLAGS) -o $@ p/gpc.o prefix.o version.o \
	$(GPC_GCC_VERSION_OBJS) $(EXTRA_GCC_OBJS) $(LIBS) $(EXTRA_LIBS)

# Also create gpc-cross, so that pascal.install-common will install properly.
gpc-cross$(exeext): xgpc$(exeext)
	cp xgpc$(exeext) gpc-cross$(exeext)

gpc-run: $(srcdir)/p/script/gpc-run $(VERSION_FILENAME)
	sed -e s/@version@/$(gpc_version)/ "$<" > "$@" || { rm -f "$@"; false; }
	chmod a+x "$@"

# Headers and flags for GPC specific files.
GPC_GBE_H=$(CONFIG_H) system.h tree.h input.h rtl.h flags.h output.h expr.h \
          except.h function.h convert.h toplev.h $(GPC_GCC_VERSION_H)
P_H=$(GPC_GBE_H) p/gpc.h p/p-tree.def p/predef.h $(srcdir)/p/parse.h p/gbe.h
ALL_GPC_FLAGS=$(ALL_CFLAGS) $(ALL_CPPFLAGS) $(GPC_ALL_WARNINGS) $(INCLUDES) \
  -DGPC -DGPC_UNITS_DIR=\"$(libsubdir)/units\" -I$(srcdir)/p

# Headers and flags for patched backend files.
GPC_BE_H=$(GPC_GBE_H) defaults.h machmode.h machmode.def real.h recog.h \
         regs.h reload.h typeclass.h xcoffout.h \
         insn-attr.h insn-codes.h insn-config.h insn-flags.h
ALL_GPC_GBE_FLAGS=$(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -DGPC

gpcpp$(exeext): $(P) p/gpcpp.o version.o $(LIBDEPS)
	rm -f $@
	$(CC) $(ALL_GPC_FLAGS) $(LDFLAGS) -o $@ p/gpcpp.o version.o $(LIBS) $(EXTRA_LIBS)

p/gpcpp.o: p/gpcpp.c p/version.h p/gpc-options.h p/lang-options.h $(CONFIG_H) system.h
	$(CC) -o $@ -c $(ALL_GPC_FLAGS) $<

# Language-specific object files for GPC and patched GNU Back End (GBE)
# files (mostly language independent, but some parts require GPC specific
# patches and are rebuilt with -DGPC).
GPC_OBJS=p/parse.o p/declarations.o p/expressions.o p/gpc-lex.o p/lang.o \
	p/module.o p/objects.o p/options.o p/predef.o p/statements.o \
	p/typecheck.o p/types.o p/convert.o p/dbxout.o p/dwarf2out.o \
	p/expr.o p/fold-const.o p/function.o p/integrate.o p/optabs.o \
	p/stor-layout.o p/toplev.o p/tree.o p/stmt.o p/emit-rtl.o \
	p/varasm.o p/version.o

gpc1$(exeext): $(P) $(GPC_GCC_VERSION_DEPS) $(GPC_OBJS) $(LIBDEPS)
	@grep "@@ PATCHED FOR GPC 20050130 @@" $(srcdir)/stor-layout.c > /dev/null || \
	 { echo "*** There have been changes in the patch for GCC. Please start with a fresh"; \
	   echo "*** copy of the GCC sources and do a new build, including configure."; \
	   exit 1; } >&2
	rm -f $@
	$(CC) $(ALL_GPC_FLAGS) $(LDFLAGS) -o $@ $(GPC_OBJS) $(GPC_GCC_VERSION_LINK) $(LIBS) $(EXTRA_LIBS)

p/declarations.o: p/declarations.c $(P_H)
	$(CC) -o $@ -c $(ALL_GPC_FLAGS) $<

p/expressions.o: p/expressions.c $(P_H)
	$(CC) -o $@ -c $(ALL_GPC_FLAGS) $<

p/gpc-lex.o: p/gpc-lex.c $(srcdir)/p/pascal-lex.c $(P_H)
	$(CC) -o $@ -c $(ALL_GPC_FLAGS) $<

p/handle-opts.c: $(srcdir)/p/opts.sum $(srcdir)/p/script/mk-handle-opts-c
	$(srcdir)/p/script/mk-handle-opts-c $(srcdir)/p/opts.sum "$@"

p/lang.o: p/lang.c $(P_H) p/handle-opts.c
	$(CC) -o $@ -c $(ALL_GPC_FLAGS) $<

p/module.o: p/module.c $(P_H) p/version.h
	$(CC) -o $@ -c $(ALL_GPC_FLAGS) -DTARGET_NAME=\"$(target_alias)\" $<

p/objects.o: p/objects.c $(P_H)
	$(CC) -o $@ -c $(ALL_GPC_FLAGS) $<

p/options.o: p/options.c $(P_H) p/lang-options.h p/gpc-options.h p/version.h
	$(CC) -o $@ -c $(ALL_GPC_FLAGS) $<

p/parse.o: $(srcdir)/p/parse.c $(P_H)
	$(CC) -o $@ -c $(ALL_GPC_FLAGS) $(BIG_SWITCHFLAG) $<

p/predef.o: p/predef.c $(P_H) $(RTSSRCDIR)/constants.h
	$(CC) -o $@ -c $(ALL_GPC_FLAGS) $<

p/statements.o: p/statements.c $(P_H) $(RTSSRCDIR)/constants.h $(RTS_VERSION_FILENAME)
	$(CC) -o $@ -c $(ALL_GPC_FLAGS) -DRTS_VERSION_CHECK="\"_p_GPC_RTS_VERSION_`cat $(RTSSRCDIR)/rts-version`\"" $<

p/typecheck.o: p/typecheck.c $(P_H)
	$(CC) -o $@ -c $(ALL_GPC_FLAGS) $<

p/types.o: p/types.c $(P_H) $(RTSSRCDIR)/constants.h
	$(CC) -o $@ -c $(ALL_GPC_FLAGS) $<

p/convert.o: convert.c $(GPC_BE_H)
	$(CC) -o $@ -c $(ALL_GPC_GBE_FLAGS) $<

p/dbxout.o: dbxout.c $(GPC_BE_H)
	$(CC) -o $@ -c $(ALL_GPC_GBE_FLAGS) $<

p/dwarf2out.o: dwarf2out.c $(GPC_BE_H)
	$(CC) -o $@ -c $(ALL_GPC_GBE_FLAGS) $<

p/diagnostic.o: diagnostic.c $(GPC_BE_H)
	$(CC) -o $@ -c $(ALL_GPC_GBE_FLAGS) $<

p/emit-rtl.o: emit-rtl.c $(GPC_BE_H)
	$(CC) -o $@ -c $(ALL_GPC_GBE_FLAGS) $<

p/expr.o: expr.c $(GPC_BE_H)
	$(CC) -o $@ -c $(ALL_GPC_GBE_FLAGS) $<

p/fold-const.o: fold-const.c $(GPC_BE_H)
	$(CC) -o $@ -c $(ALL_GPC_GBE_FLAGS) $<

p/function.o: function.c $(GPC_BE_H)
	$(CC) -o $@ -c $(ALL_GPC_GBE_FLAGS) $<

p/integrate.o: integrate.c $(GPC_BE_H)
	$(CC) -o $@ -c $(ALL_GPC_GBE_FLAGS) $<

p/optabs.o: optabs.c $(GPC_BE_H)
	$(CC) -o $@ -c $(ALL_GPC_GBE_FLAGS) $<

p/stmt.o: stmt.c $(GPC_BE_H)
	$(CC) -o $@ -c $(ALL_GPC_GBE_FLAGS) $<

p/stor-layout.o: stor-layout.c $(GPC_BE_H)
	$(CC) -o $@ -c $(ALL_GPC_GBE_FLAGS) $<

p/toplev.o: toplev.c $(GPC_BE_H) p/lang-options.h
	$(CC) -o $@ -c $(ALL_GPC_GBE_FLAGS) $(MAYBE_TARGET_DEFAULT) \
	  $(MAYBE_USE_COLLECT2) -DTARGET_NAME=\"$(target_alias)\" $<

p/tree.o: tree.c tree.def $(GPC_BE_H)
	$(CC) -o $@ -c $(ALL_GPC_GBE_FLAGS) $<

p/varasm.o: varasm.c $(GPC_BE_H)
	$(CC) -o $@ -c $(ALL_GPC_GBE_FLAGS) $<

p/version.o: version.c $(GPC_BE_H)
	$(CC) -o $@ -c $(ALL_GPC_GBE_FLAGS) $<

pascal.utils: xgpc$(exeext) gpc1$(exeext) gpcpp$(exeext) pascal.rts force
	mkdir -p p/utils
	srcdir=`cd $(srcdir) && pwd` && cd ./p/utils && $(MAKE) -f "$$srcdir/p/utils/Makefile" $(UTILS_FLAGS_TO_PASS) GCC_DIR="$$srcdir" all

# Let the RTS Makefile make its generated files. Use `force' here
# because we don't know their dependencies here. Use Makefile.in in
# RTS source directory, so this can be run from the GPC source directory.
#
# @@ I tried the following (so the RTS make is invoked only once, not once per
#    RTS generated file), but it doesn't work -- when, e.g. rts/files.pas is
#    modified, rts/gpc.pas is rebuilt, but doc/generated/gpcpas.texi (which
#    depends on the latter) is not. Strange make ... :-( -- Frank
# $(RTS_GENERATED_FILES): rts-generated-files
# rts-generated-files: force
$(RTS_GENERATED_FILES): force
	cd $(RTSSRCDIR) && $(MAKE) -f Makefile.in srcdir=. $(RTS_FLAGS_TO_PASS) generated-files

# The configuration of the Run Time System relies on an autoconf-type
# configure, not a Cygnus-type one. It needs to be run *after* the
# appropriate (cross-)compiler has been built, thus depend on GCC_PARTS.
# dj: Depending on $(GCC_PARTS) here is bad news - very bad news.
# mk: but it needs $(EXTRA_OBJS) and $(LIBGCC), what to do?
# fh: $(GCC_PARTS) doesn't include the Pascal compiler, so I added explicit
# dependencies (for pascal.rts).
# Depending on `stmp-headers' used to ensure that float.h has been built;
# now it's only needed by rts/configure, hope that's not so important.
p/rts/Makefile: $(GCC_PARTS) \
 $(RTSSRCDIR)/Makefile.in $(RTSSRCDIR)/configure $(RTSSRCDIR)/rts-config.in
	mkdir -p p/rts
	src=`cd $(srcdir) && pwd` && \
	cd ./p/rts && \
	$(RTS_COMPILERS) CONFIG_SITE=nonexisting-file \
	$$src/p/rts/configure --silent > /dev/null --srcdir=$$src/p/rts \
	 `if [ x$(WITH_SHARED) = xyes ]; then echo '--with-shared'; fi`

pascal.rts: p/rts/Makefile xgpc$(exeext) gpc1$(exeext) gpcpp$(exeext)
	cd ./p/rts && $(MAKE) $(RTS_COMPILERS) $(RTS_FLAGS_TO_PASS) all

# Build hooks:

pascal.all.build: xgpc$(exeext)
pascal.all.cross: gpc-cross$(exeext) pascal.rts pascal.utils
pascal.start.encap:
pascal.rest.encap: pascal.rts pascal.utils

# Install hooks:
# gpc1 is installed elsewhere as part of $(COMPILERS).

unitsubdir=$(libsubdir)/units

pascal.install-dir:
	for directory in $(prefix) $(bindir) $(unitsubdir) $(libsubdir)/include $(LIBEXECSUBDIR) \
	                 $(infodir) $(p_inst_docdir) $(p_inst_demodir) $(p_inst_docdemodir) $(man1dir); do \
	  mkdir -p -m a+rx $(DESTDIR)$$directory || exit 1; \
	done

install-gpcpp: pascal.install-dir gpcpp$(exeext)
	rm -f $(DESTDIR)$(LIBEXECSUBDIR)/gpcpp$(exeext)
	$(INSTALL_PROGRAM) gpcpp$(exeext) $(DESTDIR)$(LIBEXECSUBDIR)/gpcpp$(exeext)

# Install the driver program as $(target)-gpc
# and also as either gpc (if native) or $(tooldir)/bin/gpc.
pascal.install-common: pascal.install-dir xgpc$(exeext) gpc-run
	if [ -f gpc-cross$(exeext) ]; then \
	  rm -f $(DESTDIR)$(bindir)/$(GPC_CROSS_NAME)$(exeext); \
	  $(INSTALL_PROGRAM) gpc-cross$(exeext) $(DESTDIR)$(bindir)/$(GPC_CROSS_NAME)$(exeext) && \
	  chmod a+x $(DESTDIR)$(bindir)/$(GPC_CROSS_NAME)$(exeext); \
	else \
	  rm -f $(DESTDIR)$(bindir)/$(GPC_INSTALL_NAME)$(exeext); \
	  $(INSTALL_PROGRAM) xgpc$(exeext) $(DESTDIR)$(bindir)/$(GPC_INSTALL_NAME)$(exeext) && \
	  chmod a+x $(DESTDIR)$(bindir)/$(GPC_INSTALL_NAME)$(exeext); \
	fi
	rm -f $(DESTDIR)$(bindir)/gpc-run
	$(INSTALL_PROGRAM) gpc-run $(DESTDIR)$(bindir)/gpc-run
	chmod a+x $(DESTDIR)$(bindir)/gpc-run

pascal.install-utils: pascal.utils
	srcdir=`cd $(srcdir) && pwd` && \
	bindir=`cd "$(DESTDIR)$(bindir)"; pwd` && \
	man1dir=`cd "$(DESTDIR)$(man1dir)"; pwd` && \
	cd ./p/utils && $(MAKE) -f "$$srcdir/p/utils/Makefile" $(UTILS_FLAGS_TO_PASS) GCC_DIR="$$srcdir" bindir="$$bindir" man1dir="$$man1dir" install

pascal.install-lib: pascal.install-dir pascal.rts
	if [ -f libgpc.a ]; then \
	  rm -f $(DESTDIR)$(libsubdir)/libgpc.a; \
	  $(INSTALL_DATA) libgpc.a $(DESTDIR)$(libsubdir)/libgpc.a && \
	  chmod a-x $(DESTDIR)$(libsubdir)/libgpc.a || exit 1; \
	  $(RANLIB_FOR_TARGET) $(DESTDIR)$(libsubdir)/libgpc.a 2> /dev/null || true; \
	fi
	for f in .. $(GPC_EXTRA_INSTALL_LIBS); do \
	  if [ x"$$f" != x.. ]; then \
	    $(INSTALL_DATA) "$$f" "$(DESTDIR)$(libsubdir)/`echo "$$f" | sed -e 's,.*/,,'`" || exit 1; \
	  fi; \
	done
	if [ x$(WITH_SHARED) = xyes ] && [ -f $(GPCSOLIBNAME) ]; then \
	  mkdir -p -m a+rx $(DESTDIR)$(prefix)/$(GPCSOLIBDIR) && \
	  rm -f $(DESTDIR)$(libsubdir)/$(GPCSOLIBSHORTNAME) $(DESTDIR)$(prefix)/$(GPCSOLIBDIR)/$(GPCSOLIBNAME); \
	  $(INSTALL_DATA) $(GPCSOLIBNAME) $(DESTDIR)$(prefix)/$(GPCSOLIBDIR)/$(GPCSOLIBNAME) && \
	  chmod a-x $(DESTDIR)$(prefix)/$(GPCSOLIBDIR)/$(GPCSOLIBNAME) && \
	  $(SYMLINK) $(prefix)/$(GPCSOLIBDIR)/$(GPCSOLIBNAME) $(DESTDIR)$(libsubdir)/$(GPCSOLIBSHORTNAME); \
	else \
	  true; \
	fi

pascal.install-units: pascal.install-dir $(srcdir)/p/units/crtc.h $(RTSSRCDIR)/gpc.pas
	$(INSTALL_DATA) p/rts/rts-config.inc $(DESTDIR)$(unitsubdir)/rts-config.inc
	$(INSTALL_DATA) $(RTSSRCDIR)/gpc.pas $(DESTDIR)$(unitsubdir)/gpc.pas
	chmod a-x $(DESTDIR)$(unitsubdir)/rts-config.inc $(DESTDIR)$(unitsubdir)/gpc.pas
	for f in `cd $(srcdir)/p/units && echo *`; do \
	  if [ "$$f" = gpc-in-c.h ]; then \
	    rm -f $(DESTDIR)$(libsubdir)/include/"$$f"; \
	    $(INSTALL_DATA) $(srcdir)/p/units/"$$f" $(DESTDIR)$(libsubdir)/include/"$$f" || exit 1; \
	    chmod a-x $(DESTDIR)$(libsubdir)/include/"$$f"; \
	  elif [ "$$f" != CVS ]; then \
	    rm -f $(DESTDIR)$(unitsubdir)/"$$f"; \
	    $(INSTALL_DATA) $(srcdir)/p/units/"$$f" $(DESTDIR)$(unitsubdir)/"$$f" || exit 1; \
	    chmod a-x $(DESTDIR)$(unitsubdir)/"$$f"; \
	  fi; \
	done

pascal.install-compiler34:

# Install gpc1 et.al.
# Do *not* overwrite files if they exist.
pascal.install-compiler: pascal.install-dir pascal
	for file in gpc1$(exeext); do \
	  if [ -f $$file ]; then \
	    rm -f $(DESTDIR)$(LIBEXECSUBDIR)/$$file; \
	    $(INSTALL_PROGRAM) $$file $(DESTDIR)$(LIBEXECSUBDIR)/$$file || exit 1; \
	  fi; \
	done; exit 0
	for file in $(EXTRA_PASSES) $(EXTRA_PROGRAMS) $(USE_COLLECT2) ..; do \
	  if [ x"$$file" != x.. ] && [ ! -f $(DESTDIR)$(LIBEXECSUBDIR)/$$file ]; then \
	    $(INSTALL_PROGRAM) $$file $(DESTDIR)$(LIBEXECSUBDIR)/$$file || exit 1; \
	  fi; \
	done; exit 0
	for file in $(EXTRA_PARTS) ..; do \
	  if [ x"$$file" != x.. ] && [ ! -f $(DESTDIR)$(libsubdir)/$$file ]; then \
	    $(INSTALL_DATA) $$file $(DESTDIR)$(libsubdir)/$$file && \
	    chmod a-x $(DESTDIR)$(libsubdir)/$$file || exit 1; \
	  fi; \
	done; exit 0
# Don't mess with specs if it doesn't exist yet.
	if [ -f specs ] && [ ! -f $(DESTDIR)$(libsubdir)/specs ]; then \
	  $(INSTALL_DATA) specs $(DESTDIR)$(libsubdir)/specs && \
	  chmod a-x $(DESTDIR)$(libsubdir)/specs || exit 1; \
	fi; exit 0

pascal.install-normal: pascal.install-common pascal.install-compiler$(GPC_GCC_34_) \
 install-gpcpp pascal.install-utils pascal.install-lib pascal.install-units

# This target will install GPC into an existing GCC installation,
# without overwriting existing files.
# The semicolon is to prevent the install.sh -> install default rule
# from doing anything. Having it run true helps avoid problems and
# noise from versions of make which don't like to have null commands.
# @@ Repeating pascal.install-compiler is strange here. But since it's disabled
#    in pascal.install-normal for gcc-3.4, it would otherwise be missing here.
pascal.install: pascal.install-normal pascal.install-compiler; @true

pascal.uninstall:
	-rm -rf $(DESTDIR)$(bindir)/$(GPC_INSTALL_NAME)$(exeext)
	-rm -rf $(DESTDIR)$(bindir)/$(GPC_CROSS_NAME)$(exeext)
	-rm -rf $(DESTDIR)$(man1dir)/$(GPC_INSTALL_NAME)$(man1ext)
	-rm -rf $(DESTDIR)$(man1dir)/$(GPC_INSTALL_NAME)-hr$(man1ext)
	-rm -rf $(DESTDIR)$(man1dir)/$(GPC_CROSS_NAME)$(man1ext)
	-rm -rf $(DESTDIR)$(man1dir)/$(GPC_CROSS_NAME)-hr$(man1ext)
	-rm -rf $(DESTDIR)$(man1dir)/gpc-run$(man1ext)

# Clean hooks: A lot of the ancillary files are deleted by the main makefile.
# We just have to delete files specific to us.

pascal.mostlyclean:
	-rm -f p/*.o p/stamp-docdemos p/stamp-pascal-html gpc-html-$(gpc_version).tar.gz
	-rm -rf p/docdemos $(HTML_DIR)
	-if [ -d p/rts ]; then rtssrcdir=`cd $(RTSSRCDIR) && pwd` && cd ./p/rts && $(MAKE) -f $$rtssrcdir/Makefile.in $(RTS_FLAGS_TO_PASS) srcdir=$$rtssrcdir mostlyclean; fi
	-if [ -d p/test ]; then cd ./p/test && $(MAKE) mostlyclean; fi

pascal.clean: pascal.mostlyclean
	-rm -f xgpc
	-rm -f p/parse.output p/parse.tab.c
	-if [ -d p/utils ]; then srcdir=`cd $(srcdir) && pwd` && cd ./p/utils && $(MAKE) -f $$srcdir/p/utils/Makefile $(UTILS_FLAGS_TO_PASS) GCC_DIR="$$srcdir" clean; fi
	-if [ -d p/rts ]; then rtssrcdir=`cd $(RTSSRCDIR) && pwd` && cd ./p/rts && $(MAKE) -f $$rtssrcdir/Makefile.in $(RTS_FLAGS_TO_PASS) srcdir=$$rtssrcdir clean; fi
	-if [ -d p/test ]; then cd ./p/test && $(MAKE) clean; fi

pascal.distclean: pascal.clean
	-rm -f p/gpc-config.h p/config.cache p/config.log p/config.status
	-rm -f gcc-version.h p/Makefile.in
	-rm -f gpc.aux gpc.cp gpc.cps gpc.fn gpc.ky gpc.log gpc.pg gpc.toc gpc.tp gpc.vr
	-rm -f gpc.tmp gpc.po gpc.to gpc.dvi gpc.ps gpc.pdf p/gpc.*aux GnuPascal.eps
	-if [ -d p/rts ]; then rtssrcdir=`cd $(RTSSRCDIR) && pwd` && cd ./p/rts && $(MAKE) -f $$rtssrcdir/Makefile.in $(RTS_FLAGS_TO_PASS) srcdir=$$rtssrcdir distclean; fi
	-if [ -d p/test ]; then cd ./p/test && $(MAKE) distclean; fi

# like gcc's extraclean, which cleans p/ for us, but not p/rts.
pascal.extraclean: pascal.distclean
	-rm -f p/*/=* p/*/"#"* p/*/*~* p/*/patch* p/*/*.orig p/*/*.rej
	-rm -f p/*/*.dvi p/*/*.oaux p/*/*.d p/*/*.[zZ] p/*/*.gz
	-rm -f p/*/*.tar p/*/*.xtar p/*/*.tar.* p/*/*.xtar.*
	-rm -f p/*/*lose p/*/*.s p/*/*.s[0-9] p/*/*.i
	-rm -f p/gpc-[0-9]*[0-9].tar.gz
	-rm -rf p/tmp p/gpc-[0-9]*[0-9]
	-if [ -d p/rts ]; then rtssrcdir=`cd $(RTSSRCDIR) && pwd` && cd ./p/rts && $(MAKE) -f $$rtssrcdir/Makefile.in $(RTS_FLAGS_TO_PASS) srcdir=$$rtssrcdir extraclean; fi
	-if [ -d p/test ]; then cd ./p/test && $(MAKE) extraclean; fi

pascal.maintainer-clean: pascal.extraclean
	-rm -f p/TAGS $(GPC_GENERATED_FILES) $(srcdir)/p/doc/info/gpc*.info*
	-for d in $(srcdir)/p/doc/*; do if [ -d $$d/info ]; then rmdir $$d/info; fi; done
	-if [ -d p/rts ]; then rtssrcdir=`cd $(RTSSRCDIR) && pwd` && cd ./p/rts && $(MAKE) -f $$rtssrcdir/Makefile.in $(RTS_FLAGS_TO_PASS) srcdir=$$rtssrcdir maintainer-clean; fi
	-cd $(RTSSRCDIR) && $(MAKE) -f Makefile.in srcdir=. maintainer-clean
	-if [ -d p/test ]; then cd ./p/test && $(MAKE) maintainer-clean; fi
	-rm -f $(srcdir)/p/diffs/gcc-2.95.1.diff $(srcdir)/p/diffs/gcc-2.95.2.diff $(srcdir)/p/diffs/gcc-2.95.3.diff $(srcdir)/p/diffs/gcc-2.95.3-5.diff
	-rm -f $(srcdir)/p/diffs/gcc-2.95.3-6.diff $(srcdir)/p/diffs/gcc-2.95.3-8.diff $(srcdir)/p/diffs/gcc-2.95.4.diff
	-rm -f $(srcdir)/p/diffs/gcc-3.2.2.diff $(srcdir)/p/diffs/gcc-3.2.3.diff $(srcdir)/p/diffs/gcc-3.3.1.diff

# Stage hooks: The main makefile has already created stage?/p.

GPCSTAGESTUFF=p/*.o

RTSSTAGESTUFF=p/rts/*.o p/rts/*.lo p/rts/*.gpi p/rts/*.gpd \
  p/rts/config.cache p/rts/config.log p/rts/config.status p/rts/Makefile \
  p/rts/rts-config.h p/rts/rts-config.inc p/rts/needed-options \
  p/rts/stamp-error-gpi

pascal.stage1:
	mkdir -p stage1/p/rts
	-mv $(GPCSTAGESTUFF) stage1/p
	-mv $(RTSSTAGESTUFF) stage1/p/rts
pascal.stage2:
	mkdir -p stage2/p/rts
	-mv $(GPCSTAGESTUFF) stage2/p
	-mv $(RTSSTAGESTUFF) stage2/p/rts
pascal.stage3:
	mkdir -p stage3/p/rts
	-mv $(GPCSTAGESTUFF) stage3/p
	-mv $(RTSSTAGESTUFF) stage3/p/rts
pascal.stage4:
	mkdir -p stage4/p/rts
	-mv $(GPCSTAGESTUFF) stage4/p
	-mv $(RTSSTAGESTUFF) stage4/p/rts
pascal.stageprofile: stageprofile-start
	-mv p/*$(objext) stageprofile/p
pascal.stagefeedback: stageprofile-start
	-mv p/*$(objext) stagefeedback/p

force:
