@c Generated automatically from md5.pas
@c DO NOT CHANGE THIS FILE MANUALLY!

@smallexample
@{ $MirOS: gcc/gcc/p/units/md5.pas,v 1.5 2008/11/08 23:03:43 tg Exp $

  Copyright (c) 2005
 	Free Software Foundation, Inc. <gpc@@gnu.de>
  written by:
 	Thorsten "mirabilos" Glaser <tg@@mirbsd.org>
 	Frank Heckenbach
 
  Licensee is hereby permitted to deal in this work without restric-
  tion, including unlimited rights to use, publicly perform, modify,
  merge, distribute, sell, give away or sublicence, provided all co-
  pyright notices above, these terms and the disclaimer are retained
  in all redistributions or reproduced in accompanying documentation
  or other materials provided with binary redistributions.
 
  Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
  express, or implied, to the maximum extent permitted by applicable
  law, without malicious intent or gross negligence; in no event may
  licensor, an author or contributor be held liable for any indirect
  or other damage, or direct damage except proven a consequence of a
  direct error of said person and intended use of this work, loss or
  other issues arising in any way out of its use, even if advised of
  the possibility of such damage or existence of a nontrivial bug.

  Replacement for the GNU md5 unit, which was licenced under the GNU
  GPL, thus propagating the requirement to be GPL'd to any code that
  used the old unit. The GNU md5 unit was the only one not under the
  LGPL or GPL with library exception clause; this fixes it. @}

@{$gnu-pascal,I-@}
@{$if __GPC_RELEASE__ < 20030303@}
@{$error This unit requires GPC release 20030303 or newer.@}
@{$endif@}

unit MD5;

interface

uses GPC;

@{ Representation of a MD5 value. It is always in little endian byte
  order and therefore portable. @}
type
  Card8 = Cardinal attribute (Size = 8);
  TMD5 = array [1 .. 16] of Card8;

const
  MD5StrLength = 2 * High (TMD5);

type
  MD5String = String (MD5StrLength);

@{ Computes MD5 message digest for Length bytes in Buffer. @}
procedure MD5Buffer (const Buffer; Length: SizeType; var MD5: TMD5);
  attribute (name = '_p_MD5Buffer');

@{ Computes MD5 message digest for the contents of the file f. @}
procedure MD5File (var f: File; var MD5: TMD5); attribute
  (iocritical, name = '_p_MD5File');

@{ Initializes a MD5 value with zeros. @}
procedure MD5Clear (var MD5: TMD5); attribute (name
  = '_p_MD5Clear');

@{ Compares two MD5 values for equality. @}
function MD5Compare (const Value1, Value2: TMD5): Boolean; attribute
  (name = '_p_MD5Compare');

@{ Converts an MD5 value to a string. @}
function MD5Str (const MD5: TMD5) = s: MD5String; attribute (name
  = '_p_MD5Str');

@{ Converts a string to an MD5 value. Returns True if successful. @}
function MD5Val (const s: String; var MD5: TMD5): Boolean; attribute
  (name = '_p_MD5Val');

@{ Composes two MD5 values to a single one. @}
function MD5Compose (const Value1, Value2: TMD5) = Dest: TMD5;
  attribute (name = '_p_MD5Compose');


@end smallexample
