#!/usr/bin/env mksh
# $MirOS: CVSROOT/mklogci,v 1.34 2008/07/03 17:32:16 tg Exp $
#-
# Copyright (c) 2005, 2006, 2007
#	Thorsten Glaser <tg@mirbsd.de>
#
# Provided that these terms and disclaimer and all copyright notices
# are retained or reproduced in an accompanying document, permission
# is granted to deal in this work without restriction, including un-
# limited rights to use, publicly perform, distribute, sell, modify,
# merge, give away, or sublicence.
#
# This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
# the utmost extent permitted by applicable law, neither express nor
# implied; without malicious intent or gross negligence. In no event
# may a licensor, author or contributor be held liable for indirect,
# direct, other damage, loss, or other issues arising in any way out
# of dealing in the work, even if advised of the possibility of such
# damage or existence of a defect, except proven that it results out
# of said person's immediate fault when using the work as intended.
#-
# CVS helper to create log messages from cvs commits, rewritten from
# scratch. The design pattern is a perl script originally written by
# David Hampton and hacked by Greg A. Woods, OpenBSD, and Th. Glaser
# for MirBSD, later The MirOS Project.
#-
# Usage: mklogci commitid [-D] [-C root] [-f file] [-I uri] [-M module]
#		 [-m mailto] -p pathr [-R replyto] file ...
#	commitid	= GNU CVS 1.12.12 + MirOS mode %I, PGRP else
#	-C root		= CVSROOT (the %r argument)
#	-D		= mail: append diffs themselves not commands
#	-f logfile	= create ChangeLog file from commit messages
#	-I loguri	= reduce size of import mails, refer to URI
#	-M module	= set module name
#	-m mailto	= send commit messages to mailto
#	-p pathr	= the %p argument
#	-R replyto	= set Reply-To: replyto header

function die {
	print -r Error: "$@"
	rm -f $repo/.tmp/cl.*.$id
	exit 1
}

function makeheader {
	cat <<-EOF
		Commit ID:	$id
		CVSROOT:	$repo
		Module name:	$module
		Changes by:	${USER}@$hn	$(TZ=UTC date '+%Y/%m/%d %T' 2>/dev/null) UTC

	EOF
}

function writelog {
	{
		cat "$@"
		print ________________________________________________________________________
		print
	} | $SHELL $repo/CVSROOT/genlog $logfile $repo/CVSROOT/history
}

function writemail {
	sendmail -t |&
	print -pr -- To: $mailto
	print -pr -- Subject: CVS: $hn: $module
	if [[ -n $replyto ]]; then
		print -pr -- Mail-Followup-To: $replyto
		print -pr -- Reply-To: $replyto
	fi
	print -p
	exec 3>&p
	cat "$@" >&3
	exec 3>&-
}

function addnames {
	integer i
	integer linln

	dir=${dir##+(./)}
	dir=${dir%%+(/)}
	[[ -z $dir ]] && dir=.

	line=$(printf '%-15s:' "$dir")
	let i=0
	let linln=${#line}
	line="	$line"
	while (( i < ${#add_names[*]} )); do
		while :; do
			linadd=${add_names[i++]}
			line="$line $linadd"
			let "linln += ${#linadd} + 1"
			(( i < ${#add_names[*]} )) || break
			(( (linln + 1 + ${#add_names[i]}) < 72 )) || break
		done
		print -r -- "$line"
		line='			'
		let linln=16
	done
}

function addflist {
	set -A add_names
	IFS= read dir
	[[ $dir = */ ]] || die addflist "($dir)" does not look like a directory
	while IFS= read fn; do
		if [[ $fn = */ ]]; then
			addnames
			dir=$fn
			set -A add_names
		elif [[ -z $fn || $fn = *([	 ]) ]]; then
			break
		else
			add_names[${#add_names[*]}]=$fn
		fi
	done
	addnames
}

function getdirs {
	local dir=$1
	integer i

	[[ -s $repo/.tmp/cl.dirs.$id ]] || return 0
	set -A dirnames
	set -A dircounts
	integer dircounts
	. $repo/.tmp/cl.dirs.$id
	i=0
	while (( i < ${#dirnames[*]} )); do
		[[ ${dirnames[i]} = $dir ]] && break
		let i++
	done
	(( i < ${#dirnames[*]} )) || return 0	# not found
	(( dircounts[i] )) || return 0		# count zero

	let dircounts[i]--
	if (( !dircounts[i] )); then
		unset dircounts[i]
		unset dirnames[i]
	fi
	set -A dirnames -- "${dirnames[@]}"
	set -A dircounts -- "${dircounts[@]}"

	(( ${#dirnames[*]} )) || return 0	# none left
	ln="set -A dirnames --"
	lc="set -A dircounts"
	i=0
	while (( i < ${#dirnames[*]} )); do
		ln="$ln '${dirnames[i]}'"
		lc="$lc ${dircounts[i]}"
		let i++
	done
	print -r -- "$ln$nl$lc" >$repo/.tmp/cl.dirs.$id
	return 1				# some left
}


SHELL=$(whence -p mksh) || SHELL=/bin/mksh
id=$1
shift
if [[ -z $id || $id = @(-|%I) ]]; then
	if (( PGRP )); then
		id=$PGRP	# mksh pre-R24 or post-R33
	else
		id=$(perl -e 'print getpgrp();' 2>&-) || id=
	fi
	[[ -z $id || $id -eq 0 ]] && exit 255
fi

logfile=
loguri=
module=
mailto=
pathr=
replyto=
integer do_diff=0

while getopts "C:Df:I:M:m:p:R: :" flag; do
	case $flag {
	(C)	repo=$OPTARG ;;
	(D)	do_diff=1 ;;
	(f)	logfile=$OPTARG ;;
	(I)	loguri=$OPTARG ;;
	(M)	module=$OPTARG ;;
	(m)	mailto=$OPTARG ;;
	(p)	pathr=$OPTARG ;;
	(R)	replyto=$OPTARG ;;
	(\ )	let 'OPTIND -= 2'
		break ;;
	(*)	die check usage
	}
done
shift $((OPTIND - 1))

[[ -z $repo ]] && repo=$CVSROOT
[[ -n $logfile && ! -e $logfile ]] && die logfile "($logfile)" does not exist
[[ -z $pathr ]] && die give a path please
hn=$(hostname 2>/dev/null)
[[ $hn = *.* ]] || hn=$hn.$(domainname 2>/dev/null)
[[ $hn = *. ]] && hn=${hn}invalid
if [[ $pathr = */* ]]; then
	pathd=${pathr#*/}
else
	pathd=.
fi

if [[ -e $repo/.tmp/do-dump ]]; then
	if DUMPFN=$(mktemp $repo/.tmp/dump.XXXXXXXXXXXX); then
		cat >$DUMPFN
		{
			local argv
			set -A argv -- "$0" "$@"
			print "BEGIN calling information for commit $id"
			integer i=0
			while (( i < ${#argv[*]} )); do
				print -nr -- "[$i]<${argv[i++]}> "
			done
			print
			cat $DUMPFN
			print "END calling information"
		} | logger -t "CVS:dump"
	else
		DUMPFN=0
	fi
else
	DUMPFN=0
fi

diff=$repo/.tmp/cl.log.dif.$id
difc=$repo/.tmp/cl.log.dfc.$id
msgf=$repo/.tmp/cl.log.msg.$id
outf=$repo/.tmp/cl.log.out.$id
tmpf=$repo/.tmp/cl.log.tmp.$id
modf=$repo/.tmp/cl.module.$id
prefix=$repo/.tmp/cl.lst
set -A files
set -A fold
set -A fnew
integer i=0
nl='
'

while (( $# > 2 )); do
	files[i]=$1
	fold[i]=$2
	fnew[i]=$3
	shift; shift; shift

	# cvs import or cvs add directory
	[[ $i = 0 && ${fold[i]} = @(- )* && ${fnew[i]} = NONE ]] && break

	let ++i
done

while (( $# )); do
	print -u2 "warning: junk argument '$1'"
	shift
done

[[ -z $module ]] && module=${pathr%%/*}
[[ -n $logfile && $logfile != */* ]] && logfile=$repo/$module/$logfile
if [[ -e $modf ]]; then
	[[ "$(<$modf)" = $module ]] || print \(multiple\) >$modf
else
	print $module >$modf
fi

# Check for newly created dir
if [[ ${fold[0]} = "- New directory" ]]; then
	makeheader >$tmpf
	print -r -- "${files[0]}" >>$tmpf
	print >>$tmpf
	if [[ $DUMPFN = 0 ]]; then
		cat >>$tmpf
	else
		cat $DUMPFN >>$tmpf
		rm -f $DUMPFN
	fi
	[[ -n $logfile ]] && writelog $tmpf
	[[ -n $mailto ]] && writemail $tmpf
	rm $repo/.tmp/cl.*.$id
	exit 0
fi

# Iterate over the message body
status=none
set -A changed_files
set -A added_files
set -A removed_files
set -A log_lines
if [[ $DUMPFN = 0 ]]; then
	_i=
else
	cat $DUMPFN |&
	_i=-p
fi
while IFS= read ${_i} -r line; do
	case $line {
	(Modified\ Files*)
		status=changed
		continue ;;
	(Added\ Files*)
		status=added
		continue ;;
	(Removed\ Files*)
		status=removed
		continue ;;
	(Log\ Message*)
		status=log
		continue ;;
	}

	# Delete leading/trailing whitespace
	[[ $status = log ]] || line=${line##*([	 ])}
	line=${line%%*([	 ])}

	case $status {
	(changed)
		for i in $line; do
			changed_files[${#changed_files[*]}]=$i
		done ;;
	(added)
		for i in $line; do
			added_files[${#added_files[*]}]=$i
		done ;;
	(removed)
		for i in $line; do
			removed_files[${#removed_files[*]}]=$i
		done ;;
	(log)
		log_lines[${#log_lines[*]}]=$line
		;;
	}

done
[[ $DUMPFN = 0 ]] || rm -f $DUMPFN

# Strip trailing blank lines from the log message; multiple blank
# lines are compressed into one, and leading blank lines are removed
(( ${#log_lines[*]} )) && \
    while [[ ${log_lines[${#log_lines[*]}-1]} = *([	 ]) ]]; do
	unset log_lines[${#log_lines[*]}-1]
done
let i=0
while (( i < ${#log_lines[*]} )); do
	[[ ${log_lines[i]} = *([	 ]) ]] || break
	let ++i
done
print -n >$msgf
sp=
[[ ${fold[0]} = "- Imported sources" ]] && sp='    '
while (( i < ${#log_lines[*]} )); do
	if [[ ${log_lines[i]} = *([	 ]) ]]; then
		let ++i
		(( isblank )) && continue
		print >>$msgf
		isblank=1
	else
		print -r -- "$sp${log_lines[i++]}" >>$msgf
		isblank=0
	fi
done

# Check for an import command
if [[ ${fold[0]} = "- Imported sources" ]]; then
	makeheader >$tmpf
	print Log message: >>$tmpf
	ed -s $msgf <<-'EOF'
		%g/^    \(Status:\)$/s//\1/
		%g/^    \(Vendor Tag:\)/s//\1/
		%g/^    \(Release Tags:\)/s//\1/
		wq
	EOF
	if [[ -n $loguri ]]; then
		cat $tmpf >$outf
		sed -n '1,/Release Tags/p' <$msgf >>$outf
		cat >>$outf <<-EOF

			To reduce mail sizes, imports only send out the log message
			and tags; the (rather large) ChangeLog data can be found at
			|	${loguri}
			Please remember that it can take some time to synchronise.
		EOF
	else
		cat $tmpf $msgf >$outf
	fi
	[[ -n $logfile ]] && writelog $tmpf $msgf
	[[ -n $mailto ]] && writemail $outf
	rm $repo/.tmp/cl.*.$id
	exit 0
fi

leave=$(getdirs "$repo/$pathr")

# Look for a log file which matches this log message
let i=0
lmsg=$(<$msgf)
while :; do
	if [[ ! -e $prefix.msg.$i.$id ]]; then
		cp $msgf $prefix.msg.$i.$id
		break
	fi
	[[ $lmsg = "$(<$prefix.msg.$i.$id)" ]] && break
	let ++i
done

# Write information collected during this run
[[ ${#changed_files[*]} -gt 0 ]] && print -r -- "$pathd/" >>$prefix.chg.$i.$id
let j=0
while (( j < ${#changed_files[*]} )); do
	print -r -- "${changed_files[j++]}" >>$prefix.chg.$i.$id
done
[[ ${#added_files[*]} -gt 0 ]] && print -r -- "$pathd/" >>$prefix.add.$i.$id
let j=0
while (( j < ${#added_files[*]} )); do
	print -r -- "${added_files[j++]}" >>$prefix.add.$i.$id
done
[[ ${#removed_files[*]} -gt 0 ]] && print -r -- "$pathd/" >>$prefix.del.$i.$id
let j=0
while (( j < ${#removed_files[*]} )); do
	print -r -- "${removed_files[j++]}" >>$prefix.del.$i.$id
done

# Collect changeset diff information
let j=0
while (( j < ${#files[*]} )); do
	fn=$pathr/${files[j]}
	old=${fold[j]}
	[[ $old = NONE ]] && old=0
	new=${fnew[j]}
	[[ $new = NONE ]] && new=0
	print -r -- "cvs -R rdiff -kk -upr$old -r$new $fn" >>$diff
	[[ -n $logfile ]] && print -r -- "$id	$fn" >>${logfile%/*}/idcache
	let ++j
done

# End here if this is not my last invocation
(( leave )) && exit 0
module=$(<$modf)

# Prepare the final commit message
makeheader >$tmpf
let i=0
while [[ -e $prefix.msg.$i.$id ]]; do
	let j=0
	if [[ -s $prefix.chg.$i.$id ]]; then
		print Modified files: >>$tmpf
		addflist <$prefix.chg.$i.$id >>$tmpf
		let ++j
	fi
	if [[ -s $prefix.add.$i.$id ]]; then
		print Added files: >>$tmpf
		addflist <$prefix.add.$i.$id >>$tmpf
		let ++j
	fi
	if [[ -s $prefix.del.$i.$id ]]; then
		print Removed files: >>$tmpf
		addflist <$prefix.del.$i.$id >>$tmpf
		let ++j
	fi
	(( j > 0 )) && print >>$tmpf
	if [[ -s $prefix.msg.$i.$id ]]; then
		print Log message: >>$tmpf
		cat $prefix.msg.$i.$id >>$tmpf
		print >>$tmpf
	fi
	let ++i
done
if [[ -s $diff ]]; then
	if (( do_diff )); then
		print Please note that the following diffs are not public \
		    domain, they are >$difc
		print copyrighted and covered by the licence terms of the \
		    files themselves. >>$difc
		print >>$difc
		CVSROOT=$repo $SHELL $diff >>$difc
	else
		difc=$diff
	fi
	print '0a\nTo generate a diff of this changeset, execute the' \
	    'following commands:\n.\nwq' | ed -s $diff
fi

# And out with it
[[ -n $logfile ]] && writelog $tmpf $diff
[[ -n $mailto ]] && writemail $tmpf $difc
rm $repo/.tmp/cl.*.$id
print Committed revision $id.
exit 0
