#!/usr/bin/env mksh
# $MirOS: CVSROOT/tracker,v 1.12 2008/07/03 18:35:09 tg Exp $
#-
# Copyright (c) 2005, 2008
#	Thorsten Glaser <tg@mirbsd.de>
#
# Provided that these terms and disclaimer and all copyright notices
# are retained or reproduced in an accompanying document, permission
# is granted to deal in this work without restriction, including un-
# limited rights to use, publicly perform, distribute, sell, modify,
# merge, give away, or sublicence.
#
# This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
# the utmost extent permitted by applicable law, neither express nor
# implied; without malicious intent or gross negligence. In no event
# may a licensor, author or contributor be held liable for indirect,
# direct, other damage, loss, or other issues arising in any way out
# of dealing in the work, even if advised of the possibility of such
# damage or existence of a defect, except proven that it results out
# of said person's immediate fault when using the work as intended.
#-
# Record the last directory where the current commit is taking place
# in for use by the mklogci and mklogtag scripts. Note that the pre-
# fix for temporary files (idea: tmpdir/prefix.*.commitid) is synced
# with the other files.

export LC_ALL=C
unset LANGUAGE

repo=$1
id=$2
dir=$3
if [[ -z $id || $id = @(-|%I) ]]; then
	if (( PGRP )); then
		id=$PGRP	# mksh pre-R24 or post-R33
	else
		id=$(perl -e 'print getpgrp();' 2>&-) || id=
	fi
	if [[ -z $id || $id -eq 0 ]]; then
		print -u2 Cannot determine PGRP, upgrade mksh or check
		print -u2 your \$PATH for perl.
		exit 255
	fi
fi

[[ -e $repo/.tmp/do-dump ]] && {
	local argv
	set -A argv -- "$0" "$@"
	print "BEGIN calling information for commit $id"
	integer i=0
	while (( i < ${#argv[*]} )); do
		print -nr -- "[$i]<${argv[i++]}> "
	done
	print
	print "END calling information (no stdin)"
} | logger -t "CVS:dump"

set -A dirnames
set -A dircounts
integer dircounts

[[ -s $repo/.tmp/cl.dirs.$id ]] && . $repo/.tmp/cl.dirs.$id

nl='
'

integer i=0
while (( i < ${#dirnames[*]} )); do
	[[ ${dirnames[i]} = $dir ]] && break
	let i++
done
dirnames[i]=$dir
let dircounts[i]++

ln="set -A dirnames --"
lc="set -A dircounts"
i=0
while (( i < ${#dirnames[*]} )); do
	ln="$ln '${dirnames[i]}'"
	lc="$lc ${dircounts[i]}"
	let i++
done

print -r -- "$ln$nl$lc" >$repo/.tmp/cl.dirs.$id
exit 0
