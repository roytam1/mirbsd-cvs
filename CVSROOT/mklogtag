#!/bin/mksh
# $MirOS: CVSROOT/mklogtag,v 1.8 2005/12/06 03:11:40 tg Exp $
#-
# Copyright (c) 2004, 2005
#	Thorsten "mirabile" Glaser <tg@mirbsd.de>
#
# Licensee is hereby permitted to deal in this work without restric-
# tion, including unlimited rights to use, publicly perform, modify,
# merge, distribute, sell, give away or sublicence, provided all co-
# pyright notices above, these terms and the disclaimer are retained
# in all redistributions or reproduced in accompanying documentation
# or other materials provided with binary redistributions.
#
# All advertising materials mentioning features or use of this soft-
# ware must display the following acknowledgement:
#	This product includes material provided by Thorsten Glaser.
#
# Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
# express, or implied, to the maximum extent permitted by applicable
# law, without malicious intent or gross negligence; in no event may
# licensor, an author or contributor be held liable for any indirect
# or other damage, or direct damage except proven a consequence of a
# direct error of said person and intended use of this work, loss or
# other issues arising in any way out of its use, even if advised of
# the possibility of such damage or existence of a nontrivial bug.
#-
# Log cvs 1.12 tagging operations in the same manner mklogci does it
# for regular file operations.
# XXX seems to not delete its temporary files sometimes, but works.

SHELL=${SHELL:-/bin/mksh}
id=$1
shift

function die
{
	print -r Error: "$@"
	rm $repo/.tmp/cl.*.$id
	exit 1
}

rcpt=
logf=NO
op=
branch=
tag=$3
repo=$4
dir=$5
cloguri=NO
replyto=NO
set -A files
set -A fold
set -A fnew
opt_done=0
let i=0

F=$repo/.tmp/cl.tag.$id
T=$repo/.tmp/cl.tagend.$id

[[ $(<$repo/.tmp/cl.lastdir.$id) = $repo/$dir ]]
leave=$?

case $1 {
(add)	op=Adding	;;
(mov)	op=Moving	;;
(del)	op=Deleting	;;
(*)	die check usage	;;
}
shift

case $1 {
([Tt])	branch=" branch" ;;
([Nn])	branch=" static" ;;
}
shift

[[ -z $tag || -z $repo || -z $dir ]] && die check usage
shift; shift; shift
module=${dir%%/*}
if [[ $module = $dir ]]; then
	dir=.
else
	dir=${dir#*/}
fi

while (( $# > 0 )); do
	if [[ $1 = -m && $opt_done = 0 ]]; then
		rcpt="$rcpt $2"
		shift; shift
	elif [[ $1 = -f && $opt_done = 0 ]]; then
		logf=$2
		shift; shift;
	elif [[ $1 = -I && $opt_done = 0 ]]; then
		cloguri="$2"
		shift; shift;
	elif [[ $1 = -R && $opt_done = 0 ]]; then
		replyto="$2"
		shift; shift;
	else
		opt_done=1
		files[i]="$1"
		fold[i]="$2"
		fnew[i]="$3"
		shift; shift; shift
		let ++i
	fi
done

(( i == 0 )) && exit 0

let j=0
while (( j < i )); do
	print -- "${fold[j]}\t${fnew[j]}\t$dir/./${files[j]}"
	let ++j
done >>$F

[[ $leave = 1 ]] && exit 0

print 'old rev.\tnew rev.\tfilename' >$T
print -- '--------\t--------\t--------' >>$T
sort -t'	' -k3 $F | \
    sed -e 's!/\./!/!g' -e 's!	\./!	!' \
    >>$T
column -ts'	' <$T >$F

hn=$(hostname 2>/dev/null)
[[ $hn = *.* ]] || hn=$hn.$(domainname 2>/dev/null)
[[ $hn = *. ]] && hn=${hn}invalid

cat >$T <<-EOF
	Commit ID:	$id
	CVSROOT:	$repo
	Module name:	$module
	Changes by:	${USER}@$hn	$(TZ=UTC date '+%Y/%m/%d %T' 2>/dev/null) UTC

	$op$branch tag '$tag' affecting:

EOF

sendmail -t |&
print -pr -- To: $rcpt
print -pr -- Subject: CVS: $hn: $module
if [[ $replyto != NO ]]; then
	print -pr -- Mail-Followup-To: $replyto
	print -pr -- Reply-To: $replyto
fi
print -p
exec 3>&p
cat $T >&3
if [[ $cloguri = NO ]]; then
	cat $F >&3
else
	print -u3 various files\; if you want to know more, go read
	print -ru3 -- $cloguri
fi
exec 3>&-

if [[ -e $logf ]]; then
	cat $F >>$T
	print ________________________________________________________________________ >>$T
	print >>$T
	$SHELL $repo/CVSROOT/genlog $logf $repo/CVSROOT/history <$T
fi

rm $repo/.tmp/cl.*.$id
exit 0
