#!/usr/bin/env mksh
# $MirOS: CVSROOT/mklogtag,v 1.20 2008/08/05 06:07:33 tg Exp $
#-
# Copyright (c) 2005, 2006
#	Thorsten Glaser <tg@mirbsd.de>
#
# Provided that these terms and disclaimer and all copyright notices
# are retained or reproduced in an accompanying document, permission
# is granted to deal in this work without restriction, including un-
# limited rights to use, publicly perform, distribute, sell, modify,
# merge, give away, or sublicence.
#
# This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
# the utmost extent permitted by applicable law, neither express nor
# implied; without malicious intent or gross negligence. In no event
# may a licensor, author or contributor be held liable for indirect,
# direct, other damage, loss, or other issues arising in any way out
# of dealing in the work, even if advised of the possibility of such
# damage or existence of a defect, except proven that it results out
# of said person's immediate fault when using the work as intended.
#-
# Log cvs 1.12 tagging operations in the same manner mklogci does it
# for regular file operations.
# XXX seems to not delete its temporary files sometimes, but works.

export LC_ALL=C
unset LANGUAGE

SHELL=$(whence -p mksh) || SHELL=/bin/mksh
id=$1
shift
if [[ -z $id || $id = @(-|%I) ]]; then
	if (( PGRP )); then
		id=$PGRP	# mksh pre-R24 or post-R33
	else
		id=$(perl -e 'print getpgrp();' 2>&-) || id=
	fi
	if [[ -z $id || $id -eq 0 ]]; then
		print -u2 Cannot determine PGRP, upgrade mksh or check
		print -u2 your \$PATH for perl.
		exit 255
	fi
	cidline=0
else
	cidline=1
fi

function die {
	print -ru2 Error: "$@"
	rm $repo/.tmp/cl.*.$id
	exit 1
}

function getdirs {
	local dir=$1
	integer i

	[[ -s $repo/.tmp/cl.dirs.$id ]] || return 0
	set -A dirnames
	set -A dircounts
	integer dircounts
	. $repo/.tmp/cl.dirs.$id
	i=0
	while (( i < ${#dirnames[*]} )); do
		[[ ${dirnames[i]} = $dir ]] && break
		let i++
	done
	(( i < ${#dirnames[*]} )) || return 0	# not found
	(( dircounts[i] )) || return 0		# count zero

	let dircounts[i]--
	if (( !dircounts[i] )); then
		unset dircounts[i]
		unset dirnames[i]
	fi
	set -A dirnames -- "${dirnames[@]}"
	set -A dircounts -- "${dircounts[@]}"

	(( ${#dirnames[*]} )) || return 0	# none left
	ln="set -A dirnames --"
	lc="set -A dircounts"
	i=0
	while (( i < ${#dirnames[*]} )); do
		ln="$ln '${dirnames[i]}'"
		lc="$lc ${dircounts[i]}"
		let i++
	done
	print -r -- "$ln$nl$lc" >$repo/.tmp/cl.dirs.$id
	return 1				# some left
}


rcpt=
logf=NO
op=
branch=
tag=$3
repo=$4
dir=$5
cloguri=NO
replyto=NO
set -A files
set -A fold
set -A fnew
opt_done=0
let i=0

[[ -d $repo/.tmp/. ]] || die temporary directory "($repo/.tmp)" does not exist

[[ -e $repo/.tmp/do-dump ]] && {
	local argv
	set -A argv -- "$0" "$@"
	print "BEGIN calling information for commit $id"
	integer i=0
	while (( i < ${#argv[*]} )); do
		print -nr -- "[$i]<${argv[i++]}> "
	done
	print
	print "END calling information (no stdin)"
} | logger -t "CVS:dump"

F=$repo/.tmp/cl.tag.$id
T=$repo/.tmp/cl.tagend.$id

getdirs "$repo/$dir"
leave=$?

case $1 {
(add)	op=Adding	;;
(mov)	op=Moving	;;
(del)	op=Deleting	;;
(*)	die check usage	;;
}
shift

case $1 {
([Tt])	branch=branch ;;
([Nn])	branch=static ;;
}
shift

[[ -z $tag || -z $repo || -z $dir ]] && die check usage
shift; shift; shift
module=${dir%%/*}
if [[ $module = $dir ]]; then
	dir=.
else
	dir=${dir#*/}
fi

while (( $# > 0 )); do
	if [[ $1 = -m && $opt_done = 0 ]]; then
		rcpt="$rcpt $2"
		shift; shift
	elif [[ $1 = -f && $opt_done = 0 ]]; then
		logf=$2
		shift; shift;
	elif [[ $1 = -I && $opt_done = 0 ]]; then
		cloguri=$2
		shift; shift;
	elif [[ $1 = -R && $opt_done = 0 ]]; then
		replyto=$2
		shift; shift;
	else
		opt_done=1
		files[i]=$1
		fold[i]=$2
		fnew[i]=$3
		shift; shift; shift
		let ++i
	fi
done

(( i )) || exit 0

let j=0
while (( j < i )); do
	print -- "${fold[j]}\t${fnew[j]}\t$dir/./${files[j]}"
	let ++j
done >>$F

(( leave )) && exit 0

print 'old rev.\tnew rev.\tfilename' >$T
print -- '--------\t--------\t--------' >>$T
sort -t'	' -k3 $F | \
    sed -e 's!/\./!/!g' -e 's!	\./!	!' \
    >>$T
column -ts'	' <$T >$F

hn=$(hostname 2>/dev/null)
[[ $hn = *.* ]] || hn=$hn.$(domainname 2>/dev/null)
[[ $hn = *. ]] && hn=${hn}invalid

(( cidline )) && cat >$T <<-EOF
	Commit ID:	$id
EOF
cat >$T <<-EOF
	CVSROOT:	$repo
	Module name:	$module
	Changes by:	${USER}@$hn	$(TZ=UTC date '+%Y/%m/%d %T' 2>/dev/null) UTC

	$op $branch tag '$tag' affecting:

EOF

sendmail -t |&
print -pr -- To: $rcpt
print -pr -- Subject: CVS: $hn: $module
if [[ $replyto != NO ]]; then
	print -pr -- Mail-Followup-To: $replyto
	print -pr -- Reply-To: $replyto
fi
print -p
exec 3>&p
cat $T >&3
if [[ $cloguri = NO ]]; then
	cat $F >&3
else
	print -u3 various files\; if you want to know more, go read
	print -ru3 -- $cloguri
fi
exec 3>&-

if [[ -e $logf ]]; then
	cat $F >>$T
	print ________________________________________________________________________ >>$T
	print >>$T
	$SHELL $repo/CVSROOT/genlog $logf $repo/CVSROOT/history <$T
fi

rm $repo/.tmp/cl.*.$id
exit 0
